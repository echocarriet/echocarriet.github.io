<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>MacM1 安裝 iTerm2</title>
    <url>/tools/20230327/442102443/</url>
    <content><![CDATA[<h2 id="❒-環境"><a href="#❒-環境" class="headerlink" title="❒ 環境"></a>❒ 環境</h2><ul>
<li>Mac M1</li>
<li>M1 終端機 shell 預設為 zsh</li>
</ul>
<h2 id="❒-iTerm2"><a href="#❒-iTerm2" class="headerlink" title="❒ iTerm2"></a>❒ iTerm2</h2><p>有兩種安裝方式 ① iTerm2 官網 ② HomeBrew，此篇文章將會使用 HomeBrew 來安裝 iTerm2。</p>
<h3 id="➊-安裝-HomeBrew"><a href="#➊-安裝-HomeBrew" class="headerlink" title="➊ 安裝 HomeBrew"></a>➊ 安裝 HomeBrew</h3><ol>
<li><p>HomeBrew 依照是 Mac OS X 的套件管理工具，把下方指令輸入到終端機，接著就等它安裝囉！</p>
</li>
<li><p>M1 電腦安裝 HomeBrew 會被安裝在 <code>/opt/homebrew</code> 路徑下，所以如果安裝在 <code>/usr/local/Homebrew</code> 目錄下是找不到的。</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/bin/bash -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>安裝過程會需要一點時間。</p>
<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2FMacM1%E5%AE%89%E8%A3%9DiTerm2_01.png?alt=media&token=019adecb-da6b-405f-a412-c04499273ef6" alt="// 安裝過程截圖"></p>
</li>
<li><p>把下方指令輸入於終端機，會把 HomeBrew 加到你的 <code>~/.zprofile</code> 路徑中 ( 加入此路徑才能讓用 brew 指令安裝的套件在執行的時候被找到 )。</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;eval $(/opt/homebrew/bin/brew shellenv)&#x27;</span> &gt;&gt; ~/.zprofile</span><br><span class="line"><span class="built_in">eval</span> $(/opt/homebrew/bin/brew shellenv)</span><br></pre></td></tr></table></figure>
</li>
<li><p>在終端機執行此指令</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew <span class="built_in">help</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>重啟終端機，輸入指令查看是否有成功，成功會跳出 Homebrew 版本號。</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew --version</span><br></pre></td></tr></table></figure>

<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2FMacM1%E5%AE%89%E8%A3%9DiTerm2_02.png?alt=media&token=86ce53ca-3db6-4dd3-a915-5fa912ed9f82" alt="// 終端機 Homebrew 版本號"></p>
</li>
</ol>
<h3 id="➋-HomeBrew-安裝-iTerm2"><a href="#➋-HomeBrew-安裝-iTerm2" class="headerlink" title="➋ HomeBrew 安裝 iTerm2"></a>➋ HomeBrew 安裝 iTerm2</h3><p><a href="https://formulae.brew.sh/cask/iterm2">HomeBrew 官網指令</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install --cask iterm2</span><br></pre></td></tr></table></figure>

<p>安裝成功後就可在電腦的應用程式中看到囉 ！( 路徑： &#x2F;Applications&#x2F;iTerm.app )</p>
<h2 id="❒-Oh-My-ZSH"><a href="#❒-Oh-My-ZSH" class="headerlink" title="❒ Oh My ZSH"></a>❒ Oh My ZSH</h2><p>① 於終端機輸入指令安裝 Oh My ZSH。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>

<p>執行完上面指令後，終端機原本的 <code>%</code> 符號變成 <code>→ ~</code>。</p>
<h3 id="調整-iTerm-與終端機字體及-theme"><a href="#調整-iTerm-與終端機字體及-theme" class="headerlink" title="調整 iTerm 與終端機字體及 theme"></a>調整 iTerm 與終端機字體及 theme</h3><p>字體可依自己喜好設定，建議使用 Nerd Font 系列字型才能支援完整的顯示效果。</p>
<p>② 下載 GoMono nerd Font 字型。可參考此文章中的 “ <a href="https://ithelp.ithome.com.tw/articles/10253908">老師！我想知道！要怎麼讓終端機變漂亮呢 - Mac 篇</a> ” 或 “ <a href="https://cindyliu923.com/2021/07/17/macbook-pro-m1/#iTerm">安裝 oh my zsh - 安裝字型</a>” 。</p>
<p>③ 調整主題：輸入指令開啟 .zshrc 檔案，把檔案中的 <code>ZSH_THEME=&quot;robbyrussell&quot;</code> 改為 <code>ZSH_THEME=&quot;agnoster&quot;</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">open ~/.zshrc</span><br></pre></td></tr></table></figure>

<p>④ 電腦應用程式中開啟 iTerm，按下快捷鍵 <code>command + ,</code> 進行設定。於 Preferences → Text 中把 Font 調整為步驟 2 下載的字型 <code>GoMono Nerd Font Mono</code>。</p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2FMacM1%E5%AE%89%E8%A3%9DiTerm2_03.png?alt=media&token=7150b2dd-f6ac-4302-8f45-7e2613665044" alt="// iTerm 設定"></p>
<p>⑤ 開啟終端機，使用快捷鍵 <code>command + ,</code> 進行終端機文字設定，在描述檔的文字中，把字體調整為 <code>GoMono Nerd Font Mono</code> 。</p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2FMacM1%E5%AE%89%E8%A3%9DiTerm2_04.png?alt=media&token=7119daeb-db26-4e02-add1-9402f9640210" alt="// 終端機設定"></p>
<h3 id="安裝主題套件並調整主題色"><a href="#安裝主題套件並調整主題色" class="headerlink" title="安裝主題套件並調整主題色"></a>安裝主題套件並調整主題色</h3><p>可依自己喜好設定，下面主題擇一</p>
<p><strong>第一種主題： <a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Themes#agnoster">agnoster</a> 主題</strong></p>
<p><a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Themes">Oh My ZSH Themes 文件</a> (  ****<a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Themes#agnoster">agnoster</a>** )</p>
<p>輸入指令開啟 .zshrc 檔案，把檔案中的 <code>ZSH_THEME=&quot;robbyrussell&quot;</code> 將它改為 <code>ZSH_THEME=&quot;agnoster&quot;</code> ( 調整 Oh-my-zsh 主題 )。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">open ~/.zshrc</span><br></pre></td></tr></table></figure>

<p><strong>第二種主題 <a href="https://github.com/Powerlevel9k/powerlevel9k">powerlevel9k</a> ( 筆者使用此主題 )</strong></p>
<p>① 安裝 <a href="https://github.com/Powerlevel9k/powerlevel9k">**powerlevel9k</a>**</p>
<p>目前出到 <strong><strong>Powerlevel10k</strong></strong>，可以嘗試看看。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/bhilburn/powerlevel9k.git ~/.oh-my-zsh/custom/themes/powerlevel9k</span><br></pre></td></tr></table></figure>

<p>② 開啟  .zshrc 輸入指令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">open ~/.zshrc</span><br></pre></td></tr></table></figure>

<p>③ 調整顏色</p>
<ul>
<li><p>iTerm2 挑選配色，可參考「 <a href="https://iterm2colorschemes.com/">Iterm2-color-schemes</a> 」，網頁中可以看到很多不同配色，挑選一個自己喜歡的配色，在喜歡的配色的名字按右鍵，並選擇另存連結後將檔案儲存下來。</p>
<ul>
<li>以筆者這邊選擇「 Tomorrow Night Eighties 」，另存連結就會下載一個 <code>Tomorrow Night Eighties.itermcolor</code> 的檔案。</li>
</ul>
</li>
<li><p>下載好後，開啟 iTerm 使用快捷鍵 <code>command + ,</code> 於 Preferences &gt; Profiles &gt; Colors，右下角 <code>Color Presets..</code> 打開選單，並選擇 Import 把下載的檔案載入。筆者這邊選擇 Builtin Solarized Light。</p>
<p>  <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2FMacM1%E5%AE%89%E8%A3%9DiTerm2_05.png?alt=media&token=dbc6dd7b-6f16-491c-88fd-afa5867c0e29" alt="// iTerm 主題色設定"></p>
</li>
</ul>
<p>④ 把下面內容加入 .zshrc 檔案，記得按儲存 ( 依自己喜好設定 )</p>
<p>更多提示設定可參考 <strong><a href="https://github.com/Powerlevel9k/powerlevel9k/wiki/Stylizing-Your-Prompt">Stylizing Your Prompt 文件</a></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 當前主題</span></span><br><span class="line">ZSH_THEME=powerlevel9k/powerlevel9k</span><br><span class="line"><span class="comment"># powerlevel9k 使用的模式</span></span><br><span class="line">POWERLINE9K_MODE=<span class="string">&#x27;nerdfont-complete&#x27;</span></span><br><span class="line"><span class="comment"># command line 左邊想顯示的內容</span></span><br><span class="line">POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(context <span class="built_in">dir</span> dir_writable vcs vi_mode)</span><br><span class="line"><span class="comment"># command line 右邊想顯示的內容</span></span><br><span class="line">POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(status ram load time)</span><br><span class="line">POWERLEVEL9K_PROMPT_ADD_NEWLINE=<span class="literal">true</span></span><br><span class="line">POWERLEVEL9K_DIR_HOME_BACKGROUND=<span class="string">&#x27;216&#x27;</span></span><br><span class="line">POWERLEVEL9K_DIR_HOME_SUBFOLDER_BACKGROUND=<span class="string">&#x27;216&#x27;</span></span><br><span class="line">POWERLEVEL9K_DIR_DEFAULT_BACKGROUND=<span class="string">&#x27;216&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><p>.zshrc 檔案中 <code>POWERLEVEL9K_LEFT_PROMPT_ELEMENTS</code> 與 <code>POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS</code></p>
<ul>
<li>更多提示設定可參考 <a href="https://github.com/Powerlevel9k/powerlevel9k#available-prompt-segments">Available Prompt Segments &#x2F; System Status Segments</a>。</li>
</ul>
</li>
<li><p><code>POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(command line 右邊顯示的內容)</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下圖一</span></span><br><span class="line">POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(status ram load time)</span><br><span class="line"><span class="comment"># 下圖二</span></span><br><span class="line">POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(status background_jobs time)</span><br></pre></td></tr></table></figure>

<p><img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2FMacM1%E5%AE%89%E8%A3%9DiTerm2_06.png?alt=media&token=a99e3bf7-3be7-4d26-8809-ce9c6f1278d9" alt="// command line 右邊顯示的內容 (圖一)"><br><img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2FMacM1%E5%AE%89%E8%A3%9DiTerm2_07.png?alt=media&token=2994bd89-8a8d-4cde-97bc-6288d8f37689" alt="// command line 右邊顯示的內容 (圖二)"></p>
</li>
<li><p><code>_BACKGROUND</code> 顏色可參考文件「 Stylizing Your Prompt 中的 <a href="https://github.com/Powerlevel9k/powerlevel9k/wiki/Stylizing-Your-Prompt#segment-color-customization">Segment Color Customization</a> 」</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">POWERLEVEL9K_DIR_HOME_BACKGROUND=<span class="string">&#x27;填顏色&#x27;</span></span><br><span class="line">POWERLEVEL9K_DIR_HOME_SUBFOLDER_BACKGROUND=<span class="string">&#x27;填顏色&#x27;</span></span><br><span class="line">POWERLEVEL9K_DIR_DEFAULT_BACKGROUND=<span class="string">&#x27;填顏色&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>⑤ 輸入指令，就會出現設定好的樣式囉</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exec</span> <span class="variable">$SHELL</span></span><br></pre></td></tr></table></figure>

<h2 id="❒-查看終端機-shell-為哪種腳本語言的兩種方式"><a href="#❒-查看終端機-shell-為哪種腳本語言的兩種方式" class="headerlink" title="❒ 查看終端機 shell 為哪種腳本語言的兩種方式"></a>❒ 查看終端機 shell 為哪種腳本語言的兩種方式</h2><p>① 開啟終端機後，於最上方欄位可以看到是哪種腳本。</p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2FMacM1%E5%AE%89%E8%A3%9DiTerm2_08.png?alt=media&token=983ff13d-1aa3-48c2-aea2-cb7524b7b6ac" alt="// 終端機表頭截圖"></p>
<p>② 使用指令</p>
<p>可使用指令 <code>echo $SHELL</code> 驗證，如果是會回傳 <code>/bin/zsh</code> 。</p>
<h2 id="參考資訊"><a href="#參考資訊" class="headerlink" title="參考資訊"></a>參考資訊</h2><ul>
<li><a href="https://stackoverflow.com/questions/66666134/how-to-install-homebrew-on-m1-mac">How to install homebrew on M1 mac</a></li>
<li><a href="https://www.cxymm.net/article/weixin_45108550/113887368">Macos M1电脑安装homebrew过程。</a></li>
<li><a href="https://cindyliu923.com/2021/07/17/macbook-pro-m1/#%E5%AE%89%E8%A3%9D-for-m1-arm-%E7%9A%84-homebrew">MacBook Pro M1 開箱使用紀錄 - 安裝 M1 的 homebrew</a></li>
<li><a href="https://clay-atlas.com/blog/2020/10/16/mac-cn-terminal-zsh-bash-shell-script/">[MacOS] 將終端機預設 zsh 轉換成 bash（或其他腳本語言）</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10253908">老師！我想知道！要怎麼讓終端機變漂亮呢 - Mac 篇</a></li>
</ul>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>終端機美化</tag>
        <tag>HomeBrew</tag>
        <tag>iTerm2</tag>
      </tags>
  </entry>
  <entry>
    <title>TDX 註冊流程</title>
    <url>/tdxtransportdata/20230327/1344071855/</url>
    <content><![CDATA[<h2 id="註冊為-TDX-會員"><a href="#註冊為-TDX-會員" class="headerlink" title="註冊為 TDX 會員"></a>註冊為 TDX 會員</h2><p><a href="https://tdx.transportdata.tw/">TDX 運輸資料流通服務</a> → 右方點選註冊</p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2FTDX%E8%A8%BB%E5%86%8A%E6%B5%81%E7%A8%8B_01.png?alt=media&token=6b1b6df7-e4d2-4639-83bf-d59efdfeeb18" alt="// TDX 註冊圖示 ▲"></p>
<h2 id="會員註冊內容"><a href="#會員註冊內容" class="headerlink" title="會員註冊內容"></a>會員註冊內容</h2><h3 id="一般會員的內容適用對象與規範-官方資料"><a href="#一般會員的內容適用對象與規範-官方資料" class="headerlink" title="一般會員的內容適用對象與規範 ( 官方資料 )"></a>一般會員的內容適用對象與規範 ( 官方資料 )</h3><ul>
<li>適用對象<ol>
<li><ol>
<li>個人身份</li>
</ol>
</li>
<li>私人企業</li>
</ol>
</li>
<li>使用規範<ol>
<li>使用合法電子郵件信箱進行註冊</li>
<li>使用 edu、org、gov 域名信箱無法註冊為一般會員</li>
<li>可註冊至多三把API金鑰</li>
<li>可查詢資料服務</li>
<li>可申請下載歷史資料</li>
</ol>
</li>
</ul>
<h3 id="內容填寫步驟"><a href="#內容填寫步驟" class="headerlink" title="內容填寫步驟"></a>內容填寫步驟</h3><ol>
<li>欄位填寫完後按下註冊</li>
<li>到信箱收驗證信進行驗證</li>
<li>驗證成功後，三個工作日內後審核成功，就會發 Email 通知。</li>
</ol>
<h2 id="查看-API-金鑰-Client-Id-APP-ID-與-Client-Secret-APP-KEY"><a href="#查看-API-金鑰-Client-Id-APP-ID-與-Client-Secret-APP-KEY" class="headerlink" title="查看 API 金鑰 | Client Id (APP ID) 與 Client Secret (APP KEY)"></a>查看 <strong><strong>API 金鑰 |</strong></strong> Client Id (APP ID) 與 Client Secret (APP KEY)</h2><p>進入 TDX <a href="https://tdx.transportdata.tw/user/home">會員中心</a> → 左側欄 「資料服務」→ 「API金鑰」，點擊右方內容下面方框中 API KEY 的 「 編輯按鈕」 就可以查看到 Client Id 與 Client Secret 囉 !</p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2FTDX%E8%A8%BB%E5%86%8A%E6%B5%81%E7%A8%8B_02.png?alt=media&token=6a1397c0-f93d-45bf-9df6-8e87aab4339a" alt="// 後台查看 API 金鑰 ▲"></p>
<h2 id="查看當月服務呼叫統計"><a href="#查看當月服務呼叫統計" class="headerlink" title="查看當月服務呼叫統計"></a>查看當月服務呼叫統計</h2><p>TDX <a href="https://tdx.transportdata.tw/user/home">會員中心</a> → 左側欄 「總覽」</p>
<p>因為直接撈取的所有資料庫資料會很龐大，所以如果要避免月呼叫量太大，使用 API 時可搭配 Parameters 參數做過濾、篩選等。</p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2FTDX%E8%A8%BB%E5%86%8A%E6%B5%81%E7%A8%8B_03.png?alt=media&token=de9773ff-6f1c-4874-856b-0f78a7459788" alt="// 後台 - 當月服務呼叫統計 ▲"></p>
<h2 id="參考資訊"><a href="#參考資訊" class="headerlink" title="參考資訊"></a>參考資訊</h2><ul>
<li>六角學院<ul>
<li><a href="https://youtu.be/QR15lr82tt4?t=4874">10 分鐘申請 TDX 帳號流程影片 (1:21:00~1:31:00)</a></li>
<li>筆者於 2022 &#x2F; 6 &#x2F; 17 已無法於 PTX 註冊，改由上方 TDX 註冊，如上述筆記。<br>  <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2FTDX%E8%A8%BB%E5%86%8A%E6%B5%81%E7%A8%8B_04.png?alt=media&token=dfdae253-ef10-40de-ad9d-11c60707165d" alt="PTX 公告 ▲"></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>TDX運輸資料流通服務</category>
      </categories>
      <tags>
        <tag>TDX</tag>
      </tags>
  </entry>
  <entry>
    <title>PowerShell 美化</title>
    <url>/tools/20230327/2533981155/</url>
    <content><![CDATA[<h2 id="操作環境"><a href="#操作環境" class="headerlink" title="操作環境"></a>操作環境</h2><p>Windows 10</p>
<h2 id="更換-Sarasa-Gothic-更紗黑體"><a href="#更換-Sarasa-Gothic-更紗黑體" class="headerlink" title="更換 Sarasa Gothic 更紗黑體"></a>更換 Sarasa Gothic 更紗黑體</h2><ol>
<li>進入 <a href="https://github.com/be5invis/Sarasa-Gothic">更紗黑體 GitHub</a> 的 <a href="https://github.com/be5invis/Sarasa-Gothic/releases">release</a> 頁面</li>
<li>選取 ttf 壓縮檔下載 ( sarasa-gothic-ttf-unhinted-0.34.1.7z) → 解壓縮 → 找到檔案 sarasa-mono-tc-regular.ttf 按右鍵安裝 。<ol>
<li>字體中繁中就是有標註 tc 的。</li>
</ol>
</li>
<li>重新啟動 PowerShell → 內容 → 字型，就可以選取 “ 等距更紗黑體 “ 囉 !</li>
</ol>
<p><img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2FPowerShell%20%E7%BE%8E%E5%8C%96_0.png?alt=media&token=f3703089-1a6e-4f7c-8e08-77566a2be6e3" alt="PowerShell"></p>
<h2 id="oh-my-posh-增加提示條"><a href="#oh-my-posh-增加提示條" class="headerlink" title="oh-my-posh | 增加提示條"></a>oh-my-posh | 增加提示條</h2><p><a href="https://github.com/JanDeDobbeleer/oh-my-posh">oh-my-posh GitHub</a></p>
<ol>
<li><p>於 PowerShell 輸入以下指令，第一次安裝遇到問題直接輸入 Y 即可。</p>
 <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">Install-Module</span> <span class="string">posh-git</span> <span class="string">-Scope</span> <span class="string">CurrentUser</span></span><br></pre></td></tr></table></figure>

<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2FPowerShell%20%E7%BE%8E%E5%8C%96_1.png?alt=media&token=22d9af07-7224-4c42-aa44-659db1dbe600" alt="PowerShell1"></p>
</li>
<li><p>安裝 oh-my-posh 模組，過程一路按 Y。</p>
 <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">Install-Module</span> <span class="string">oh-my-posh</span> <span class="string">-Scope</span> <span class="string">CurrentUser</span></span><br></pre></td></tr></table></figure>

<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2FPowerShell%20%E7%BE%8E%E5%8C%96_2.png?alt=media&token=42f3cf05-2926-4967-ae4f-68921ea8f295" alt="PowerShell2"></p>
</li>
<li><p>設定自動套用，每次啟動 PowerShell 就可以子動套入設定。</p>
<ol>
<li><p>於 PowerShell 輸入 <code>$profile</code> 來顯示 PowerShell 自定義路徑</p>
<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2FPowerShell%20%E7%BE%8E%E5%8C%96_3.png?alt=media&token=812a473b-6462-483f-88a6-f44172c78e08" alt="PowerShell3"></p>
</li>
<li><p>複製 <code>C:\Users\WIN10\OneDrive\文件\WindowsPowerShell</code> 開啟資料夾</p>
</li>
<li><p>找名為 <code>Microsoft.PowerShell_profile.ps1</code> 的檔案，如果沒有就自行新增，並把下方程式碼貼入。 ( oh-my-posh 改版後 Set-Theme Agnoster 可更改為 Set-PoshPrompt -Theme Paradox ，就不會產生無法辨識的問題囉 ! )</p>
<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2FPowerShell%20%E7%BE%8E%E5%8C%96_4.png?alt=media&token=651dc4b2-c8ee-4fdf-8f0a-74c21fe58c4a" alt="PowerShell4"></p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Import-Module posh-git</span><br><span class="line">Import-Module oh-my-posh</span><br><span class="line">Set-PoshPrompt -Theme Paradox</span><br></pre></td></tr></table></figure>
</li>
<li><p>記得重啟 PowerShell 。</p>
<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2FPowerShell%20%E7%BE%8E%E5%8C%96_5.png?alt=media&token=e5341d47-e9d2-418a-9a19-5b24948a5440" alt="PowerShell5"></p>
</li>
</ol>
</li>
</ol>
<h2 id="參考文章"><a href="#參考文章" class="headerlink" title="參考文章"></a>參考文章</h2><ul>
<li><a href="https://hsiangfeng.github.io/other/20190924/3446878284/">Window PowerShell 美化 ( Windows Terminal )</a></li>
<li><a href="https://igouist.github.io/post/2020/08/powershell-beauty/">Powershell 美化作戰 —— 字型、執行原則和 oh-my-posh</a></li>
<li><a href="https://yangxuewu.com/pages/e06f47/">PowerShell 美化</a></li>
</ul>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>PowerShell</tag>
        <tag>oh-my-posh提示條</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 中的 split、splice、slice 區別</title>
    <url>/javascript/20230510/1499323110/</url>
    <content><![CDATA[<h2 id="❒-split"><a href="#❒-split" class="headerlink" title="❒ split"></a>❒ split</h2><p>原字串會依 <code>.split(&#39;&#39;)</code> 括號內的「 符號，可空格、文字」，把原字串依符號分割成子字串，並放回陣列中回傳，可把字串轉為陣列。</p>
<h3 id="結構"><a href="#結構" class="headerlink" title="結構"></a>結構</h3><p><code>原字串.split(&quot;符號&quot;);</code></p>
<h3 id="範例-1-以空格分割原字串"><a href="#範例-1-以空格分割原字串" class="headerlink" title="範例 1. 以空格分割原字串"></a>範例 1. 以空格分割原字串</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;Hello world&quot;</span></span><br><span class="line"><span class="keyword">let</span> arr = str.<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>)  <span class="comment">//以&quot;空格&quot;分割成子字串</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); </span><br><span class="line"></span><br><span class="line"><span class="comment">// [&#x27;Hello&#x27;, &#x27;world&#x27;]</span></span><br></pre></td></tr></table></figure>

<h3 id="範例-2-以符號分割原字串"><a href="#範例-2-以符號分割原字串" class="headerlink" title="範例 2. 以符號分割原字串"></a>範例 2. 以符號分割原字串</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;yellow,blue,red&quot;</span></span><br><span class="line"><span class="keyword">let</span> arr = str.<span class="title function_">split</span>(<span class="string">&quot;,&quot;</span>)  <span class="comment">//以&quot;空格&quot;分割字串</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// [&#x27;yellow&#x27;, &#x27;blue&#x27;, &#x27;red&#x27;]</span></span><br></pre></td></tr></table></figure>

<h3 id="範例-3-以文字分割原字串"><a href="#範例-3-以文字分割原字串" class="headerlink" title="範例 3. 以文字分割原字串"></a>範例 3. 以文字分割原字串</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;2021-12-03T00:00:00.000Z&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> arr = str.<span class="title function_">split</span>(<span class="string">&quot;T&quot;</span>)  <span class="comment">//以&quot;空格&quot;分割字串</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// [&#x27;2021-12-03&#x27;, &#x27;00:00:00.000Z&#x27;]</span></span><br></pre></td></tr></table></figure>

<h2 id="❒-splice"><a href="#❒-splice" class="headerlink" title="❒ splice"></a>❒ splice</h2><p><code>splice()</code> 方法可以藉由刪除原本的元素並／或加入新元素來改變一個陣列的內容，不會回傳新陣列。</p>
<h3 id="結構-1"><a href="#結構-1" class="headerlink" title="結構"></a>結構</h3><p><code>splice(start, deleteCount, item);</code></p>
<ul>
<li><code>start</code><ul>
<li>從 <code>start</code> 開始刪除 ( 起始值為 0 )。</li>
<li>如果括號內只有 <code>start</code>，則會刪除包含 <code>start</code> 本身以後的所有資料。</li>
</ul>
</li>
<li><code>deleteCount</code> ( 選擇性 )<ul>
<li>從 <code>start</code> 的位置要往後刪除幾筆資料，包含 <code>start</code> 本身。</li>
<li><code>deleteCount</code> 數值為 1 ，表示要刪除 <code>start</code> 本身。</li>
<li><code>deleteCount</code> 為 0 或是負數，則不會有元素被刪除。</li>
</ul>
</li>
<li><code>item</code> ( 選擇性 )<ul>
<li>可加入多個 <code>item</code></li>
</ul>
</li>
</ul>
<h3 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> alphabet =[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>];</span><br><span class="line">alphabet.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">1</span>); <span class="comment">//  [&#x27;a&#x27;, &#x27;c&#x27;, &#x27;d&#x27;]</span></span><br><span class="line">alphabet.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">0</span>); <span class="comment">//  [&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;]</span></span><br><span class="line">alphabet.<span class="title function_">splice</span>(<span class="number">2</span>); <span class="comment">// [&#x27;a&#x27;,&#x27;b&#x27;]</span></span><br><span class="line"></span><br><span class="line">alphabet.<span class="title function_">splice</span>(<span class="number">2</span>, <span class="number">1</span>, <span class="string">&#x27;Hello&#x27;</span>); <span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;Hello&#x27;, &#x27;d&#x27;]</span></span><br></pre></td></tr></table></figure>

<h2 id="❒-slice"><a href="#❒-slice" class="headerlink" title="❒ slice"></a>❒ slice</h2><p><code>slice()</code> 方法會回傳一個新陣列，為原陣列選擇的 <code>begin</code> 至 <code>end</code>（ 不含 end ）部分的淺拷貝（ shallow copy ）。( 可用來預設每頁顯示 x 筆資料，用來生成每頁的資料。 <a href="https://codepen.io/echocarriet/pen/Badojwd">Codepen 範例</a> )</p>
<h3 id="結構-2"><a href="#結構-2" class="headerlink" title="結構"></a>結構</h3><p><code>slice(begin, end);</code></p>
<ul>
<li><code>beging</code> ( 選擇性 )<ul>
<li>從哪個索引值開始切 ( 起始值為 0 )。</li>
<li>可使用負數索引，表示由陣列的最末項開始提取。<code>slice(-2)</code> 代表拷貝陣列中的最後兩個元素。</li>
<li>負數索引超過陣列的長度，<code>slice()</code> 就會把所有能給我們都給出來。</li>
</ul>
</li>
<li><code>end</code> ( 選擇性 )<ul>
<li>指切到哪個索引值結束 ( 起始值為 0 )，注意 slice 提取不包含索引 end，舉例來說， slice(1, 3) 則從索引 1 開始切至第三個元素前結束，也就是索引 2 結束。</li>
</ul>
</li>
<li><code>slice()</code><ul>
<li>如果括號內沒參數，就會回傳所有值。</li>
</ul>
</li>
<li><code>slice</code> 括號內如果只有一個參數，則會從會回傳那個索引值 ( 包含 ) 至最後一個元素。</li>
</ul>
<h3 id="範例-1"><a href="#範例-1" class="headerlink" title="範例"></a>範例</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> alphabet =[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;g&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(alphabet.<span class="title function_">slice</span>(<span class="number">3</span>,<span class="number">6</span>));  <span class="comment">//[&#x27;d&#x27;,&#x27;e&#x27;,&#x27;f&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(alphabet.<span class="title function_">slice</span>(<span class="number">1</span>));    <span class="comment">// [&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;,&#x27;e&#x27;,&#x27;f&#x27;,&#x27;g&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(alphabet.<span class="title function_">slice</span>(-<span class="number">4</span>));  <span class="comment">// [&#x27;d&#x27;, &#x27;e&#x27;, &#x27;f&#x27;, &#x27;g&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(alphabet.<span class="title function_">slice</span>(-<span class="number">10</span>)); <span class="comment">// [&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;,&#x27;e&#x27;,&#x27;f&#x27;,&#x27;g&#x27;];</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(alphabet.<span class="title function_">slice</span>(<span class="number">4</span>, alphabet.<span class="property">length</span>)); <span class="comment">//[&#x27;e&#x27;,&#x27;f&#x27;,&#x27;g&#x27;]</span></span><br></pre></td></tr></table></figure>

<h2 id="❒-參考資訊"><a href="#❒-參考資訊" class="headerlink" title="❒ 參考資訊"></a>❒ 參考資訊</h2><ul>
<li><a href="https://medium.com/@bebebobohaha/slice-splice-split-%E5%82%BB%E5%82%BB%E5%88%86%E4%B8%8D%E6%B8%85-46d9c8992729">[JavaScript] slice()、splice()、split() 傻傻分不清</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10288273">[JS學習筆記] 搞死人的split( ) slice( ) splice( ) | 我在路易莎的日子</a></li>
<li><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/splice">Array.prototype.splice()</a></li>
<li><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/slice">Array.prototype.slice()</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>split</tag>
        <tag>splice</tag>
        <tag>slice</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue Cli 中環境變數觀念與操作</title>
    <url>/vue/20230327/2093301171/</url>
    <content><![CDATA[<h2 id="Vue-Cli-中環境變數基礎觀念"><a href="#Vue-Cli-中環境變數基礎觀念" class="headerlink" title="Vue Cli 中環境變數基礎觀念"></a>Vue Cli 中環境變數基礎觀念</h2><p><a href="https://cli.vuejs.org/zh/guide/mode-and-env.html#%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F">Vue Cli 環境變數文件</a></p>
<ul>
<li><p>團隊中可能會有好幾個人一同開發一個專案，儲存各自負責開發的項目於各自電腦中，前端開發者們會對同一個後端主機進行開發測試，開發到一個階段會上傳到正式主機上，這時連線位置就會需要替換掉，所以專案中連線位置會另外儲存在環境變數中。</p>
<p>  <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2FVue%20Cli%E4%B8%AD%E7%92%B0%E5%A2%83%E8%AE%8A%E6%95%B8%E8%A7%80%E5%BF%B5%E8%88%87%E6%93%8D%E4%BD%9C_01.png?alt=media&token=673aaeb3-0be5-488e-a865-6e6d72aa7658" alt="// 示意圖(出處:六角學院)"></p>
</li>
<li><p>環境變數分為 :</p>
<ul>
<li>開發者環境 development</li>
<li>正式環境 production</li>
</ul>
</li>
<li><p>env.local : 有些開發者懶得重複輸入帳秘等機密資訊，想把機密資訊儲存在環境變數中，這些機密資訊環境變數會存在 local 的環境變數，而這些資訊並不會傳給其他開發者只會自己使用。</p>
</li>
<li><p><a href="https://cli.vuejs.org/zh/guide/mode-and-env.html#%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F">Vue Cli 環境變數文件</a> 中表示可以在你的項目根目錄中放置下列文件來指定環境變數 :</p>
<ul>
<li><p><code>.env.[mode]</code>  : 代表你是要選擇「 開發者環境 development 」或「 正式環境 production 」哪種開發環境。<code>.env.[mode]</code> 只會在特定模式下才會被載入。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.<span class="built_in">env</span>                <span class="comment"># 在所有環境中被載入</span></span><br><span class="line">.env.local          <span class="comment"># 在所有環境中被載入，但會被 git 忽略，只存在本地端</span></span><br><span class="line">.<span class="built_in">env</span>.[mode]         <span class="comment"># 只在指定的模式中被載入</span></span><br><span class="line">.<span class="built_in">env</span>.[mode].<span class="built_in">local</span>   <span class="comment"># 只在指定的模式中被載入，但會被 git 忽略，只存在本地端</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="在專案中加入環境變數操作"><a href="#在專案中加入環境變數操作" class="headerlink" title="在專案中加入環境變數操作"></a>在專案中加入環境變數操作</h2><p>環境變數放置的位置於專案下，目前課程中使用 .env 環境變數。相關資訊可參考 : <a href="https://cli.vuejs.org/zh/guide/mode-and-env.html#%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F">Vue Cli 環境變數文件</a>。</p>
<p>‼️ 注意 : 調整到環境變數 ( .env )，終端機一定要重新啟用， <code>ctrl+c</code> → <code>npm run serve</code>。</p>
<h3 id="步驟-1-選擇要使用的環境變數"><a href="#步驟-1-選擇要使用的環境變數" class="headerlink" title="步驟 1 選擇要使用的環境變數"></a>步驟 1 選擇要使用的環境變數</h3><p>路徑 : 專案下</p>
<ol>
<li>此環境變數在所有環境都可被載入<ul>
<li>新增 <code>.env</code> 檔案</li>
</ul>
</li>
<li>此環境變數只在開發中環境被載入<ul>
<li>新增 <code>.env.development</code> 檔案</li>
</ul>
</li>
<li>此環境變數只在正式環境被載入使用<ul>
<li>新增 <code>.env.production</code> 檔案</li>
</ul>
</li>
<li>此還記變數只存在自己電腦中使用<ul>
<li>新增 <code>.env.development.local</code> 檔案</li>
</ul>
</li>
</ol>
<h3 id="步驟-2-於專案中使用環境變數"><a href="#步驟-2-於專案中使用環境變數" class="headerlink" title="步驟 2. 於專案中使用環境變數"></a>步驟 2. 於專案中使用環境變數</h3><ol>
<li><p>於專案中新增 .env 環境變數。</p>
</li>
<li><p>在 Vue 專案中要使用環境變數，.env 檔案內程式碼前方一定要加入 <code>VUE_APP</code> 的字樣，後方加入自訂義名稱，請以大寫形式 → <code>VUE_APP_大寫自訂義名=自訂義名</code>。</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 檔案位置:專案/.env</span><br><span class="line">VUE_APP_NOT_SECRET_CODE=some_value</span><br><span class="line"></span><br><span class="line">// 調整後</span><br><span class="line">VUE_APP_NAME=我在開發中</span><br></pre></td></tr></table></figure>
</li>
<li><p>把自訂義變數加到專案中，開啟 src 資料夾 &#x2F; App.vue</p>
<ul>
<li>data 中 <code>name: process.env</code> 為固定。</li>
<li>‼️ 注意 : 調整到環境變數，終端機一定要重新啟用， <code>ctrl+c</code> → <code>npm run serve</code>。</li>
<li>讓環境變數設定的名稱顯示在畫面上 ( 方便查看用 )，於 <code>&lt;template&gt;</code> 中加入 <code>&#123;&#123; name &#125;&#125;</code> ，可看到畫面出現 我在開發中 文字，表成功。</li>
</ul>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> |</span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span> /&gt;</span></span><br><span class="line">  &#123;&#123; name &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">name</span>: process.<span class="property">env</span>.<span class="property">VUE_APP_NAME</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2FVue%20Cli%E4%B8%AD%E7%92%B0%E5%A2%83%E8%AE%8A%E6%95%B8%E8%A7%80%E5%BF%B5%E8%88%87%E6%93%8D%E4%BD%9C_02.png?alt=media&token=86dfe261-f898-4994-b860-b0a47e2c8b7c" alt="// 示意圖"></p>
</li>
</ol>
<h2 id="資訊來源"><a href="#資訊來源" class="headerlink" title="資訊來源"></a>資訊來源</h2><ul>
<li>六角學院 : Vue 3 實戰影音課程</li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Vue3</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode 樣板字面值使用 emmet</title>
    <url>/tools/20230327/2346096926/</url>
    <content><![CDATA[<p>NVM 為「 Node 版本管理控制 」</p>
<h2 id="macOS-安裝-NVM"><a href="#macOS-安裝-NVM" class="headerlink" title="macOS 安裝 NVM"></a>macOS 安裝 NVM</h2><h3 id="開啟隱藏的資料夾"><a href="#開啟隱藏的資料夾" class="headerlink" title="開啟隱藏的資料夾"></a>開啟隱藏的資料夾</h3><ul>
<li>開啟 Finder 切換到當前使用者的目錄下，使用 <code>Command + Shift+ .</code> 開啟隱藏的資料夾。</li>
</ul>
<h3 id="查詢是否有-zshrc-檔案"><a href="#查詢是否有-zshrc-檔案" class="headerlink" title="查詢是否有 .zshrc 檔案"></a>查詢是否有 <code>.zshrc</code> 檔案</h3><ul>
<li>開啟終端機輸入指令 <code>ls -a</code> 查詢是否有 <code>.zshrc</code> 檔案。</li>
<li>沒有的話，於終端機使用指令 <code>touch ~/.zshrc</code> 新增 <code>.zshrc</code> 檔案於使用者目錄下。( 請先確認終端機位置是否在使用者目錄下 )</li>
</ul>
<h3 id="安裝-nvm-指令"><a href="#安裝-nvm-指令" class="headerlink" title="安裝 nvm 指令"></a>安裝 nvm 指令</h3><ol>
<li><p>開啟終端機輸入下方指令</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash</span><br></pre></td></tr></table></figure>

<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2FmacOS%E5%AE%89%E8%A3%9DNVM%E8%88%87Node_01.png?alt=media&token=a98e3619-2c14-4c6a-bb82-c075b62697b1" alt="// 會需要跑一段時間 ▲"></p>
</li>
<li><p>安裝完後，使用者目錄下的 「 .nvm 資料夾與 <code>.zshrc</code> 檔案」目前是空的。這時執行指令 <code>nvm</code> 會報錯 <code>zsh: command not found:nvm</code>。請繼續跑完下方流程。</p>
</li>
</ol>
<p>注意：NVM 官方建議使用 cURL 安裝或更新 nvm，不建議用 Homebrew 來安裝，避免出現問題。</p>
<h3 id="再次安裝-nvm-指令"><a href="#再次安裝-nvm-指令" class="headerlink" title="再次安裝 nvm 指令"></a>再次安裝 nvm 指令</h3><ol>
<li><p>再次安裝 nvm 指令與 <code>source ~/.zshrc</code> 指令 ( 請一個輸入完再輸入另一個 )</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>
</li>
<li><p>輸入完上方指令後，使用者目錄內的「 .nvm 資料夾與 <code>.zshrc</code> 檔案」就有生成資料囉 !</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">&quot;<span class="variable">$HOME</span>/.nvm&quot;</span></span><br><span class="line">[ -s <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span> ] &amp;&amp; \. <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span>  <span class="comment"># This loads nvm</span></span><br><span class="line">[ -s <span class="string">&quot;<span class="variable">$NVM_DIR</span>/bash_completion&quot;</span> ] &amp;&amp; \. <span class="string">&quot;<span class="variable">$NVM_DIR</span>/bash_completion&quot;</span>  <span class="comment"># This loads nvm bash_completion</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>可使用下方指令查看 <code>.zshrc</code> 檔案是否有步驟二的內容</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">open ~/.zshrc</span><br></pre></td></tr></table></figure>
</li>
<li><p>重啟終端機，依下面方式查看就可看到 nvm 安裝成功囉 ！</p>
</li>
</ol>
<h3 id="查看-nvm-是否安裝成功-？"><a href="#查看-nvm-是否安裝成功-？" class="headerlink" title="查看 nvm 是否安裝成功 ？"></a>查看 nvm 是否安裝成功 ？</h3><ol>
<li><p>終端機執行 <code>command -v nvm</code>，顯示 nvm 表示安裝成功。</p>
</li>
<li><p>終端機執行 <code>nvm</code>，會跳出下方圖示。</p>
<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2FmacOS%E5%AE%89%E8%A3%9DNVM%E8%88%87Node_02.png?alt=media&token=9e8a86d3-799f-41e5-a208-85a827861533" alt="截圖"></p>
</li>
</ol>
<h2 id="常用的-nvm-指令"><a href="#常用的-nvm-指令" class="headerlink" title="常用的 nvm 指令"></a>常用的 nvm 指令</h2><ul>
<li><code>nvm install [node 版本號]</code> : 安裝特定版本的 nvm ( 例，版本號為 16 : <code>nvm install 16</code> )</li>
<li><code>nvm alias default [node 版本號]</code> : 將特定版本號做為預設值。</li>
<li><code>nvm list</code> : 列出已安裝清單</li>
<li><code>nvm use [node 版本號]</code> : 切換到特定 Node 版本(只限有安裝的版本)</li>
</ul>
<h2 id="使用-nvm-安裝-Node-js"><a href="#使用-nvm-安裝-Node-js" class="headerlink" title="使用 nvm 安裝 Node.js"></a>使用 nvm 安裝 Node.js</h2><ul>
<li>終端機執行指令 <code>nvm install 16</code></li>
<li>使用 <code>nvm list</code> 可看到目前已安裝的版本號與預設版本號。</li>
</ul>
<p><img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2FmacOS%E5%AE%89%E8%A3%9DNVM%E8%88%87Node_03.png?alt=media&token=8757ff02-a3a0-495e-9675-0e643b05d747" alt="截圖"></p>
<h2 id="參考文章"><a href="#參考文章" class="headerlink" title="參考文章"></a>參考文章</h2><p><a href="https://benscheer.medium.com/how-to-install-nvm-and-node-on-macos-m1-silicon-in-2022-172fba82d92f">How to Install NVM and Node on macOS M1 Silicon in 2022</a></p>
<ul>
<li><a href="https://www.casper.tw/development/2022/01/10/install-nvm/">安裝 nvm 環境，Node.js 開發者必學（ Windows、Mac 均適用 ）</a></li>
<li><a href="https://israynotarray.com/nodejs/20200124/3404456418/">Mac OS X 安裝 nvm</a></li>
</ul>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>VSCode</tag>
        <tag>VSCode設定檔settings.json</tag>
      </tags>
  </entry>
  <entry>
    <title>macOS 安裝 NVM 與 Node.js</title>
    <url>/tools/20230327/3371717253/</url>
    <content><![CDATA[<h2 id="macOS-安裝-NVM"><a href="#macOS-安裝-NVM" class="headerlink" title="macOS 安裝 NVM"></a>macOS 安裝 NVM</h2><h3 id="開啟隱藏的資料夾"><a href="#開啟隱藏的資料夾" class="headerlink" title="開啟隱藏的資料夾"></a>開啟隱藏的資料夾</h3><ul>
<li>開啟 Finder 切換到當前使用者的目錄下，使用 <code>Command + Shift+ .</code> 開啟隱藏的資料夾。</li>
</ul>
<h3 id="查詢是否有-zshrc-檔案"><a href="#查詢是否有-zshrc-檔案" class="headerlink" title="查詢是否有 .zshrc 檔案"></a>查詢是否有 <code>.zshrc</code> 檔案</h3><ul>
<li>開啟終端機輸入指令 <code>ls -a</code> 查詢是否有 <code>.zshrc</code> 檔案。</li>
<li>沒有的話，於終端機使用指令 <code>touch ~/.zshrc</code> 新增 <code>.zshrc</code> 檔案於使用者目錄下。( 請先確認終端機位置是否在使用者目錄下 )</li>
</ul>
<h3 id="安裝-nvm-指令"><a href="#安裝-nvm-指令" class="headerlink" title="安裝 nvm 指令"></a>安裝 nvm 指令</h3><ol>
<li><p>開啟終端機輸入下方指令</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash</span><br></pre></td></tr></table></figure>

<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2FmacOS%E5%AE%89%E8%A3%9DNVM%E8%88%87Node_01.png?alt=media&token=a98e3619-2c14-4c6a-bb82-c075b62697b1" alt="// 會需要跑一段時間 ▲"></p>
</li>
<li><p>安裝完後，使用者目錄下的 「 .nvm 資料夾與 <code>.zshrc</code> 檔案」目前是空的。這時執行指令 <code>nvm</code> 會報錯 <code>zsh: command not found:nvm</code>。請繼續跑完下方流程。</p>
</li>
</ol>
<p>注意：NVM 官方建議使用 cURL 安裝或更新 nvm，不建議用 Homebrew 來安裝，避免出現問題。</p>
<h3 id="再次安裝-nvm-指令"><a href="#再次安裝-nvm-指令" class="headerlink" title="再次安裝 nvm 指令"></a>再次安裝 nvm 指令</h3><ol>
<li><p>再次安裝 nvm 指令與 <code>source ~/.zshrc</code> 指令 ( 請一個輸入完再輸入另一個 )</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>
</li>
<li><p>輸入完上方指令後，使用者目錄內的「 .nvm 資料夾與 <code>.zshrc</code> 檔案」就有生成資料囉 !</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">&quot;<span class="variable">$HOME</span>/.nvm&quot;</span></span><br><span class="line">[ -s <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span> ] &amp;&amp; \. <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span>  <span class="comment"># This loads nvm</span></span><br><span class="line">[ -s <span class="string">&quot;<span class="variable">$NVM_DIR</span>/bash_completion&quot;</span> ] &amp;&amp; \. <span class="string">&quot;<span class="variable">$NVM_DIR</span>/bash_completion&quot;</span>  <span class="comment"># This loads nvm bash_completion</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>可使用下方指令查看 <code>.zshrc</code> 檔案是否有步驟二的內容</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">open ~/.zshrc</span><br></pre></td></tr></table></figure>
</li>
<li><p>重啟終端機，依下面方式查看就可看到 nvm 安裝成功囉 ！</p>
</li>
</ol>
<h3 id="查看-nvm-是否安裝成功-？"><a href="#查看-nvm-是否安裝成功-？" class="headerlink" title="查看 nvm 是否安裝成功 ？"></a>查看 nvm 是否安裝成功 ？</h3><ol>
<li><p>終端機執行 <code>command -v nvm</code>，顯示 nvm 表示安裝成功。</p>
</li>
<li><p>終端機執行 <code>nvm</code>，會跳出下方圖示。</p>
<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2FmacOS%E5%AE%89%E8%A3%9DNVM%E8%88%87Node_02.png?alt=media&token=9e8a86d3-799f-41e5-a208-85a827861533" alt="截圖"></p>
</li>
</ol>
<h2 id="常用的-nvm-指令"><a href="#常用的-nvm-指令" class="headerlink" title="常用的 nvm 指令"></a>常用的 nvm 指令</h2><ul>
<li><code>nvm install [node 版本號]</code> : 安裝特定版本的 nvm ( 例，版本號為 16 : <code>nvm install 16</code> )</li>
<li><code>nvm alias default [node 版本號]</code> : 將特定版本號做為預設值。</li>
<li><code>nvm list</code> : 列出已安裝清單</li>
<li><code>nvm use [node 版本號]</code> : 切換到特定 Node 版本(只限有安裝的版本)</li>
</ul>
<h2 id="使用-nvm-安裝-Node-js"><a href="#使用-nvm-安裝-Node-js" class="headerlink" title="使用 nvm 安裝 Node.js"></a>使用 nvm 安裝 Node.js</h2><ul>
<li>終端機執行指令 <code>nvm install 16</code></li>
<li>使用 <code>nvm list</code> 可看到目前已安裝的版本號與預設版本號。</li>
</ul>
<p><img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2FmacOS%E5%AE%89%E8%A3%9DNVM%E8%88%87Node_03.png?alt=media&token=8757ff02-a3a0-495e-9675-0e643b05d747" alt="截圖"></p>
<h2 id="參考文章"><a href="#參考文章" class="headerlink" title="參考文章"></a>參考文章</h2><ul>
<li><p><a href="https://benscheer.medium.com/how-to-install-nvm-and-node-on-macos-m1-silicon-in-2022-172fba82d92f">How to Install NVM and Node on macOS M1 Silicon in 2022</a></p>
</li>
<li><p><a href="https://www.casper.tw/development/2022/01/10/install-nvm/">安裝 nvm 環境，Node.js 開發者必學（ Windows、Mac 均適用 ）</a></p>
</li>
<li><p><a href="https://israynotarray.com/nodejs/20200124/3404456418/">Mac OS X 安裝 nvm</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>mvm</tag>
        <tag>npm</tag>
        <tag>node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Postman 進行 API 測試</title>
    <url>/tools/20230327/1259632675/</url>
    <content><![CDATA[<h2 id="挑戰目標"><a href="#挑戰目標" class="headerlink" title="挑戰目標"></a>挑戰目標</h2><p>使用 Postman 建立 request 並搭配 Collections Test 測試五隻 API，HTTP Status 必須為 200。</p>
<ul>
<li>使用 Postman 建立 Env Url 變數</li>
<li>建立 Collections Test 測試五隻 API，HTTP Status 必須為 200</li>
</ul>
<h2 id="API-文件"><a href="#API-文件" class="headerlink" title="API 文件"></a>API 文件</h2><p>怕洩漏到課程資訊，擷取六角 API 文件中關鍵資料，以文字方式呈現</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># [Get] 取得產品列表</span><br><span class="line">## API Url → https://hex-escape-room.herokuapp.com</span><br><span class="line">## HTTP Method → GET</span><br><span class="line">## API Path → /api/shopping/v1/products?category=xxx</span><br><span class="line">## API Description → 若沒有帶入 Query 預設會回傳全部產品列表，若 category 不存在則也會回傳全部產品。</span><br><span class="line"></span><br><span class="line"># [Get] 取得單一產品詳細資訊</span><br><span class="line">## API Url → https://hex-escape-room.herokuapp.com</span><br><span class="line">## HTTP Method → GET</span><br><span class="line">## API Path → /api/shopping/v1/product/:id</span><br><span class="line">## API Description → 取得單一產品詳細資訊，包含描述欄位。</span><br><span class="line">## Request Param → id (產品 ID，必填)</span><br><span class="line"></span><br><span class="line"># [Post] 新增產品</span><br><span class="line">## API Url → https://hex-escape-room.herokuapp.com</span><br><span class="line">## HTTP Method → POST</span><br><span class="line">## API Path → /api/shopping/v1/product</span><br><span class="line">## API Description → 新增產品，請務必注意必填欄位與型別。</span><br><span class="line"></span><br><span class="line"># [Put] 編輯產品</span><br><span class="line">## API Url → https://hex-escape-room.herokuapp.com</span><br><span class="line">## HTTP Method → PUT</span><br><span class="line">## API Path → /api/shopping/v1/product/:id</span><br><span class="line">## API Description → 編輯產品，請務必注意必填欄位與型別。</span><br><span class="line">## Request Param → ID (產品 ID)</span><br><span class="line"></span><br><span class="line"># [Patch] 修改產品狀態</span><br><span class="line">## API Url → https://hex-escape-room.herokuapp.com</span><br><span class="line">## HTTP Method → PATCH</span><br><span class="line">## API Path → /api/shopping/v1/product/:id</span><br><span class="line">## API Description → 修改產品狀態</span><br><span class="line">## Request Param → ID (產品 ID)</span><br></pre></td></tr></table></figure>

<h2 id="操作步驟"><a href="#操作步驟" class="headerlink" title="操作步驟"></a>操作步驟</h2><h3 id="Step1-Postman-安裝"><a href="#Step1-Postman-安裝" class="headerlink" title="Step1. Postman 安裝"></a>Step1. Postman 安裝</h3><p>文章 : <a href="https://israynotarray.com/other/20211207/427026/">跟著我一起快速入門 Postman 吧！</a></p>
<h3 id="Step2-建立環境變數-Environments"><a href="#Step2-建立環境變數-Environments" class="headerlink" title="Step2. 建立環境變數 Environments"></a>Step2. 建立環境變數 <strong><strong>Environments</strong></strong></h3><p>要測試的 5 支 API ，開頭網址皆為 <code>https://hex-escape-room.herokuapp.com</code> 的 API Url，可以先建立一個環境變數。</p>
<ol>
<li><p>點選左側欄 Environments ，進入後點擊 + 新增一個 Environments。<br> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E4%BD%BF%E7%94%A8Potman%E9%80%B2%E8%A1%8CAPI%E6%B8%AC%E8%A9%A6_01.png?alt=media&token=b4d1dfd0-5fd0-44d4-a901-2675dc94c802" alt="// 新增 Environments"></p>
</li>
<li><p>建立好環境變數 ( Env ) 後，進行命名 「商品資料 Env」。<br> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E4%BD%BF%E7%94%A8Potman%E9%80%B2%E8%A1%8CAPI%E6%B8%AC%E8%A9%A6_02_%E7%92%B0%E5%A2%83%E8%AE%8A%E6%95%B8%E5%91%BD%E5%90%8D.png?alt=media&token=5b3efda5-0882-4f3d-9e3a-6d36ebe17e26" alt="// 環境變數命名"></p>
</li>
<li><p>將環境變數 ( Env ) 改成剛編輯的名字 「商品資料 Env」。<br> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E4%BD%BF%E7%94%A8Potman%E9%80%B2%E8%A1%8CAPI%E6%B8%AC%E8%A9%A6_03_%E6%8A%8AEnv%E6%94%B9%E7%82%BA%E6%96%B0%E5%91%BD%E5%90%8D%E7%9A%84%E5%90%8D%E5%AD%97.png?alt=media&token=d12dcd03-d47c-43b7-a118-0a5938561915" alt="// 把 Env 改為新命名的名字"></p>
</li>
<li><p>進行環境變數 ( Env ) 相關設定</p>
<ul>
<li>VARIABLE 命名為 <code>API_URL</code>。</li>
<li>INITIAL VALUE 填入要測試的 5支 API 相同開頭的網址<code>https://hex-escape-room.herokuapp.com</code>。<br> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E4%BD%BF%E7%94%A8Potman%E9%80%B2%E8%A1%8CAPI%E6%B8%AC%E8%A9%A6_04_%E9%80%B2%E8%A1%8C%E7%92%B0%E5%A2%83%E8%AE%8A%E6%95%B8_(_Env_)_%E7%9B%B8%E9%97%9C%E8%A8%AD%E5%AE%9A.png?alt=media&token=d117fdde-3e74-4b71-ad2b-a890b4429977" alt="// 進行環境變數 (Env) 相關設定"></li>
</ul>
</li>
<li><p>最後記得按下 Save。</p>
</li>
</ol>
<h3 id="Step3-建立收藏-Collections"><a href="#Step3-建立收藏-Collections" class="headerlink" title="Step3. 建立收藏 Collections"></a>Step3. 建立收藏 Collections</h3><ol>
<li>進左側欄 Collections → 點擊 + create new collections。</li>
<li>把 Collections 命名為 「商品資訊 API Test」。</li>
<li>於 「商品資訊 API Test」新增請求 ( add request )。<br> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E4%BD%BF%E7%94%A8Potman%E9%80%B2%E8%A1%8CAPI%E6%B8%AC%E8%A9%A6_05_Collections%E6%96%B0%E5%A2%9E%E8%AB%8B%E6%B1%82.png?alt=media&token=7fb22180-cf0a-4a17-87ee-09ff4e471f47" alt="// Collections新增請求"></li>
<li>於 「商品資訊 API Test」新增請求 ( add request ) 後，依據 <a href="https://www.notion.so/Post-man-API-ed3793ced5ac4cec98852e29c71b6372">公司給了五支 API</a> : <code>GET</code>、<code>POST</code>、<code>PUT</code>、<code>PATCH</code> 進行新增。<ol>
<li><p><code>GET</code> 取得商品列表 ( 上方 API 文件 )</p>
<ol>
<li>把 request 名稱改為 「取得商品列表」。</li>
<li>已設好環境變數，所以 Get 的網址調整為 <code>&#123;&#123;環境變數中的 VARIABLE&#125;&#125;取得商品列表的API Path</code>，按下 Sent 按鈕，如果 API 沒問題下方就會顯示 200 ok。<br> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E4%BD%BF%E7%94%A8Potman%E9%80%B2%E8%A1%8CAPI%E6%B8%AC%E8%A9%A6_06.png?alt=media&token=86746a29-c219-4e5e-a199-46e58028be08" alt="// 使用 Potman 進行 API 測試"></li>
<li>記得按下 Save 可收藏請求。</li>
</ol>
</li>
<li><p><code>GET</code> 取得單一產品詳細資訊 ( 上方 API 文件 )</p>
<ol>
<li>add request → 把 request 名稱改為 「取得單一產品詳細資訊」</li>
<li>文件中的 Api Path 後方有 <code>:id</code>，把文件中 id 複製貼於 「取得單一產品詳細資訊」請求的 Path Variables 中。<br> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E4%BD%BF%E7%94%A8Potman%E9%80%B2%E8%A1%8CAPI%E6%B8%AC%E8%A9%A6_07.png?alt=media&token=657a03f3-6d26-40bd-bcd4-f393b5f65613" alt="// 把 API 文件中的 id 填入"><br> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E4%BD%BF%E7%94%A8Potman%E9%80%B2%E8%A1%8CAPI%E6%B8%AC%E8%A9%A6_08.png?alt=media&token=55ac6a55-3e2e-41bc-ae14-9d0c6daa8976" alt="// 把 API 文件中的 id 填入"></li>
<li>按下 Send 按鈕測試 HTTP Status 是否為 200，沒問題的話記得按下 Save。</li>
</ol>
</li>
<li><p><code>POST</code> 新增商品 ( 上方 API 文件 )</p>
<ol>
<li><p>add request → 把 request 名稱改為 「新增商品」→ methods 選 <code>POST</code> → 網址如步驟 2。</p>
</li>
<li><p>文件中表示 「新增產品，請務必注意必填欄位與型別。」，把文件中 Example JSON 程式碼貼於 body → raw → Text 選取 JSON。</p>
 <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 文件中 Example JSON</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gNd4cp2u5NxXTTaT&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;KoboGame&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;category&quot;</span><span class="punctuation">:</span> <span class="string">&quot;game&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1000&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;超好玩遊戲&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E4%BD%BF%E7%94%A8Potman%E9%80%B2%E8%A1%8CAPI%E6%B8%AC%E8%A9%A6_09.png?alt=media&token=5b31de63-c0b1-4a15-8144-228f9253ca21" alt="// 把文件中 Example JSON 程式碼貼於 body → raw → Text 選取 JSON"></p>
</li>
<li><p>出現 HTTP Status 400，老師有埋陷阱 XD，按照指使後，把屬性 price 的屬性值型別改為數字即可。<br> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E4%BD%BF%E7%94%A8Potman%E9%80%B2%E8%A1%8CAPI%E6%B8%AC%E8%A9%A6_10.png?alt=media&token=8c6e5f72-f061-4f27-973e-4dbe4e023270" alt="// 陷阱，把 price 屬性改為數字"></p>
 <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 調整後</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gNd4cp2u5NxXTTaT&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;KoboGame&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;category&quot;</span><span class="punctuation">:</span> <span class="string">&quot;game&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="number">1000</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;超好玩遊戲&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p><code>PUT</code> 編輯商品 ( 上方 API 文件 )</p>
<ol>
<li><p>API Path 出現 <code>:id</code>，依文件中 Example JSON 得知商品資訊，到 「取得商品列表」request 找此商品的 id，貼於 Params → Path Variables 的 id 中。<br> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E4%BD%BF%E7%94%A8Potman%E9%80%B2%E8%A1%8CAPI%E6%B8%AC%E8%A9%A6_11.png?alt=media&token=f8887b48-26c1-4ac3-96d3-c128c60ef382" alt="// 文件中Example JSON程式碼貼入Body→raw"></p>
<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E4%BD%BF%E7%94%A8Potman%E9%80%B2%E8%A1%8CAPI%E6%B8%AC%E8%A9%A6_12.png?alt=media&token=be040645-c545-4fad-b1e9-2a0a864e7fc4" alt="// 依文件中Example JSON得知商品資訊，到「取得商品列表」request找此商品的id"></p>
</li>
</ol>
</li>
<li><p><code>Patch</code> 修改商品狀態 ( 上方 API 文件 )</p>
<ol>
<li>依照步驟 3.d 。Params 的 id 可以到 「取的商品列表」request 隨便找一個商品 id 填入。<br> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E4%BD%BF%E7%94%A8Potman%E9%80%B2%E8%A1%8CAPI%E6%B8%AC%E8%A9%A6_13_%E6%96%B0%E5%A2%9E_request.png?alt=media&token=bcb6cd74-9c63-48ea-bb12-83d09d8f4569" alt="// 於 collections 新增請求(add request)"></li>
</ol>
</li>
</ol>
</li>
</ol>
<h3 id="Step4-自動-API-測試"><a href="#Step4-自動-API-測試" class="headerlink" title="Step4. 自動 API 測試"></a>Step4. 自動 API 測試</h3><p>可參考文章中的 <a href="https://israynotarray.com/other/20211207/427026/#%E8%87%AA%E5%8B%95-API-%E6%B8%AC%E8%A9%A6-Auto-Collection-Test">自動 API 測試 (Auto Collection Test)</a></p>
<ol>
<li><p>進左側欄 Collections → 點擊步驟 #2 新增的 「商品資訊 API Test」 收藏。<br> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E4%BD%BF%E7%94%A8Potman%E9%80%B2%E8%A1%8CAPI%E6%B8%AC%E8%A9%A6_14.png?alt=media&token=dce25a87-91bd-420d-a869-9feca14e3578" alt="// 收藏 Collections"></p>
</li>
<li><p>進入後點擊下方的 「Test」，選取 「Status code: Code is 200」會生成一段程式碼 → 按 Save 儲存。</p>
</li>
<li><p>按下 Run<br> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E4%BD%BF%E7%94%A8Potman%E9%80%B2%E8%A1%8CAPI%E6%B8%AC%E8%A9%A6_15.png?alt=media&token=22e3088e-c028-43b1-81b6-53d6fb1b7688" alt="// 按下 Run"></p>
</li>
<li><p>點擊 「Run 商品資訊 API Test」→ 就可以直接把所有要測試的 API 一次測試完囉 !<br> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E4%BD%BF%E7%94%A8Potman%E9%80%B2%E8%A1%8CAPI%E6%B8%AC%E8%A9%A6_16.png?alt=media&token=5a263257-e40f-4c52-b79a-b9c7908ed897" alt="// 點擊Run 商品資訊 API Test 按鈕"></p>
<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E4%BD%BF%E7%94%A8Potman%E9%80%B2%E8%A1%8CAPI%E6%B8%AC%E8%A9%A6_17.png?alt=media&token=742de7d0-577c-4e3d-96af-83afb3cd86ae" alt="// 所有API一次測試完成"></p>
</li>
</ol>
<h2 id="模擬測試單支-API"><a href="#模擬測試單支-API" class="headerlink" title="模擬測試單支 API"></a>模擬測試單支 API</h2><p>這邊依上方 API 文件中的 “ [Get] 取得單一產品詳細資訊 “ 為例 ，測試此 API 使否可使用。</p>
<ol>
<li><p>新增請求</p>
<ol>
<li><p>快捷鍵</p>
<ul>
<li>Mac : <code>Command</code> + <code>N</code></li>
<li>Windows : <code>Ctrl</code> + <code>N</code></li>
</ul>
</li>
<li><p>面板上的 <code>New</code> 或  <code>+</code>。<br> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E4%BD%BF%E7%94%A8Potman%E9%80%B2%E8%A1%8CAPI%E6%B8%AC%E8%A9%A6_18_%E6%96%B0%E5%A2%9E%E8%AB%8B%E6%B1%82%E6%96%B9%E5%BC%8F.png?alt=media&token=ba736b5c-6b44-4b00-ae81-f0494f34677c" alt="// 新增請求方式"></p>
<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E4%BD%BF%E7%94%A8Potman%E9%80%B2%E8%A1%8CAPI%E6%B8%AC%E8%A9%A6_19_%E6%96%B0%E5%A2%9E%E8%AB%8B%E6%B1%82%E6%96%B9%E5%BC%8FHTTPRequest.png?alt=media&token=a9354d72-abe8-4d21-ad36-8605e94e4136" alt="// 新增請求方式HTTPRequest"></p>
</li>
</ol>
</li>
<li><p>選取請求方式 GET<br> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E4%BD%BF%E7%94%A8Potman%E9%80%B2%E8%A1%8CAPI%E6%B8%AC%E8%A9%A6_20_%E5%96%AE%E6%94%AFAPI%E6%B8%AC%E8%A9%A6_01.png?alt=media&token=4e8164f2-d8e6-440e-8db6-6b79604ebf0f" alt="// 單支API測試_01"></p>
</li>
<li><p>複製 API 文件中的 API Url 與 API Path，貼入後方欄位</p>
<ol>
<li><p>API Path 中 <code>:id</code> 部份已事先查詢，可參考上方操作步驟 Step3. 4( <code>Y4agVBkW3c2Y5q9U</code> )。<br> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E4%BD%BF%E7%94%A8Potman%E9%80%B2%E8%A1%8CAPI%E6%B8%AC%E8%A9%A6_21_%E5%96%AE%E6%94%AFAPI%E6%B8%AC%E8%A9%A6_02.png?alt=media&token=cbe91f0c-2cfb-4b23-9462-e40d366a368c" alt="// 單支API測試_02"><br> <small>&#x2F;&#x2F; <a href="https://www.notion.so/Get-b214c92e0a504d9bbaf14f0b7d8efa15">[Get] 取得單一產品詳細資訊</a> 文件 ▲</small></p>
<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E4%BD%BF%E7%94%A8Potman%E9%80%B2%E8%A1%8CAPI%E6%B8%AC%E8%A9%A6_22_%E5%96%AE%E6%94%AFAPI%E6%B8%AC%E8%A9%A6_03.png?alt=media&token=af7aa666-4361-4a2d-bf4a-a3e1dd86aa11" alt="// 單支API測試_03"><br> <small>&#x2F;&#x2F; 複製 API 文件中的 API Url 與 API Path 貼入欄位內 ▲</small></p>
</li>
</ol>
</li>
<li><p>按下 Send 按鈕測試 HTTP Status 為 200，下方出現此筆 id 相關資訊，成功 !<br> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E4%BD%BF%E7%94%A8Potman%E9%80%B2%E8%A1%8CAPI%E6%B8%AC%E8%A9%A6_23_%E5%96%AE%E6%94%AFAPI%E6%B8%AC%E8%A9%A6_04.png?alt=media&token=0efa521c-2d1b-4c1d-8949-4b905182ac4e" alt="// 單支API測試_04"></p>
</li>
</ol>
<h2 id="參考資訊"><a href="#參考資訊" class="headerlink" title="參考資訊"></a>參考資訊</h2><ul>
<li><a href="https://www.hexschool.com/courses/escape.html">六角學院 - 前端密室逃脫</a></li>
<li><a href="https://israynotarray.com/other/20211207/427026/">跟著我一起快速入門 Postman 吧！</a></li>
</ul>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Postman</tag>
        <tag>API</tag>
      </tags>
  </entry>
  <entry>
    <title>tilt.js 套件 - 3D 互動效果</title>
    <url>/plugins/20230327/3538132004/</url>
    <content><![CDATA[<p><img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/gif%2Ftilt.js%E5%A5%97%E4%BB%B63D%20%E4%BA%92%E5%8B%95%E6%95%88%E6%9E%9C_01.gif?alt=media&token=671dbfac-d395-4789-b09d-5d54e271072e" alt=" // 2022 The F2E 官網互動效果"></p>
<h2 id="套件版本"><a href="#套件版本" class="headerlink" title="套件版本"></a>套件版本</h2><p>該套件有兩種版本：</p>
<ol>
<li>jQuery 版：<a href="http://gijsroge.github.io/tilt.js/">Tilt.js</a>。</li>
<li>JS 版：<a href="https://micku7zu.github.io/vanilla-tilt.js/">Vanilla-Tilt</a>。( 本筆記使用此版 )</li>
</ol>
<h2 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h2><p>可使用 ① npm 、② 下載文件中的 js 檔到專案內、③ <a href="https://cdnjs.com/libraries/vanilla-tilt">CDN 方式</a> ( 本筆記使用方式 )。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">https://cdnjs.cloudflare.com/ajax/libs/vanilla-tilt/1.7.2/vanilla-tilt.min.js</span><br></pre></td></tr></table></figure>

<h2 id="結構"><a href="#結構" class="headerlink" title="結構"></a>結構</h2><p>tilt.js 套件的套用方式 ① HTML ② JS 可擇一選擇。</p>
<p>① HTML 方式</p>
<p><a href="https://codepen.io/echocarriet/pen/PoaoMow">Codepen 範例</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;網址&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">data-tilt</span> </span></span><br><span class="line"><span class="tag"><span class="attr">data-tilt-max</span>=<span class="string">&quot;25&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">data-tilt-scale</span>=<span class="string">&quot;1.1&quot;</span> </span></span><br><span class="line"><span class="tag">&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>在要套用的元素先加上 <code>data-tilt</code>，再依序於 <code>data-tilt-</code> 後方加上想要的效果屬性與數值，如果要傾斜角度 25 度，則為 <code>data-tilt-max=&quot;25&quot;</code>。</li>
</ul>
<p>② JS 方式</p>
<p><a href="https://codepen.io/echocarriet/pen/JjZjgom">Codepen 範例</a></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用.querySelector() 方式來選取要操作的 DOM。</span></span><br><span class="line"><span class="title class_">VanillaTilt</span>.<span class="title function_">init</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;選擇器&#x27;</span>), &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>直接把效果寫在 <code>&#123;&#125;</code> 中。</li>
</ul>
<h2 id="屬性"><a href="#屬性" class="headerlink" title="屬性"></a>屬性</h2><ul>
<li><code>reverse</code>：反轉傾斜方向</li>
<li><code>max</code>：最大傾斜旋轉角度</li>
<li><code>startX</code>：X 軸上的起始傾斜度，以度為單位</li>
<li><code>startY</code>：Y 軸上的起始傾斜度，以度為單位</li>
<li><code>perspective</code>：變換透視，越低傾斜越極端。可參考<a href="https://micku7zu.github.io/vanilla-tilt.js/">文件</a>中的 「 Creating a parallax effect 」。</li>
<li><code>scale</code>：hover 放大多少 (  2 &#x3D; 200%, 1.5 &#x3D; 150%, etc.. )</li>
<li><code>speed</code>：hover 進入 &#x2F; 退出轉換的速度。( 傾斜轉換的速度 )</li>
<li><code>transition</code>：hover 進入 &#x2F; 退出的設置轉換。</li>
<li><code>axis</code>：要禁用哪個軸 ( X 或 Ｙ )</li>
<li><code>reset</code>：傾斜效果必須在退出時重置</li>
<li><code>easing</code>：hover 進入 &#x2F; 退出時的緩衝。</li>
<li><code>glare</code>：是否開啟眩光效果。</li>
<li><code>&quot;max-glare&quot;</code>：最大炫光不透明度</li>
<li><code>&quot;glare-prerender&quot;</code>：</li>
<li><code>&quot;mouse-event-element&quot;</code>：用滑鼠事件監聽 CSS 選擇器或 HTML 元素。</li>
<li><code>gyroscope</code>：啟用&#x2F;禁用設備方向檢測的布林值。</li>
<li><code>gyroscopeMinAngleX</code>：這是 X 軸上設備角度的下限，這意味著以該角度旋轉的設備會傾斜元素，就好像鼠標在元素的底部邊框上一樣。</li>
<li><code>gyroscopeMaxAngleX</code>：這是 X 軸上設備角度的上限，這意味著以該角度旋轉的設備會傾斜元素，就好像鼠標在元素的底部邊框上一樣。</li>
<li><code>gyroscopeMinAngleY</code>：這是 Y 軸上設備角度的下限，這意味著以該角度旋轉的設備會傾斜元素，就好像鼠標在元素的底部邊框上一樣。</li>
<li><code>gyroscopeMaxAngleY</code>：這是 Y 軸上設備角度的上限，這意味著以該角度旋轉的設備會傾斜元素，就好像鼠標在元素的底部邊框上一樣。</li>
</ul>
<h2 id="參考資訊"><a href="#參考資訊" class="headerlink" title="參考資訊"></a>參考資訊</h2><ul>
<li><a href="https://hackmd.io/ofJD4K7iSI65V19zxC7d0w">2022 TheF2E 攻略資源</a></li>
<li><a href="https://www.notion.so/tilt-js-3D-a8f08b6743b940cba680813d5db33ca4">Vanilla-Tilt</a> [官方文件](<a href="https://micku7zu.github.io/vanill">https://micku7zu.github.io/vanill</a></li>
</ul>
]]></content>
      <categories>
        <category>Plugins</category>
      </categories>
      <tags>
        <tag>vanilla-tilt.js</tag>
        <tag>tilt.js</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Vue-Cli 遇到的錯誤訊息們與解決方式</title>
    <url>/vue/20230327/1158769951/</url>
    <content><![CDATA[<h2 id="vue-cli-顯示-autoprefixer-錯誤訊息解學方式"><a href="#vue-cli-顯示-autoprefixer-錯誤訊息解學方式" class="headerlink" title="vue cli 顯示 autoprefixer: 錯誤訊息解學方式"></a>vue cli 顯示 <code>autoprefixer:</code> 錯誤訊息解學方式</h2><p><img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E4%BD%BF%E7%94%A8%20Vue%20Cli%20%E9%81%87%E5%88%B0%E7%9A%84%E9%8C%AF%E8%AA%A4%E8%A8%8A%E6%81%AF%E5%80%91%E8%88%87%E8%A7%A3%E6%B1%BA%E6%96%B9%E5%BC%8F_01.png?alt=media&token=694bc3bc-e75b-46ab-b66c-147bd3dc1084" alt="顯示 autoprefixer 錯誤訊息 ▲"></p>
<p>錯誤訊息 : <code>autoprefixer: Replace color-adjust to print-color-adjust. The color-adjust shorthand is currently deprecated.</code></p>
<h3 id="解決方式"><a href="#解決方式" class="headerlink" title="解決方式"></a>解決方式</h3><p>安裝 <strong><a href="mailto:&#x61;&#117;&#x74;&#111;&#112;&#114;&#x65;&#102;&#105;&#120;&#x65;&#x72;&#64;&#49;&#x30;&#x2e;&#x34;&#46;&#x35;">&#x61;&#117;&#x74;&#111;&#112;&#114;&#x65;&#102;&#105;&#120;&#x65;&#x72;&#64;&#49;&#x30;&#x2e;&#x34;&#46;&#x35;</a></strong> 版本，在終端機執行指令 : <code>npm install autoprefixer@10.4.5 --save-exact</code></p>
<h2 id="無法使用-npm-install-載回-node-modules-解決方式"><a href="#無法使用-npm-install-載回-node-modules-解決方式" class="headerlink" title="無法使用 npm install 載回 node_modules 解決方式"></a>無法使用 <code>npm install</code> 載回 node_modules 解決方式</h2><p>可能是本地端的 node 版本高於專案的版本，以系統管理員身份開啟 windows PowerShell 使用 <code>nvm</code> 降級。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm list - 列出已安裝清單</span><br><span class="line">nvm install [node 版本號]</span><br><span class="line">nvm use [node 版本號] - 切換到特定 Node 版本(只限有安裝的版本)</span><br></pre></td></tr></table></figure>

<h2 id="參考資訊"><a href="#參考資訊" class="headerlink" title="參考資訊"></a>參考資訊</h2><ul>
<li><a href="https://www.notion.so/07-95c88ebb1822439691a4c8b5b09fd50e">#07. <strong>扛起骨灰級專案吧！</strong></a></li>
<li><a href="https://www.notion.so/macOS-NVM-Node-js-a2550a17b6464d158aa8b6ec31caa64a">macOS 安裝 NVM 與 Node.js</a></li>
<li><a href="https://israynotarray.com/nodejs/20200107/3738078915/">Windows 10 安裝並使用 nvm 切換 NodeJS 版本</a></li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Vue3</tag>
      </tags>
  </entry>
  <entry>
    <title>實現設計稿中英文不同字形設定</title>
    <url>/html-css/20230327/1509112208/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>有時會遇到設計稿中使用不同字體的中英文，如果要一直手動設定真是稍嫌麻煩，下方使用 「 <code>@font-face</code> 規則搭配 <code>unicode-range</code> 屬性 」的方式，在一般專案與 Vue Cli 專案讓系統去偵測中英文並配對對應的字型。</p>
<p>下方兩個範例使用兩種字體：</p>
<ol>
<li>英文字體載入本地端資料夾。<a href="https://pangrampangram.com/products/monument-extended">Monument Extended 字體載入點</a></li>
<li>中文字體使用 Google Font - <a href="https://fonts.google.com/noto/specimen/Noto+Sans+TC">Noto Sans Traditional Chinese</a></li>
</ol>
<h2 id="❒-Vue-Cli-BS"><a href="#❒-Vue-Cli-BS" class="headerlink" title="❒ Vue Cli + BS"></a>❒ Vue Cli + BS</h2><p><a href="https://github.com/echocarriet/vue_usedifferentfont">GitHub 程式碼</a></p>
<p><a href="https://echocarrie.com/vue_usedifferentfont/#/">GitHub Pages</a></p>
<h3 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h3><p><strong>① 資料統整</strong></p>
<ol>
<li><p>新增資料夾，把英文字體檔丟入 fonts 資料夾內</p>
<ol>
<li>開啟資料夾 src &#x2F; assets ，新增 stylesheets &#x2F;  fonts 資料夾，把英文字體檔案丟 fonts 資料夾內。</li>
</ol>
</li>
<li><p>stylesheets 資料夾新增 all.scss 檔案，把所有樣式從這邊 <code>@import</code>。</p>
<ol>
<li>這邊 npm 載入 bootstrap，all.scss 使用 <code>@import</code> 引入。</li>
</ol>
</li>
<li><p>於 App.vue  <code>@import</code>  all.scss 。</p>
<ol>
<li>記得把 App.vue 下方 style 預設的 #app font-family 備註掉，不然會吃不到待會下方要設定的字型。</li>
</ol>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- @ 為路徑 src --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"> <span class="keyword">@import</span> <span class="string">&#x27;@/assets/stylesheets/all&#x27;</span>;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>② 使用 <code>@font-face</code> 規則搭配 <code>unicode-range</code> 屬性</strong></p>
<ul>
<li>使用 <code>unicode-range</code> ，它可分辨你是中文或英文。<ul>
<li>中文代碼 : <code>unicode-range: U+4E00-9FFF;</code></li>
<li>英文代碼 : <code>unicode-range: U+00-024F;</code></li>
</ul>
</li>
<li>中文與英文 <code>@font-face</code> 中的 <code>font-family</code> 自訂一樣的名字 ( 例如 <code>custom-font</code> )，把 <code>custom-font</code> 加入 _variables.scss 中的 <code>$font-family-sans-serif</code> 的第一個。因為已經各自設定了 <code>unicode-range</code> ，所以系統會自己偵測中英文並配對對應字型。</li>
</ul>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// all.scss</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ----- 中文設定(google font)</span></span><br><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: custom-font;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">local</span>(<span class="string">&#x27;Noto Sans TC&#x27;</span>),</span><br><span class="line">    <span class="built_in">url</span>(https://fonts.googleapis.com/css2?family=Noto+Sans+TC:wght@<span class="number">400</span>;<span class="number">700</span>&amp;<span class="attribute">display</span>=swap)</span><br><span class="line">      <span class="built_in">format</span>(&#x27;embedded-opentype&#x27;);</span><br><span class="line">  unicode-range: U+<span class="number">4</span>E00-<span class="number">9</span>FFF;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ----- 英文設定(本地端文字檔)</span></span><br><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: custom-font;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">local</span>(<span class="string">&#x27;PPMonumentExtended-Regular&#x27;</span>),</span><br><span class="line">    <span class="built_in">url</span>(<span class="string">&#x27;@/assets/stylesheets/fonts/PPMonumentExtended-Regular.otf&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;opentype&#x27;</span>);</span><br><span class="line">  unicode-range: U+<span class="number">00</span>-<span class="number">024</span>F;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="❒-一般專案"><a href="#❒-一般專案" class="headerlink" title="❒ 一般專案"></a>❒ 一般專案</h2><p><a href="https://github.com/echocarriet/usedifferentfont">GitHub 程式碼</a></p>
<p><a href="https://echocarrie.com/usedifferentfont/">GitHub Pages</a></p>
<p><strong>① 資料整理</strong></p>
<ol>
<li>把載下本地端的英文字體放置專案資料夾內。</li>
<li>開啟 all.css 做字體設定。</li>
</ol>
<p><strong>② 使用 <code>@font-face</code> 規則搭配 <code>unicode-range</code> 屬性</strong></p>
<ul>
<li>使用 <code>unicode-range</code> ，它可分辨你是中文或英文。<ul>
<li>中文代碼 : <code>unicode-range: U+4E00-9FFF;</code></li>
<li>英文代碼 : <code>unicode-range: U+00-024F;</code></li>
</ul>
</li>
<li>中文與英文 <code>@font-face</code> 中的 <code>font-family</code> 自訂一樣的名字 ( 例如 <code>custom-fonts</code> )，把 <code>custom-fonts</code> 加入 body 中。因為已經各自設定了 <code>unicode-range</code> ，所以系統會自己偵測中英文並配對對應字型。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 中文設定(google font) */</span></span><br><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: custom-fonts;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">local</span>(<span class="string">&quot;Noto Sans TC&quot;</span>), <span class="built_in">url</span>(<span class="string">&#x27;https://fonts.googleapis.com/css2?family=Noto+Sans+TC:wght@400;700&amp;display=swap&#x27;</span>) <span class="built_in">format</span>(<span class="string">&quot;embedded-opentype&quot;</span>);</span><br><span class="line">  unicode-range: U+<span class="number">4</span>E00-<span class="number">9</span>FFF;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 英文設定(本地端文字檔) */</span></span><br><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: custom-fonts;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">local</span>(<span class="string">&quot;PPMonumentExtended-Regular&quot;</span>), <span class="built_in">url</span>(<span class="string">&#x27;./fonts/PPMonumentExtended-Regular.otf&#x27;</span>) <span class="built_in">format</span>(<span class="string">&quot;opentype&quot;</span>);</span><br><span class="line">  unicode-range: U+<span class="number">00</span>-<span class="number">024</span>F;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 中英文@font-face中的font-family自訂名加入body的 */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: custom-fonts;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><a href="https://blog.gtwang.org/web-development/css-font-face/">CSS 網頁字型 @font-face 使用教學與範例</a></li>
<li><a href="https://wcc723.github.io/sass/2014/02/21/font-code-range/">CSS設定中英文不同的字體</a></li>
<li><a href="https://keqingrong.cn/blog/2019-11-30-different-fonts-in-different-locales/">前端如何实现中文、英文、数字使用不同字体</a></li>
<li><a href="https://css-tricks.com/snippets/css/using-font-face-in-css/">How to use @font-face in CSS</a></li>
</ul>
]]></content>
      <categories>
        <category>HTML&amp;CSS</category>
      </categories>
      <tags>
        <tag>font-face</tag>
        <tag>unicode-range</tag>
      </tags>
  </entry>
  <entry>
    <title>客製 Sass 模組化設計</title>
    <url>/scss/20230327/3866487804/</url>
    <content><![CDATA[<h2 id="❒-前言"><a href="#❒-前言" class="headerlink" title="❒ 前言"></a>❒ 前言</h2><p>自訂 Sass Module ( 像 BS ) 上傳 GitHub 並於要使用的專案中安裝使用，就不需要每次開發都重新架設環境，可加速開發效率。</p>
<p>此文將會提到 ➀ 客製 Sass 模組化 ➁ 升級模組框架並新增版本號 ➂ 於專案引用不同版本號模組。</p>
<h2 id="❒-使用環境"><a href="#❒-使用環境" class="headerlink" title="❒ 使用環境"></a>❒ 使用環境</h2><ul>
<li>VSCode<ul>
<li>Live Sass Compiler 套件</li>
<li>Live Server 套件</li>
</ul>
</li>
<li>npm ( 管理模組 )</li>
<li>Git ( 做版本控制 )</li>
<li>GitHub ( 模組上傳至此，方便更新版本並隨時於新專案安裝使用 )</li>
</ul>
<h2 id="❒-流程"><a href="#❒-流程" class="headerlink" title="❒ 流程"></a>❒ 流程</h2><ol>
<li>建立一個框架，並包含變數、基本樣式、Package.json。</li>
<li>上傳到 GitHub。</li>
<li>建立一個專案，引用該框架內容。</li>
<li>升級框架，並增加版本號。</li>
<li>專案升級，選擇特定版本號。</li>
<li>預設值覆蓋。</li>
</ol>
<h2 id="❒-為何需要預先定義模組"><a href="#❒-為何需要預先定義模組" class="headerlink" title="❒ 為何需要預先定義模組"></a>❒ 為何需要預先定義模組</h2><ul>
<li>Dry ( Don’t repeat your self )，重複的事情別一直做。</li>
<li>確保團隊開發視覺一致</li>
<li>依據公司需求客製的擴展性</li>
<li>視覺設計<ul>
<li>設計具有參考</li>
<li>設計語言部會隨著專案不同而改變</li>
<li>模組受到版本控制</li>
</ul>
</li>
</ul>
<h2 id="❒-客製-Sass-模組並上傳至-GitHub"><a href="#❒-客製-Sass-模組並上傳至-GitHub" class="headerlink" title="❒ 客製 Sass 模組並上傳至 GitHub"></a>❒ 客製 Sass 模組並上傳至 GitHub</h2><h3 id="❶-建立-Sass-模組化的資料夾，使用-npm-操作版控"><a href="#❶-建立-Sass-模組化的資料夾，使用-npm-操作版控" class="headerlink" title="❶ 建立 Sass 模組化的資料夾，使用 npm 操作版控"></a>❶ 建立 Sass 模組化的資料夾，使用 npm 操作版控</h3><ul>
<li><p>本地端新增專案資料夾 SassModuleNote_sample ( 可自行命名 )。</p>
</li>
<li><p>npm 版控，先初始化 <code>npm init</code>。</p>
<ul>
<li>專案內會產生 package.json 檔案。</li>
<li>package.json 內的 <code>&quot;name&quot;</code> 為專案名稱  SassModuleNote_sample，從 GitHub 拉下的資料夾也會是相同名。</li>
</ul>
</li>
<li><p>專案內新增 scss 檔案 :</p>
<ul>
<li><p>可參考 Bootstrap GitHub 中的 scss 資料夾來製作自己的 Sass 模組化資料，製作好後就可以進入下個步驟上傳至 GitHub。</p>
<ul>
<li><a href="https://github.com/twbs/bootstrap/tree/v5.2.3/scss">版本號 v5.2.3</a></li>
</ul>
</li>
<li><p><code>_variables.scss</code> ( 不會被編譯 )</p>
</li>
<li><p><code>SassModuleNote_sample.scss</code> ( 會被編譯 )</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// _variables.scss</span></span><br><span class="line"><span class="variable">$primary-color</span>: <span class="number">#00cc99</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SassModuleNote_sample.scss</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;variables&quot;</span>; </span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>目前未調整編譯後的 css 檔案位置，先不要點擊 VSCode 下方的 Watch Sass。</p>
</li>
</ul>
<h3 id="❷-調整-Sass-檔案輸出的位置"><a href="#❷-調整-Sass-檔案輸出的位置" class="headerlink" title="❷ 調整 Sass 檔案輸出的位置"></a>❷ 調整 Sass 檔案輸出的位置</h3><p>專案路徑 : VSCode 設定 &#x2F; 工作區 ( Workspace ) &#x2F; 開啟 JSON 設定 : settings.json</p>
<p><strong>自訂 Sass 輸出位置 settings.json</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ----- 工作區 settings.json</span></span><br><span class="line"><span class="attr">&quot;liveSassCompile.settings.formats&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"> <span class="comment">// This is Default. 為展開的形式</span></span><br><span class="line"> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;format&quot;</span><span class="punctuation">:</span> <span class="string">&quot;expanded&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;extensionName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.css&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;savePath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/dist/css&quot;</span></span><br><span class="line"> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"> <span class="comment">// You can add more 為壓縮的形式</span></span><br><span class="line"> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;format&quot;</span><span class="punctuation">:</span> <span class="string">&quot;compressed&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;extensionName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.min.css&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;savePath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/dist/css&quot;</span></span><br><span class="line"> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>&quot;savePath&quot;</code> 中編譯後的 css 檔案可自訂要放哪個位置。</li>
<li>調整好後，點擊 VSCode 下方的 Watch Sass 就會編譯出 dist 資料夾內含 css 檔 ( 展開與壓縮格式的 css 檔 )。</li>
</ul>
<p><strong>補充 :</strong></p>
<ul>
<li>format : 編譯後的 CSS 格式。<ul>
<li>expanded : 未壓縮。</li>
<li>compressed : 壓縮。</li>
</ul>
</li>
<li>extensionName : 編譯後產生的副檔名。</li>
<li>savePath : 此檔案儲存的路徑，請自行調整路徑。</li>
</ul>
<h3 id="❸-上傳至-GitHub"><a href="#❸-上傳至-GitHub" class="headerlink" title="❸ 上傳至 GitHub"></a>❸ 上傳至 GitHub</h3><p><strong>➀ 專案執行 git 指令做版控</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commit -m<span class="string">&quot;update 1.0.0&quot;</span> (package.json中的version，請自行更換名稱)</span><br></pre></td></tr></table></figure>

<p><strong>➁ 於 GitHub 新增 Res，把模組化專案上傳至 GitHub</strong></p>
<ul>
<li>把 GitHub 中 <code>…or push an existing repository from the command line</code> 內的指令複製貼入 VSCode 終端機。</li>
</ul>
<h2 id="❒-於新專案中使用剛上傳至-GitHub-的客製-Sass-模組"><a href="#❒-於新專案中使用剛上傳至-GitHub-的客製-Sass-模組" class="headerlink" title="❒ 於新專案中使用剛上傳至 GitHub 的客製 Sass 模組"></a>❒ 於新專案中使用剛上傳至 GitHub 的客製 Sass 模組</h2><h3 id="❹-把剛上傳的-Sass-模組化拉下來新專案使用"><a href="#❹-把剛上傳的-Sass-模組化拉下來新專案使用" class="headerlink" title="❹ 把剛上傳的 Sass 模組化拉下來新專案使用"></a>❹ 把剛上傳的 Sass 模組化拉下來新專案使用</h3><p>完成上方 ❶ ～ ❸ 步驟後，之後有新的專案，就可以使用下面方式把自製的 Sass 模組化資料夾拉下來使用囉！ ( 拉下來後會顯示在 <code>node_module</code> 資料夾內 )</p>
<ol>
<li><p>本地端新增一個名為 project  專案資料夾。</p>
</li>
<li><p>複製剛上傳 GitHub 模組化專案 ( SassModuleNote_sample  ) 的連結。</p>
<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E5%AE%A2%E8%A3%BD%20Sass%20%E6%A8%A1%E7%B5%84%E5%8C%96%E8%A8%AD%E8%A8%88_01.png?alt=media&token=f21c463e-43cb-4115-9650-c064586fc409" alt="// GitHub 模組化專案的 SSH URL"></p>
</li>
<li><p>project 專案拉進 VSCode  → 終端機執行初始化指令 <code>npm init</code> ( 如果沒有做細部設定可直接一直按 Enter ) → 終端機內輸入指令 <code>npm install 步驟2的URL —-save</code>。</p>
<ol>
<li><p>加上 <code>--save</code> 除了會把 GitHub 模組化專案的框架內容直接存於 package.json，也會把 GitHub 模組化專案的框架拉下來。框架拉下來後可於 <code>node_module</code> 資料夾內看見。</p>
<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E5%AE%A2%E8%A3%BD%20Sass%20%E6%A8%A1%E7%B5%84%E5%8C%96%E8%A8%AD%E8%A8%88_02.png?alt=media&token=4f9e3d52-90e4-491c-8b0d-1083a51bbef3" alt="// node_module 資料夾"></p>
</li>
</ol>
</li>
<li><p>專案內新增 index.html 與 scss 資料夾與檔案</p>
<ol>
<li>專案 &#x2F; scss 資料夾 &#x2F; all.scss<ol>
<li><p>all.scss 裏面引入客製模組的 ➀ 所有 scss ② 所需的 scss 檔案，擇一即可。</p>
 <figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入SassModuleNote_sample專案內所有scss檔案</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;../node_modules/SassModuleNote_sample/scss/SassModuleNote_sample&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入SassModuleNote_sample專案所需的scss檔案,以變數為例</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;../node_modules/SassModuleNote_sample/scss/_variables&#x27;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>按下 Watch Sass 前請先參考「 ❷ 調整 Sass 檔案輸出的位置 」調整編譯出來的 css 檔案位置。</p>
</li>
</ol>
</li>
<li>專案 &#x2F; index.html 匯入編譯後的 css 檔案，上方 4.ii 就可以套用自製的模組囉！</li>
</ol>
</li>
<li><p>如果自製的模組有分不同版本號，抓下來沒選要安裝哪個版本號就會抓下最新版的，想要在專案中使用特定版本號可參考下方「❒ 新專案中引用 Sass 某版本號模組化 」做法。</p>
<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E5%AE%A2%E8%A3%BD%20Sass%20%E6%A8%A1%E7%B5%84%E5%8C%96%E8%A8%AD%E8%A8%88_03.png?alt=media&token=64828d03-57ef-4d97-9ea1-9d9fd0e1744d" alt="// 沒顯示版本號"></p>
</li>
</ol>
<h2 id="❒-Sass-模組化於-GitHub-Res-做版本號更新"><a href="#❒-Sass-模組化於-GitHub-Res-做版本號更新" class="headerlink" title="❒ Sass 模組化於 GitHub Res 做版本號更新"></a>❒ Sass 模組化於 GitHub Res 做版本號更新</h2><p>隨著日後維護會有更新我們自己客製 Sass 模組化資料的需求，可參考下面方法來替不同時期的 Sass 模組化資料標記上不同的標籤。</p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E5%AE%A2%E8%A3%BD%20Sass%20%E6%A8%A1%E7%B5%84%E5%8C%96%E8%A8%AD%E8%A8%88_04.png?alt=media&token=cf5fb0a7-b034-4353-965a-bf1fb3f2edc9" alt="// BS GitHub 標籤上的版本號(https://github.com/twbs/bootstrap) "></p>
<p><strong>有兩種方式可於 Sass 模組化加上不同版本號的標籤 ( tags )：</strong></p>
<ol>
<li>使用 Source Tree 。</li>
<li>使用指令方式。</li>
</ol>
<h3 id="❶-Source-Tree-加上標籤-tags"><a href="#❶-Source-Tree-加上標籤-tags" class="headerlink" title="❶ Source Tree 加上標籤 tags"></a>❶ Source Tree 加上標籤 tags</h3><ol>
<li><p>於要加上版本號的 commit 點上，點擊右鍵 Tag 於視窗中的 Tag Name 加入標籤名稱 ( 例，v1.0.0 )。</p>
<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E5%AE%A2%E8%A3%BD%20Sass%20%E6%A8%A1%E7%B5%84%E5%8C%96%E8%A8%AD%E8%A8%88_05.png?alt=media&token=197806ba-4912-4e3b-a694-2fe6e0a6f9be" alt="// SourceTree 示意圖"></p>
</li>
<li><p>VSCode 中使用指令推上去 GitHub → <code>git push origin --tags</code></p>
<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E5%AE%A2%E8%A3%BD%20Sass%20%E6%A8%A1%E7%B5%84%E5%8C%96%E8%A8%AD%E8%A8%88_06.png?alt=media&token=ef06dde9-97ef-4a7d-ba2c-c527270c2604" alt="// GitHub Res 顯示版本號"></p>
</li>
</ol>
<h3 id="❷-使用語法加上標籤-tags"><a href="#❷-使用語法加上標籤-tags" class="headerlink" title="❷ 使用語法加上標籤 tags"></a>❷ 使用語法加上標籤 tags</h3><ul>
<li><p>使用 <code>git log</code> 查詢要加上版本號 commit 點的 SHA-1 值。如果想在某個 commit 加上標籤 → <code>$ git tag 標籤名 commit的SHA-1值前六碼</code> ( <a href="https://gitbook.tw/chapters/tag/using-tag">文章</a> )</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git tag v1.0.0 d550d5</span><br></pre></td></tr></table></figure>
</li>
<li><p>記得要在推上去 GitHub 做更新 → <code>git push origin --tags</code>，GitHub 就可以看到剛剛新增的 v1.0.0 版本號囉 ！( <code>git push 遠端節點名稱 —-tags</code> )</p>
<p>  <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E5%AE%A2%E8%A3%BD%20Sass%20%E6%A8%A1%E7%B5%84%E5%8C%96%E8%A8%AD%E8%A8%88_07.png?alt=media&token=f35f00d6-d2c4-458f-9287-50ff3b55bbfc" alt="// GitHub 示意圖"></p>
</li>
</ul>
<h2 id="❒-新專案中引用-Sass-某版本號模組化"><a href="#❒-新專案中引用-Sass-某版本號模組化" class="headerlink" title="❒ 新專案中引用 Sass 某版本號模組化"></a>❒ 新專案中引用 Sass 某版本號模組化</h2><ol>
<li><p>如果要引用新模組化的專案，但本地端已經有拉下舊的模組化就需要先反安裝 package.json 中的 “dependencies” → <code>npm uninstall GitHub數據庫URL --save</code>。</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 以上方自己客製的 Sass powerful framework 專案為例</span><br><span class="line">$ npm uninstall github:echocarriet/powerful_framework --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>再安裝要的版本號模組 → <code>npm install Github數據庫URL\#版本號 --save</code>，可見 “dependencies”: 路徑後方多了版本號，並重新按一次 VSCode 的 Watch Sass 做編譯，版本號會透過 package.json 做管理。</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install git@github.com:echocarriet/SassModuleNote_sample.git\<span class="comment">#v1.0.0 --save</span></span><br></pre></td></tr></table></figure>

<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E5%AE%A2%E8%A3%BD%20Sass%20%E6%A8%A1%E7%B5%84%E5%8C%96%E8%A8%AD%E8%A8%88_08.png?alt=media&token=b21425d5-a241-44ec-893b-590b0d538a52" alt="// 專案中的 package.json 顯示目前安裝的版本號"></p>
</li>
</ol>
<p><strong>如果想要在專案使用其他版本號，例如 v1.0.1，有兩個方式：</strong></p>
<p>➀ 使用指令</p>
<p>下指令 <code>npm install Github數據庫URL\#版本號 --save</code>，專案的 package.json 內可見 “dependencies” 路徑後方會顯示版本號 v1.0.1。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install git@github.com:echocarriet/SassModuleNote_sample.git\<span class="comment">#v1.0.1 --save</span></span><br></pre></td></tr></table></figure>

<p><img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E5%AE%A2%E8%A3%BD%20Sass%20%E6%A8%A1%E7%B5%84%E5%8C%96%E8%A8%AD%E8%A8%88_09.png?alt=media&token=30273626-379a-487a-84cd-ed096264788a" alt="// package.json 內可見 &quot;dependencies” 版本號為 v1.0.1"></p>
<p>② 於專案的 package.json 修改</p>
<ol>
<li><p>開啟專案 &#x2F; package.json 中的 “dependencies” 直接在路徑後方修改版本號</p>
 <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// package.json </span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"> <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;powerful-framework&quot;</span><span class="punctuation">:</span> <span class="string">&quot;github:echocarriet/powerful_framework#1.0.1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>接著刪除整個 node_module 資料夾 → 執行 <code>npm install</code> 它就會載回 package.json 內的資訊包含剛剛我們修改的新的版本號 v1.0.1 模組。</p>
</li>
</ol>
<h2 id="❒-此文自製-Sass-模組的-GitHub-Res-Demo"><a href="#❒-此文自製-Sass-模組的-GitHub-Res-Demo" class="headerlink" title="❒ 此文自製 Sass 模組的 GitHub Res Demo"></a>❒ 此文自製 Sass 模組的 GitHub Res Demo</h2><p><a href="https://github.com/echocarriet/SassModuleNote_sample">GitHub Res</a></p>
<h2 id="❒-參考資訊"><a href="#❒-參考資訊" class="headerlink" title="❒ 參考資訊"></a>❒ 參考資訊</h2><ul>
<li><a href="https://www.casper.tw/css/2016/12/20/sass-folder/">卡斯伯 - Sass 資料夾結構</a></li>
<li>六角學院<ul>
<li>中大型 CSS 專案 實戰管理術 ( 直播課程 ) - 模組化設計</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Scss</category>
      </categories>
      <tags>
        <tag>使用git新增版本號</tag>
        <tag>GitHub</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>安裝 VueCli 環境與環境中檔案說明</title>
    <url>/vue/20230327/3166448359/</url>
    <content><![CDATA[<h2 id="開始使用-Vue-Cli-相關指令"><a href="#開始使用-Vue-Cli-相關指令" class="headerlink" title="開始使用 Vue Cli | 相關指令"></a>開始使用 Vue Cli | 相關指令</h2><ul>
<li>查詢 Nodejs 版本 <code>node -v</code></li>
<li>查詢 npm 版本 <code>npm -v</code></li>
<li>建立專案 <code>vue create &#123;&#123; 專案名稱 &#125;&#125;</code></li>
<li>運行 Vue 開發環境 <code>npm run serve</code></li>
<li>編譯 Production 上線版本 <code>npm run build</code></li>
</ul>
<h2 id="Vue-Cli-準備流程"><a href="#Vue-Cli-準備流程" class="headerlink" title="Vue Cli 準備流程"></a>Vue Cli 準備流程</h2><ol>
<li>安裝 Node.js  ( 到 <a href="https://nodejs.org/en/">Node.js</a> 官網下載 LTS 版本，較穩定 )</li>
<li>安裝 Vue Cli 全域環境 ( 安裝完成後才能使用 Vue Cli 指令 )</li>
<li>建立 Vue 專案</li>
<li>開始開發 !</li>
</ol>
<h3 id="步驟-1-安裝-Node-js"><a href="#步驟-1-安裝-Node-js" class="headerlink" title="步驟 1. 安裝 Node.js"></a>步驟 1. 安裝 Node.js</h3><ol>
<li>到 <a href="https://nodejs.org/en/">Node.js</a> 官網下載 LTS 版本，較穩定。</li>
<li>windows 開啟命令提示字元，Mac 開啟終端機 → 執行 <code>node -v</code> 與 <code>npm -v</code> 查詢版本，有查到表成功。<ol>
<li>node 為運行的環境、npm 為套件管理的工具。</li>
</ol>
</li>
</ol>
<p>🗒️ <strong>筆者自用 | 電腦安裝 node.js 方式</strong></p>
<ul>
<li>mac 用 nvm 安裝 node.js。( 更換版本需使用 <code>nvm install v版本號</code>+ <code>nvm use v版本號</code>  ) <a href="https://titangene.github.io/article/nvm.html">參考文章</a></li>
<li>windows 使用 node.js 官網套件安裝。</li>
</ul>
<h3 id="步驟-2-安裝-Vue-Cli-全域環境"><a href="#步驟-2-安裝-Vue-Cli-全域環境" class="headerlink" title="步驟 2. 安裝 Vue Cli 全域環境"></a>步驟 2. 安裝 Vue Cli 全域環境</h3><p><a href="https://cli.vuejs.org/zh/guide/installation.html">Vue Cli 安裝文件 ( 中譯 )</a></p>
<p>‼️ 注意 : 下方全域安裝不是在專案位置。開啟終端機 ( 命令提示字元 ) 如下圖，再依下方步驟把指令貼入。 ( 在專案位置做安裝 … 會 error )。</p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E5%AE%89%E8%A3%9D%20Vue%20Cli%20%E7%92%B0%E5%A2%83%E8%88%87%E7%92%B0%E5%A2%83%E4%B8%AD%E6%AA%94%E6%A1%88%E8%AA%AA%E6%98%8E_01.png?alt=media&token=b1c70911-7886-4376-88bf-ada23e5222dd" alt="路徑 ▲"></p>
<p><strong>步驟 :</strong></p>
<ol>
<li><code>npm install -g @vue/cli</code> 貼到終端機。下方為 Mac 遇到的問題 :<ol>
<li>從 macOS Catalina 版開始，Mac 使用 zsh 做為預設登入 shell （ 終端機 ）。本來改回舊的預設 shell 但專案丟到 vscode 跑 npm run serve 時，它強迫我把預設換回 zsh，只好換回來。</li>
<li>zsh 要執行 <code>npm install -g @vue/cli</code> 會出現 error ，這時可加上 sudo → <code>sudo npm install -g @vue/cli</code>，輸入密碼後就可安裝了 ！</li>
</ol>
</li>
<li><code>vue -V</code> 查詢目前 Cli 版本，有查詢到代表安裝成功 !</li>
<li>到「步驟 2. 安裝 Vue Cli 全域環境」建立的是一個全域環境，表示在此電腦內都可以運行。</li>
<li>下方「步驟 3. 建立 Vue 專案」 開始做區域環境的設定，建立一個 Vue 專案資料夾。</li>
</ol>
<h3 id="步驟-3-建立-Vue-專案"><a href="#步驟-3-建立-Vue-專案" class="headerlink" title="步驟 3. 建立 Vue 專案"></a>步驟 3. 建立 Vue 專案</h3><p>Vue 官網路徑 :  基礎 &#x2F; <a href="https://cli.vuejs.org/zh/guide/creating-a-project.html#%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE">創建一個項目</a></p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E5%AE%89%E8%A3%9D%20Vue%20Cli%20%E7%92%B0%E5%A2%83%E8%88%87%E7%92%B0%E5%A2%83%E4%B8%AD%E6%AA%94%E6%A1%88%E8%AA%AA%E6%98%8E_02.png?alt=media&token=6a99d6a0-c2a0-4efa-8abe-052cc829676c" alt="Vue 文件中創建一個項目 ▲"></p>
<p><strong>三種創建形式 ( 擇一 ) :</strong></p>
<ol>
<li><p><strong>Vue create</strong> :  使用 vue cli 的形式來建立專案。 ( 課程中主要使用此方式 ) → <code>vue create 專案資料夾名稱</code></p>
</li>
<li><p>使用圖形化介面</p>
</li>
<li><p>拉取 2.x 模板 ( 舊版本 )</p>
</li>
</ol>
<hr>
<p><strong>安裝遇到的問題 :</strong></p>
<p><strong>更新 : windows 下方遇到的安裝問題，可改用 windows PowerShell 做操作，或使用下面方式。</strong></p>
<ul>
<li><p>windows 的命令提示字元要用管理員開啟才可 vue create 專案資料夾名稱。</p>
<ul>
<li><p>或者是搜尋 .vuerc 檔案 ( 路徑 :  C:\Users\WIN10.vuerc) → “useTaobaoRegistry”: false 改成 true。</p>
</li>
<li><p>或是參考 <a href="https://stackoverflow.com/questions/53934852/vue-cli-3-command-failed-npm-install-loglevel-error">stack overflow</a></p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E5%AE%89%E8%A3%9D%20Vue%20Cli%20%E7%92%B0%E5%A2%83%E8%88%87%E7%92%B0%E5%A2%83%E4%B8%AD%E6%AA%94%E6%A1%88%E8%AA%AA%E6%98%8E_03.png?alt=media&token=9fe7dc96-70e1-4cec-9dc6-a2ac9bde04a1" alt="錯誤訊息 ▲"></p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E5%AE%89%E8%A3%9D%20Vue%20Cli%20%E7%92%B0%E5%A2%83%E8%88%87%E7%92%B0%E5%A2%83%E4%B8%AD%E6%AA%94%E6%A1%88%E8%AA%AA%E6%98%8E_04.png?alt=media&token=feef9509-4e5c-4a9c-bc17-93fd7522b397" alt=".vuerc 檔案 ▲"></p>
</li>
</ul>
</li>
<li><p>MAC 電腦使用 nvm 安裝 node.js，記得使用 <code>nvm use v版本號</code> 切換 node 為最新版</p>
</li>
<li><p>windows 電腦可能遇到錯誤訊息 <code>Expected linebreaks to be &#39;LF&#39; but found &#39;CRLF&#39; linebreak-style</code>。</p>
<ul>
<li>解決辦法 : 專案中開啟 .eslintrc.js 於 reles 內加入 <code>&#39;linebreak-style&#39;: [&#39;error&#39;, &#39;windows&#39;]</code>。</li>
<li>可參考 <a href="https://www.notion.so/Vue-Cil-windows-CRLF-8b44b53996e147709c7055c7eea089c9">Vue Cil | 解決 windows 系統的換行符標準 CRLF 問題</a></li>
</ul>
</li>
<li><p>改 src 資料夾內的檔案都不需要 <code>npm run serve</code> 重啟，以外的都需要 <code>npm run serve</code> 重啟。</p>
</li>
</ul>
<h3 id="步驟-3-1-操作開始"><a href="#步驟-3-1-操作開始" class="headerlink" title="步驟 3-1. 操作開始"></a>步驟 3-1. <strong>操作開始</strong></h3><ol>
<li><p><code>cd 專案要儲存的路徑</code> ( 例如，專案要存在桌面 practiveVue 資料夾內，路徑如下 )</p>
<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E5%AE%89%E8%A3%9D%20Vue%20Cli%20%E7%92%B0%E5%A2%83%E8%88%87%E7%92%B0%E5%A2%83%E4%B8%AD%E6%AA%94%E6%A1%88%E8%AA%AA%E6%98%8E_05.png?alt=media&token=468fb644-cc77-40a0-8b6d-33d11a5dafb3" alt="路徑 ▲"></p>
</li>
<li><p><code>vue create 專案資料夾名稱</code> ( 在 practiveVue 資料夾內新增一個 project0605 專案 )</p>
<ul>
<li>輸入完指令會出現三個選項，</li>
<li>過程中如果選錯了，可按下 <code>Ctrl + c</code> 來中斷目前操作 ( 中斷終端機行為 )。</li>
</ul>
<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E5%AE%89%E8%A3%9D%20Vue%20Cli%20%E7%92%B0%E5%A2%83%E8%88%87%E7%92%B0%E5%A2%83%E4%B8%AD%E6%AA%94%E6%A1%88%E8%AA%AA%E6%98%8E_06.png?alt=media&token=f95550c8-063a-43c5-97a5-81cd325e4d60" alt="路徑 ▲"></p>
</li>
<li><p>輸入完 3-1.2 步驟的指令，會進入選項要做選取 :</p>
<ol>
<li><p><strong>Please pick a preset</strong> :</p>
<ul>
<li>default ([Vue3] babel, eslint)</li>
<li>default ([Vue2] babel, eslint)</li>
<li><code>Manually select features</code> 手動建立環境。</li>
</ul>
<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E5%AE%89%E8%A3%9D%20Vue%20Cli%20%E7%92%B0%E5%A2%83%E8%88%87%E7%92%B0%E5%A2%83%E4%B8%AD%E6%AA%94%E6%A1%88%E8%AA%AA%E6%98%8E_07.png?alt=media&token=c7fac4a8-a463-4a26-85a9-bcfa2d36ed19" alt="// 輸入指令後會出現三個預設選項 ▲"></p>
<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E5%AE%89%E8%A3%9D%20Vue%20Cli%20%E7%92%B0%E5%A2%83%E8%88%87%E7%92%B0%E5%A2%83%E4%B8%AD%E6%AA%94%E6%A1%88%E8%AA%AA%E6%98%8E_08.png?alt=media&token=08076cac-12b8-483d-ada8-ad0de11ad321" alt="// 老師的終端機，上方黃色框內的兩個是老師預先儲存的 ( 建立好的環境可以先儲存，之後就不須重新輸入 ) ▲"></p>
</li>
<li><p><strong>Check features needed for your project :</strong> ( 用空白鍵選取項目 )</p>
<ul>
<li><del><code>choose Vue version</code> : 可選擇 Vue 的版本 ( 要選擇 vue2 或其他版本都可在此選取 )</del><ul>
<li>目前 5.0.4 版本無此選項</li>
</ul>
</li>
<li><code>Babel</code> : 要把 ES 6 以後較新的版本編譯成大部分瀏覽器都可運行的 js</li>
<li>TypeScript : 當有需要使用 TypeScript  可選此</li>
<li>Progressive Web App (PWA) Support : 開發的網站是需要有 PWA 功能的選此</li>
<li><code>Router</code> : 會再獨立的章節進行介紹</li>
<li>Vuex : 是 Vue 資料狀態管理的工具，目前不會使用到</li>
<li><code>CSS Pre-processors</code> : 為 CSS 預處理器，後方實戰中會帶到</li>
<li><code>Linter / Formatter</code> : 是檢視程式碼品質的工具 ( 建議開啟 )</li>
<li>Unit Testing : 為測試工具</li>
<li>E2E Testing : 為測試工具</li>
</ul>
</li>
<li><p><strong>Choose a version of Vue.js that you want to start the project with ( Use arrow keys )</strong></p>
<ul>
<li><code>3.x</code> ( vue 3 版本 )</li>
<li>2.x</li>
</ul>
</li>
<li><p><strong>Use history mode for router? (Requires proper server setup for index fallback in production) (Y&#x2F;n) ?</strong> ( 選取 vue router 形式 )</p>
<ul>
<li><code>n</code> ( 為 Vue router 使用預設形式 )<br>  ( 在這個模式下你的 server 同樣要進行調整，這個調整這門課不會講到 )</li>
</ul>
</li>
<li><p><strong>Pick a CSS pre-processor (PostCSS, Autoprefixer and CSS Modules are supported by default): (Use arrow keys) ?</strong> ( CSS 預處理器要選擇哪個版本 )</p>
<ul>
<li><code>Sass/SCSS ( with node-sass )</code>   &#x2F; 選 node.js 版本</li>
<li>Less ( 無法跑 Bootstrap 的 Sass )</li>
<li>Stylus  ( 無法跑 Bootstrap 的 Sass )</li>
</ul>
</li>
<li><p><strong>Pick a linter &#x2F; formatter config: (Use arrow keys) ?</strong> ( linter 會影響 js 的撰寫風格 )</p>
<ul>
<li>老師推薦 ( 下兩項則一 )，老師用 airbnb 示範。<ul>
<li><code>ESLint + Airbnb config</code> ( 對 JS 有一定的掌握度，尤其 ES6 ES7 掌握度非常高可選此。它對各項細節要求都很高 )</li>
<li>ESLint + Standard config ( 對 JS 不是很有把握可選此 )</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>Pick additional lint features: (Press「space」 to select, 「a」 to toggle all, 「i」 to invert selection) ?</strong> ( 妳的 linter 是用哪種方式進行檢視 )</p>
<ul>
<li><code>Lint on save</code> 存檔時就進行檢視。</li>
<li>Lint and fix on commit</li>
</ul>
</li>
<li><p><strong>Where do you prefer placing config for Babel, ESLint, etc.? (Use arrow keys)</strong><br> 這些設定要獨立檔案的形式還使統一存在 package.json ? ( 看個人習慣 )</p>
<ul>
<li><code>In dedicated config files</code> ( 存在獨立檔案 ) _ 老師選此</li>
<li>In package.json ( 存在 package.json )</li>
</ul>
</li>
<li><p><strong>Save this as a preset for future projects? (y&#x2F;N)</strong><br> 需不需要把這些設定檔儲存起來</p>
<ul>
<li><code>N</code></li>
</ul>
</li>
</ol>
</li>
<li><p>成功安裝</p>
<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E5%AE%89%E8%A3%9D%20Vue%20Cli%20%E7%92%B0%E5%A2%83%E8%88%87%E7%92%B0%E5%A2%83%E4%B8%AD%E6%AA%94%E6%A1%88%E8%AA%AA%E6%98%8E_09.png?alt=media&token=ded1c593-2913-42ae-b53a-a0f4ff7e6a28" alt="成功安裝 ▲"></p>
</li>
<li><p>設定好後，把專案丟到 vscode ，開啟 vscode 終端機執行 <code>npm run serve</code>，就可把環境運行起來。<br>運行完後，會出現兩個連結 ( Local 、Network ) 按下其中一個就會開啟網頁。</p>
<ul>
<li>本地端開發可選擇 Local 。</li>
<li>當要把專案分享給其他人可選取 Network ，但須和伙伴處於同個網域下才能使用。</li>
</ul>
<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E5%AE%89%E8%A3%9D%20Vue%20Cli%20%E7%92%B0%E5%A2%83%E8%88%87%E7%92%B0%E5%A2%83%E4%B8%AD%E6%AA%94%E6%A1%88%E8%AA%AA%E6%98%8E_010.png?alt=media&token=f443073b-a32e-4d98-af9f-8cb35855428d"></p>
<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E5%AE%89%E8%A3%9D%20Vue%20Cli%20%E7%92%B0%E5%A2%83%E8%88%87%E7%92%B0%E5%A2%83%E4%B8%AD%E6%AA%94%E6%A1%88%E8%AA%AA%E6%98%8E_011.png?alt=media&token=d54c660a-9d03-4d9b-a59d-8e6cb7b49bad"></p>
<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E5%AE%89%E8%A3%9D%20Vue%20Cli%20%E7%92%B0%E5%A2%83%E8%88%87%E7%92%B0%E5%A2%83%E4%B8%AD%E6%AA%94%E6%A1%88%E8%AA%AA%E6%98%8E_012.png?alt=media&token=d5623568-27f6-470b-9060-fcb750a2bb09" alt="執行 npm run serve環境運行起來畫面 ▲"></p>
</li>
<li><p>接下來可把「六角學院 Vue 課程練習 API 申請」申請的 API 加入到環境變數中。 ( 課程最終挑戰部分 )</p>
<ol>
<li><p>於專案根目錄建立 .env 檔案，新增兩個環境變數</p>
<ul>
<li><code>VUE_APP_API</code> : API server 路徑</li>
<li><code>VUE_APP_PATH</code> : 「六角學院 Vue 課程練習 API 申請」的路徑。</li>
</ul>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// .<span class="built_in">env</span></span><br><span class="line">VUE_APP_API=https://vue3-course-api.hexschool.io/</span><br><span class="line">VUE_APP_PATH=請填申請API路徑</span><br></pre></td></tr></table></figure>
</li>
<li><p>確認環境變數加入到專案中</p>
<ol>
<li><p>開啟「 專案 &#x2F; src &#x2F; views &#x2F; HomeView.vue」</p>
<ul>
<li><p>加入 created 生命週期，查看 <code>process.env.VUE_APP_API</code> 與 <code>process.env.VUE_APP_PATH</code>。</p>
<p>  <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E5%AE%89%E8%A3%9D%20Vue%20Cli%20%E7%92%B0%E5%A2%83%E8%88%87%E7%92%B0%E5%A2%83%E4%B8%AD%E6%AA%94%E6%A1%88%E8%AA%AA%E6%98%8E_013.png?alt=media&token=b95ee2bc-8ffb-4a91-a53b-1fa56a6f6b7d" alt="成功顯示 VUE_APP_API 與 VUE_APP_PATH 資訊 ▲"></p>
</li>
<li><p><code>process.env</code> 可參考 <a href="https://www.notion.so/Vue-Cli-4be2706a6dd849029f4aa543931246f7">Vue Cli 中環境變數觀念與操作</a>  。</p>
</li>
<li><p>‼️ 注意 : 調整到環境變數，終端機一定要重新啟用， <code>ctrl+c</code> → <code>npm run serve</code>。</p>
</li>
</ul>
 <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    ..</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(process.<span class="property">env</span>.<span class="property">VUE_APP_API</span>, process.<span class="property">env</span>.<span class="property">VUE_APP_PATH</span>);</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
</li>
</ol>
<h2 id="Vue-Cli-環境中的檔案說明"><a href="#Vue-Cli-環境中的檔案說明" class="headerlink" title="Vue Cli 環境中的檔案說明"></a>Vue Cli 環境中的檔案說明</h2><p><img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E5%AE%89%E8%A3%9D%20Vue%20Cli%20%E7%92%B0%E5%A2%83%E8%88%87%E7%92%B0%E5%A2%83%E4%B8%AD%E6%AA%94%E6%A1%88%E8%AA%AA%E6%98%8E_014.png?alt=media&token=e035f935-0958-4423-8835-6bef864e9b0c" alt="專案內檔案結構 ▲"></p>
<h3 id="node-modules-資料夾"><a href="#node-modules-資料夾" class="headerlink" title="node_modules 資料夾"></a>node_modules 資料夾</h3><ul>
<li><strong>千千萬萬不要修改「node_modules 資料夾」</strong>，還原上或與其他人協作會有很大的問題。</li>
<li><strong>千千萬萬不能 commit 到專案。</strong> push 到 Github 上。 ( 通常 .gitignore 檔案都會有設定，可再做確認 )</li>
<li>運行所需的原生套件，這些套件是依據 package.json 檔案內所列的清單一一進行安裝。</li>
<li>專案從遠端載下來時，可使用 <code>npm install</code> 指令的方式把環境還原。</li>
</ul>
<h3 id="src-資料夾-開發都在此資料夾內"><a href="#src-資料夾-開發都在此資料夾內" class="headerlink" title="src 資料夾 | 開發都在此資料夾內"></a>src 資料夾 | 開發都在此資料夾內</h3><p><img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E5%AE%89%E8%A3%9D%20Vue%20Cli%20%E7%92%B0%E5%A2%83%E8%88%87%E7%92%B0%E5%A2%83%E4%B8%AD%E6%AA%94%E6%A1%88%E8%AA%AA%E6%98%8E_015.png?alt=media&token=9579601f-debb-4760-b3f1-a09eebda788f" alt="專案內檔案結構 ▲"></p>
<ul>
<li><p><strong>main.js</strong> → main.js 為專案中最重要的檔案，所有檔案都會與它產生關連性，為專案的進入點。</p>
<ul>
<li><code>main.js</code> 會載入路由表，路由表會載入 HomeView 與 AboutView 檔案，其他元件還可以再載入其他子元件，一層層串接下去。</li>
<li>main.js 內 <code>import router from &#39;./router&#39;</code> 中的 router 為路由的配置檔案。可於 router 資料夾內找到。</li>
<li><strong>當有「引用的外部套件要做全域註冊會寫在 main.js 」上。</strong><ul>
<li>外部套件例如 axios、bootstrap。<br>  <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E5%AE%89%E8%A3%9D%20Vue%20Cli%20%E7%92%B0%E5%A2%83%E8%88%87%E7%92%B0%E5%A2%83%E4%B8%AD%E6%AA%94%E6%A1%88%E8%AA%AA%E6%98%8E_016.png?alt=media&token=69707e74-1539-43ec-b973-e8805c06e43b" alt="router 為路由的配置檔案 ▲"></li>
</ul>
</li>
</ul>
</li>
<li><p>App.vue → 為 main.js 第一個生成的主要元件，通常只做簡單的配置。</p>
<p>  <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E5%AE%89%E8%A3%9D%20Vue%20Cli%20%E7%92%B0%E5%A2%83%E8%88%87%E7%92%B0%E5%A2%83%E4%B8%AD%E6%AA%94%E6%A1%88%E8%AA%AA%E6%98%8E_017.png?alt=media&token=b8bdb39c-4e37-46c2-84cd-c6eb65c0e575"></p>
<p>  <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E5%AE%89%E8%A3%9D%20Vue%20Cli%20%E7%92%B0%E5%A2%83%E8%88%87%E7%92%B0%E5%A2%83%E4%B8%AD%E6%AA%94%E6%A1%88%E8%AA%AA%E6%98%8E_018.png?alt=media&token=0de0dcdd-efc0-4cf4-ba0f-9c9ad0186a87" alt="導覽列示意圖 ▲"></p>
</li>
<li><p>views 資料夾 → 主要的頁面會放此資料夾，而這些頁面掛載的的元件會放在 components 資料夾內。</p>
</li>
<li><p>assets 資料夾 → 相關的其他資產，例如比較小的圖片、CSS、相關的 JS 檔案</p>
</li>
</ul>
<h3 id="public-資料夾"><a href="#public-資料夾" class="headerlink" title="public 資料夾"></a>public 資料夾</h3><ul>
<li><p><strong>不會去動 public 資料夾內的程式碼。</strong></p>
</li>
<li><p>放置與進入點沒有相關連的檔案，或不需要編譯的檔案。但唯獨 public 資料夾內的 index.html 檔案會被編譯。 主要是因為 Vue 元件生成會需要掛載在一個實體頁面上所需的檔案。</p>
</li>
<li><p><strong>無論有多少分頁，最終編譯的 html 檔案只會有 index.html 一個。</strong></p>
</li>
<li><p><code>&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</code> 為元件生成的主要位置，<code>&lt;!-- built files will be auto injected --&gt;</code> 最終編譯的檔案會注入於此，這邊就是最終編譯完的 css 或 js 會放置的 HTML 的頁面。</p>
<p>  <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E5%AE%89%E8%A3%9D%20Vue%20Cli%20%E7%92%B0%E5%A2%83%E8%88%87%E7%92%B0%E5%A2%83%E4%B8%AD%E6%AA%94%E6%A1%88%E8%AA%AA%E6%98%8E_019.png?alt=media&token=b173ad35-814c-401a-b527-c4ed52f164d9"></p>
</li>
<li><p>比較大的圖片或資源也可放置於此資料夾。</p>
</li>
<li><p>使用 CDN 放置位置 → 專案 &#x2F; public 資料夾 &#x2F; index.html ( <code>&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</code> 下面 )。</p>
<ul>
<li>可以在 vscode 終端機輸入 <code>npm run build</code> 執行編譯產出 dist 資料夾，看裡面的 index.html 檔案內的 <code>&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</code> 有 script 的檔案。<br>  <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E5%AE%89%E8%A3%9D%20Vue%20Cli%20%E7%92%B0%E5%A2%83%E8%88%87%E7%92%B0%E5%A2%83%E4%B8%AD%E6%AA%94%E6%A1%88%E8%AA%AA%E6%98%8E_020.png?alt=media&token=62576dc5-c573-4516-b5c9-f6c29cdcde43" alt="Line22 以下▲"></li>
</ul>
</li>
</ul>
<h3 id="其餘檔案-環境相關設定檔"><a href="#其餘檔案-環境相關設定檔" class="headerlink" title="其餘檔案 | 環境相關設定檔"></a>其餘檔案 | 環境相關設定檔</h3><ul>
<li><p><strong>README.md</strong> → 介紹該怎麼運作這份 Vue</p>
</li>
<li><p><strong>package.json</strong> → 此專案的配置檔案，包含專案內有哪些相關套件都會記錄在此檔案。</p>
<p>  <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E5%AE%89%E8%A3%9D%20Vue%20Cli%20%E7%92%B0%E5%A2%83%E8%88%87%E7%92%B0%E5%A2%83%E4%B8%AD%E6%AA%94%E6%A1%88%E8%AA%AA%E6%98%8E_021.png?alt=media&token=508caef0-7feb-4807-ad54-155116c4c075" alt="小技巧 : vscode 終端機執行的 npm run serve，也可直接於上示意圖點選執行指令碼操作，結果會是一樣的。"></p>
</li>
<li><p><strong>package-lock.json</strong> → 專案內實際安裝套件的版本與相關描述。如果開發有問題，會使用此檔案做套件版本的查詢，不太會動到這支檔案。</p>
</li>
<li><p><strong>babel.config.js</strong> → 預設已調整好，不太會動到這支檔案。</p>
</li>
<li><p><strong>.gitignore</strong> → git 中忽略的檔案。 ( 裡面的檔案不會上傳到 Github )</p>
</li>
<li><p><strong>.eslintrc.js</strong> → eslink 的設定檔案，會依據我們的選擇先把設定檔與規則載入。當初 <code>vue create 專案名稱</code> 選取的規則是 <code>standard</code> 裡面就會有標示。如想要調整更多規則可於此檔案進行設定。</p>
<p>  <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E5%AE%89%E8%A3%9D%20Vue%20Cli%20%E7%92%B0%E5%A2%83%E8%88%87%E7%92%B0%E5%A2%83%E4%B8%AD%E6%AA%94%E6%A1%88%E8%AA%AA%E6%98%8E_022.png?alt=media&token=9f35ca6b-d7ab-46ee-8e0d-adc8ae84a2ea"></p>
</li>
<li><p><strong>.editorconfig</strong> → 編輯器的設定檔。</p>
</li>
<li><p><strong>.browserslistrc</strong> → 瀏覽器預期要支援的版本。 &gt;1% 表示瀏覽器有支援大於 1% 的使用就會支援它。</p>
<p>  <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E5%AE%89%E8%A3%9D%20Vue%20Cli%20%E7%92%B0%E5%A2%83%E8%88%87%E7%92%B0%E5%A2%83%E4%B8%AD%E6%AA%94%E6%A1%88%E8%AA%AA%E6%98%8E_023.png?alt=media&token=837bec03-a98a-4b89-bb49-78a684d6e813"></p>
</li>
</ul>
<h2 id="資訊來源"><a href="#資訊來源" class="headerlink" title="資訊來源"></a>資訊來源</h2><ul>
<li>六角學院 : Vue 3 實戰影音課程</li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Vue3</tag>
      </tags>
  </entry>
  <entry>
    <title>淺談 Box-Model 盒模型</title>
    <url>/html-css/20230327/3889239367/</url>
    <content><![CDATA[<h2 id="Box-Model-盒模型"><a href="#Box-Model-盒模型" class="headerlink" title="Box Model 盒模型"></a>Box Model 盒模型</h2><p>Box Model 盒模型主要由四個部分組成，由內而外分別是 content、<code>padding</code>、<code>border</code>、<code>margin</code>。CSS 裏面，HTML 的每個元素都可以被視為一個盒子 ( Box Model 盒模型 )，可使用 <code>padding</code>、<code>border</code>、<code>margin</code> 對這個盒子做調整。</p>
<p>content 為盒子的原尺寸，而 <code>padding</code>、<code>border</code> 的使用會影響此盒子的尺寸，所以可以搭配 <code>box-sizing:border-box;</code> 就不會增加盒子本身的尺寸。</p>
<h2 id="CSS-屬性-margin-、-padding、border"><a href="#CSS-屬性-margin-、-padding、border" class="headerlink" title="CSS 屬性 margin 、 padding、border"></a>CSS 屬性 margin 、 padding、border</h2><h3 id="margin-外距"><a href="#margin-外距" class="headerlink" title="margin 外距"></a>margin 外距</h3><ul>
<li><p>推盒模型的「 外 」邊距。</p>
</li>
<li><p><a href="https://codepen.io/echocarriet/pen/WNzvyWq">CodePen 範例程式碼</a>中，box1 元素向<strong>外</strong>面右邊推了 box2 元素 50px 距離。</p>
<p>  <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E6%B7%BA%E8%AB%87%20Box%20Model%20%E7%9B%92%E6%A8%A1%E5%9E%8B_01.jpg?alt=media&token=6aba6421-7f49-4ca3-ba22-dc81eeca8c3f" alt="margin 外距示意圖 ▲"></p>
</li>
</ul>
<h3 id="padding-內距"><a href="#padding-內距" class="headerlink" title="padding 內距"></a>padding 內距</h3><ul>
<li><p>增加盒模型「 內 」的留白距離。</p>
</li>
<li><p><a href="https://codepen.io/echocarriet/pen/abYOKMJ">CodePen 範例程式碼</a> 中，div 標籤的盒模型向<strong>內</strong>往四周推了 30px 的距離 ( 綠色範圍處 )，div 盒模型內的子層文字內縮了 30px 的距離。</p>
<p>  <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E6%B7%BA%E8%AB%87%20Box%20Model%20%E7%9B%92%E6%A8%A1%E5%9E%8B_02.png?alt=media&token=c46089d2-dda7-44c4-b5f6-3a5f48f4b1ca" alt="padding 內距示意圖 ▲"></p>
</li>
</ul>
<h3 id="border-邊框"><a href="#border-邊框" class="headerlink" title="border 邊框"></a>border 邊框</h3><p>圍繞盒模型周圍的邊框。( 下圖黃色範圍 <a href="https://codepen.io/echocarriet/pen/RwMPyQa">CodePen 程式碼</a> )</p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E6%B7%BA%E8%AB%87%20Box%20Model%20%E7%9B%92%E6%A8%A1%E5%9E%8B_03.png?alt=media&token=a23416ed-a9a2-4183-abda-0cc31da313f5" alt="border 邊框示意圖 ▲"></p>
<h2 id="Box-Model-區塊模型中使用-margin、padding、border-帶來的變化"><a href="#Box-Model-區塊模型中使用-margin、padding、border-帶來的變化" class="headerlink" title="Box Model 區塊模型中使用 margin、padding、border 帶來的變化"></a><strong><strong>Box Model 區塊模型中使用 margin、padding、border 帶來的變化</strong></strong></h2><h3 id="使用-margin"><a href="#使用-margin" class="headerlink" title="使用 margin"></a><strong>使用 margin</strong></h3><p><code>margin</code> 是推<strong>外</strong>邊界，所以不會影響 box 的原始尺寸。<a href="https://codepen.io/echocarriet/pen/WNzvyWq">CodePen 程式碼</a></p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E6%B7%BA%E8%AB%87%20Box%20Model%20%E7%9B%92%E6%A8%A1%E5%9E%8B_04.jpg?alt=media&token=3f4085a5-f90f-4635-83cc-195e08158928" alt="使用 margin 示意圖 ▲"></p>
<h3 id="使用-padding-與-border"><a href="#使用-padding-與-border" class="headerlink" title="使用 padding 與 border"></a><strong>使用 padding 與 border</strong></h3><ul>
<li>盒模型使用 <code>padding</code> 與 <code>border</code> 皆會改變 box 的原始尺寸，盒模型由 300 x 300 → 316 x 316。</li>
<li>解決方式 : 可使用 <code>box-sizing: border-box;</code> 來解決尺寸問題，下方會有解說。</li>
</ul>
<p><img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E6%B7%BA%E8%AB%87%20Box%20Model%20%E7%9B%92%E6%A8%A1%E5%9E%8B_05.jpg?alt=media&token=ef6fc25a-14b9-4eef-9f4c-846691fe82d7" alt="使用 padding 與 border 示意圖 ▲"></p>
<h2 id="範例-｜計算-Box-Model-盒模型尺寸"><a href="#範例-｜計算-Box-Model-盒模型尺寸" class="headerlink" title="範例 ｜計算 Box Model 盒模型尺寸"></a>範例 ｜計算 Box Model 盒模型尺寸</h2><h3 id="下方為-box-資訊，請問最終-box-的大小？"><a href="#下方為-box-資訊，請問最終-box-的大小？" class="headerlink" title="下方為 box 資訊，請問最終 box 的大小？"></a>下方為 box 資訊，請問最終 box 的大小？</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line"> <span class="attribute">width</span>:<span class="number">300px</span>;</span><br><span class="line"> <span class="attribute">height</span>:<span class="number">300px</span>;</span><br><span class="line"> <span class="attribute">background</span>: <span class="number">#000</span>;</span><br><span class="line"> <span class="attribute">padding-right</span>:<span class="number">50px</span>;</span><br><span class="line"> <span class="attribute">border</span>:<span class="number">10px</span> solid red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>margin</code> 不會影響 box 大小，只有 <code>padding</code> 與 <code>border</code> 會有影響。</li>
<li>box 尺寸運算方式為 ：<ul>
<li><p>width : 300px + 50px ( <code>padding-right</code> ) + 20px ( 左右 <code>boder</code> ) &#x3D; 370px。</p>
</li>
<li><p>height : 300px + 20px ( 左右 <code>boder</code> ) &#x3D; 320px。</p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E6%B7%BA%E8%AB%87%20Box%20Model%20%E7%9B%92%E6%A8%A1%E5%9E%8B_06.jpg?alt=media&token=d6e0bfd5-e8ef-4f38-a6e2-8a52c31f907f" alt="示意圖 ▲"></p>
</li>
</ul>
</li>
</ul>
<p><img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E6%B7%BA%E8%AB%87%20Box%20Model%20%E7%9B%92%E6%A8%A1%E5%9E%8B_07.png?alt=media&token=a62897b6-f311-433a-b4f3-385dca37411e" alt="圖片來源 : 六角學院 ▲"></p>
<h2 id="解決盒模型內-padding-與-border-帶來的影響，可使用-box-sizing-border-box"><a href="#解決盒模型內-padding-與-border-帶來的影響，可使用-box-sizing-border-box" class="headerlink" title="解決盒模型內 padding 與 border 帶來的影響，可使用 box-sizing:border-box"></a>解決盒模型內 padding 與 border 帶來的影響，可使用 box-sizing:border-box</h2><p>當你設定一個元素樣式為 <code>box-sizing: border-box;</code>，這個元素的 <code>padding</code> 和 <code>border</code> 將不會增加元素本身的寬度。</p>
<ul>
<li><p>css3 新語法。</p>
</li>
<li><p><code>box-sizing: border-box;</code> 對 <code>margin</code> 是無效的， <code>margin</code> 本來就不會對元素的大小有影響。</p>
</li>
<li><p>如果整個網頁都會用到  <code>box-sizing:border-box;</code> 可統一寫在一起，加入 <code>*</code> 星號，讓所有的 HTML 吃到此標籤。</p>
  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*,*<span class="selector-pseudo">:before</span>,*<span class="selector-pseudo">:after</span>&#123;</span><br><span class="line"><span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 <code>box-sizing</code> 與未使用 <code>box-sizing</code> 差異，可參考此 <a href="https://codepen.io/echocarriet/pen/YzaXvRe">CodePen 範例程式碼</a> 搭配開發人員工具做查看。</p>
</li>
</ul>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li>六角學院 : 使用 HTML、CSS 開發一個網站</li>
<li><a href="https://www.wibibi.com/info.php?tid=CSS_box_model_%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B">Wibibi - CSS box model</a></li>
<li><a href="https://www.oxxostudio.tw/articles/202008/css-box-model.html">深入理解 CSS Box Model ( 盒子模型 )</a></li>
</ul>
]]></content>
      <categories>
        <category>HTML&amp;CSS</category>
      </categories>
      <tags>
        <tag>Box Model</tag>
        <tag>盒模型</tag>
        <tag>margin</tag>
        <tag>padding</tag>
        <tag>border</tag>
        <tag>box-sizing</tag>
      </tags>
  </entry>
  <entry>
    <title>簡述 Vue Cli 並以 GUI 介面操作</title>
    <url>/vue/20230327/1792293064/</url>
    <content><![CDATA[<h2 id="為什麼要用-Vue-Cli"><a href="#為什麼要用-Vue-Cli" class="headerlink" title="為什麼要用 Vue Cli"></a>為什麼要用 Vue Cli</h2><ol>
<li>前端開發日益複雜，每個開發者習慣亦有很大不同，因此整合性的工具可以減少彼此開發上的差異。</li>
<li>編譯環境越來越複雜，缺乏整合工具將會在每次專案都耗去大量時間。</li>
<li>前後端分離形成主流，單頁式應用程式更符合開發習慣。</li>
<li>套件引用越來越多，導致難以管理。</li>
</ol>
<h2 id="Vue-Cli-是甚麼"><a href="#Vue-Cli-是甚麼" class="headerlink" title="Vue Cli 是甚麼"></a>Vue Cli 是甚麼</h2><p><img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E7%B0%A1%E8%BF%B0%20Vue%20Cli%20%E4%B8%A6%E4%BB%A5%20GUI%20%E4%BB%8B%E9%9D%A2%E6%93%8D%E4%BD%9C_01.png?alt=media&token=5fff4ed3-baa5-4c33-9ffc-0fe2d2721977" alt="Webpack 整合了哪些開發環境 ▲"></p>
<ol>
<li><p>基於 Webpack 所建置的開發工具。</p>
</li>
<li><p>變於使用各種第三方套件 ( BS4、Vue Router ..  )。</p>
</li>
<li><p>可運行 Sass，Bebel 等編譯工具。</p>
</li>
<li><p>獨特 .vue 檔案，一次包含 html 、js、css 。</p>
<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E7%B0%A1%E8%BF%B0%20Vue%20Cli%20%E4%B8%A6%E4%BB%A5%20GUI%20%E4%BB%8B%E9%9D%A2%E6%93%8D%E4%BD%9C_02.png?alt=media&token=576b3b63-c16f-43cf-9a71-675efa87106b"></p>
</li>
<li><p>便於開發 SPA 的網頁工具 ( SPA 原文為 single-page-applicaiton，稱為<strong>單頁式應用程式</strong> )</p>
<ul>
<li><p>傳統的路每次進入頁面就會重新載入頁面所有的資源 ( 不管此頁面的某些區塊是否之前有載入過 )，所以會產生一次性地閃爍，會影響載入速度與使用者體驗。</p>
<p>  <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E7%B0%A1%E8%BF%B0%20Vue%20Cli%20%E4%B8%A6%E4%BB%A5%20GUI%20%E4%BB%8B%E9%9D%A2%E6%93%8D%E4%BD%9C_03.png?alt=media&token=3bec332d-9247-44b3-b70c-5c5f28b6e905"></p>
</li>
<li><p>SPA 載入是由前端來管理路由，路由上面會多一個 # 字號。在第一次進入網頁就會載入大部分資源，切換頁面時則會重新渲染不同的部分。 像 layout 在第一次進入頁面已經載入的情況下，到了其他頁面就不會再重新載入，只會重新渲染沒有載入過的部分。這樣每次進入新的頁面就不會產生一次性地閃爍。<br> 後端會透過 API 形式往前端送，前端再把這些資料整理到畫面上。<br> 進到頁面會從後端去取得資料，再把這些資料重新渲染到畫面上。</p>
<p>  <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E7%B0%A1%E8%BF%B0%20Vue%20Cli%20%E4%B8%A6%E4%BB%A5%20GUI%20%E4%BB%8B%E9%9D%A2%E6%93%8D%E4%BD%9C_04.png?alt=media&token=3267d95e-71d1-49e1-90a1-7eb7cd4ad358"></p>
</li>
</ul>
</li>
</ol>
<h2 id="關於-Cli"><a href="#關於-Cli" class="headerlink" title="關於 Cli"></a>關於 Cli</h2><p>Cli 原文為 Command-Line Interface， 簡單來說就是命令列介面。 ( windows 會開啟命令提示字元，Mac 會開啟終端機 )</p>
<h2 id="Vue-同時提供-GUI-的介面"><a href="#Vue-同時提供-GUI-的介面" class="headerlink" title="Vue 同時提供 GUI 的介面"></a>Vue 同時提供 GUI 的介面</h2><p><img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E7%B0%A1%E8%BF%B0%20Vue%20Cli%20%E4%B8%A6%E4%BB%A5%20GUI%20%E4%BB%8B%E9%9D%A2%E6%93%8D%E4%BD%9C_05.png?alt=media&token=1fa8b7ea-384f-493d-86ef-ad09193fdf54" alt="// Vue GUI 介面"></p>
<h2 id="指令太麻煩，來試試看-GUI-吧"><a href="#指令太麻煩，來試試看-GUI-吧" class="headerlink" title="指令太麻煩，來試試看 GUI 吧"></a>指令太麻煩，來試試看 GUI 吧</h2><p>Vue cli 與 UI 運行完的結果是一樣的，可擇一使用。</p>
<ol>
<li><p>終端機輸入 <code>vue ui</code> 會開啟介面。</p>
<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E7%B0%A1%E8%BF%B0%20Vue%20Cli%20%E4%B8%A6%E4%BB%A5%20GUI%20%E4%BB%8B%E9%9D%A2%E6%93%8D%E4%BD%9C_06.png?alt=media&token=b3cd18c5-f4bc-4202-b461-880df0ba38f0" alt="// 第一次開啟的介面回呈現 ▲"></p>
<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E7%B0%A1%E8%BF%B0%20Vue%20Cli%20%E4%B8%A6%E4%BB%A5%20GUI%20%E4%BB%8B%E9%9D%A2%E6%93%8D%E4%BD%9C_07.png?alt=media&token=843111cb-1887-4b26-86ea-a3dbc1ea0031" alt="// 之前已使用過會開啟某一個專案"></p>
</li>
<li><p>上方已經有使用 cli 新增裝案，就可以選取 “ 匯入 “ 方式來把專案匯入。</p>
</li>
<li><p>如要建立新專案</p>
<ol>
<li><p>終端機輸入 <code>vue ui</code> 會開啟介面 → 新增</p>
<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E7%B0%A1%E8%BF%B0%20Vue%20Cli%20%E4%B8%A6%E4%BB%A5%20GUI%20%E4%BB%8B%E9%9D%A2%E6%93%8D%E4%BD%9C_08.png?alt=media&token=af4d3bde-4441-40e1-ac5f-3170220f85b2" alt="// Vue GUI 介面"></p>
</li>
<li><p>選擇檔案要放置的路徑 ( 這邊選取桌面的 practiveVue 資料夾 ) → 按下 + 在此新增專案 → 填寫資料 → 接下來會出現一連串類似 vue cli 設定的選項 :</p>
<ol>
<li>選擇一套模板 : <code>手動</code></li>
<li>選擇功能 : <code>Choose Vue version、Babel、Router、CSS Pre-processors、Linter / Formatter</code> 。</li>
<li>Choose a version of Vue.js that you want to start the project with : <code>3.X</code></li>
<li>Use history mode for router?  <code>不開啟</code> ( 開啟的話伺服器是需要進行重新設定的 )</li>
<li>Pick a CSS pre-processor :  <code>Sass/SCSS (with node-sass)</code></li>
<li>Pick a linter &#x2F; formatter config : <code>ESLint + Standard config</code> ( 可看<a href="https://www.notion.so/Vue-Cli-GUI-ba33df715e424464990115bf5493d4f8">上方設定解說</a> )</li>
<li>Pick additional lint features:</li>
</ol>
<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E7%B0%A1%E8%BF%B0%20Vue%20Cli%20%E4%B8%A6%E4%BB%A5%20GUI%20%E4%BB%8B%E9%9D%A2%E6%93%8D%E4%BD%9C_09.png?alt=media&token=e729cbaa-e02c-4ea1-ba9d-a0c7dc80488f" alt="// Vue GUI 介面"></p>
<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E7%B0%A1%E8%BF%B0%20Vue%20Cli%20%E4%B8%A6%E4%BB%A5%20GUI%20%E4%BB%8B%E9%9D%A2%E6%93%8D%E4%BD%9C_010.png?alt=media&token=6b6f5a9a-8b2b-41ca-a806-e935e0bbac60" alt="// Vue GUI 介面"></p>
</li>
<li><p>設定完後會詢問是否要保這些這訂做保留，先按不保存。</p>
</li>
</ol>
<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E7%B0%A1%E8%BF%B0%20Vue%20Cli%20%E4%B8%A6%E4%BB%A5%20GUI%20%E4%BB%8B%E9%9D%A2%E6%93%8D%E4%BD%9C_011.png?alt=media&token=df902953-85d3-4acd-9973-cea5a1de8ab9" alt="// Vue GUI 介面"></p>
<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E7%B0%A1%E8%BF%B0%20Vue%20Cli%20%E4%B8%A6%E4%BB%A5%20GUI%20%E4%BB%8B%E9%9D%A2%E6%93%8D%E4%BD%9C_012.png?alt=media&token=1d46a7ae-80a5-433d-872c-3d72fc3e3fb2" alt="CUI 安裝同時，終端機也會一起做奔跑 ▲"></p>
</li>
<li><p>專案建立完成會呈現下方樣式</p>
<ul>
<li>插件選單 : 會影響到 webpack 運行的功能，這些套件都是在專案安裝過程我們選好的，所以不太會去調整它。</li>
<li>依賴選單 : 不會直接影響到 webpack 運行，獲這些項目是相依於插件選單內的套件所使用的。如果開發過程要引入其他插件也會在依賴選單這邊做選擇。如果要安裝 Bootstrap 會於此做安裝。</li>
<li>任務選單 :<ul>
<li>裡面的 serve 裡的執行按鈕，如同 vue cil 中終端機運行 <code>npm run serve</code> 指令，可把專案環境運行起來。</li>
<li>serve → 執行完成後，右方的輸入按鈕內的介面如同 vue cli 把環境運行完成後會出現兩個連結 ( Local 、Network ) 按下其中一個就會開啟網頁。</li>
<li>編譯 → 執行完成後，專案內會出現 dist 資料夾，為專案完整編譯的結果</li>
</ul>
</li>
</ul>
<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E7%B0%A1%E8%BF%B0%20Vue%20Cli%20%E4%B8%A6%E4%BB%A5%20GUI%20%E4%BB%8B%E9%9D%A2%E6%93%8D%E4%BD%9C_013.png?alt=media&token=555265b5-e4ee-4620-bb3a-b5b14af3508e" alt="// Vue GUI 介面"></p>
<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E7%B0%A1%E8%BF%B0%20Vue%20Cli%20%E4%B8%A6%E4%BB%A5%20GUI%20%E4%BB%8B%E9%9D%A2%E6%93%8D%E4%BD%9C_014.png?alt=media&token=2764fedc-4a07-4206-b923-c471fab67385" alt="// Vue GUI 介面"></p>
</li>
</ol>
<h2 id="資訊來源"><a href="#資訊來源" class="headerlink" title="資訊來源"></a>資訊來源</h2><ul>
<li>六角學院 : Vue 3 實戰影音課程</li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Vue3</tag>
      </tags>
  </entry>
  <entry>
    <title>Day1 | CSS 選擇器與權重</title>
    <url>/html-css/20230327/2449098139/</url>
    <content><![CDATA[<h2 id="❒-什麼是-CSS-選擇器"><a href="#❒-什麼是-CSS-選擇器" class="headerlink" title="❒ 什麼是 CSS 選擇器"></a>❒ 什麼是 CSS 選擇器</h2><p>CSS 選擇器可調整元素樣式。如下程式碼中，<code>p</code> 為選擇器，括號 <code>&#123;&#125;</code> 內為想要調整成的樣式。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line"> <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="❒-選擇器分類"><a href="#❒-選擇器分類" class="headerlink" title="❒ 選擇器分類"></a>❒ 選擇器分類</h2><ol>
<li>基本選擇器<ol>
<li>類別選擇器</li>
<li>class 選擇器</li>
<li>ID 選擇器</li>
<li>通用選擇器</li>
<li>屬性選擇器</li>
<li>狀態選擇器</li>
</ol>
</li>
<li>複合選擇器<ol>
<li>子選擇器 ( 直屬選擇器 ) <code>X &gt; Y</code></li>
<li>後代選擇器 <code>X Y</code></li>
<li>相鄰兄弟選擇器 ( 鄰接同層選擇器 ) <code>X + Y</code></li>
<li>通用兄弟選擇器 <code>X ~ Y</code></li>
</ol>
</li>
<li>偽元素</li>
<li>虛擬類別</li>
</ol>
<p>下方只針對幾個比較常用的做整理。</p>
<h2 id="❒-複合選擇器"><a href="#❒-複合選擇器" class="headerlink" title="❒ 複合選擇器"></a>❒ 複合選擇器</h2><h3 id="⠿-直屬選擇器-X-gt-Y"><a href="#⠿-直屬選擇器-X-gt-Y" class="headerlink" title="⠿ 直屬選擇器 X &gt; Y"></a>⠿ 直屬選擇器 X &gt; Y</h3><p>只有 X 直屬子層 Y 會有作用。</p>
<p><strong>實作 1. 讓 li.item 直屬子層的 p 段落文字變紅色 <a href="https://codepen.io/echocarriet/pen/vYjNZqX">CodePen 程式碼</a></strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>item<span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="comment">&lt;!--紅色文字--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;inList&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;inItem&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>inItem<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>item<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="comment">&lt;!--紅色文字--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inbox&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>item<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="⠿-後代選擇器-X-Y"><a href="#⠿-後代選擇器-X-Y" class="headerlink" title="⠿ 後代選擇器 X Y"></a>⠿ 後代選擇器 X Y</h3><p>X 不管到第幾代的子層 Y 都會有作用</p>
<p><strong>實作 1. 與直屬選擇器相同範例，使用後代選擇器則子層的文字皆會變紅色 <a href="https://codepen.io/echocarriet/pen/JjvYyGd">CodePen 程式碼</a></strong></p>
<h3 id="⠿-相鄰兄弟選擇器-X-Y"><a href="#⠿-相鄰兄弟選擇器-X-Y" class="headerlink" title="⠿ 相鄰兄弟選擇器 X + Y"></a>⠿ 相鄰兄弟選擇器 X + Y</h3><p>需與 X 相鄰的下一個同層 Y 才會吃到 CSS 樣式。</p>
<p><strong>實作 1. 讓 333 文字變藍色 <a href="https://codepen.io/echocarriet/pen/VwxvWxY">CodePen 程式碼</a></strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text1&quot;</span>&gt;</span>111<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text2&quot;</span>&gt;</span>222<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text3&quot;</span>&gt;</span>333<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="⠿-通用兄弟選擇器-X-Y"><a href="#⠿-通用兄弟選擇器-X-Y" class="headerlink" title="⠿ 通用兄弟選擇器 X ~ Y"></a>⠿ 通用兄弟選擇器 X ~ Y</h3><p>於 X 同層且在後方的 Y 元素皆會執行 CSS 設定。</p>
<p><strong>實作 1. 從文字３至文字６皆為紅色 <a href="https://codepen.io/echocarriet/pen/oNdjwVX">CodePen 程式碼</a></strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text1&quot;</span>&gt;</span>文字１<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text2&quot;</span>&gt;</span>文字２<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text3&quot;</span>&gt;</span>文字３<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text4&quot;</span>&gt;</span>文字４<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text5&quot;</span>&gt;</span>文字５<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text6&quot;</span>&gt;</span>文字６<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="⠿-X-nth-child-n"><a href="#⠿-X-nth-child-n" class="headerlink" title="⠿ X:nth-child(n)"></a>⠿ X:nth-child(n)</h3><ul>
<li><code>X:nth-child(n)</code>  參數 n 從 1 開始，如果要指向第一個元素  <code>nth-child(1)</code> 。</li>
<li><code>X:nth-child(數字n)</code> 參數中數字的倍數皆會執行 css 效果。</li>
</ul>
<p><strong>實作範例 <a href="https://codepen.io/echocarriet/pen/pogwKzd">CodePen 程式碼</a></strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"> <span class="comment">&lt;!--括號中的參數從1開始--&gt;</span></span></span><br><span class="line"><span class="language-xml"> li:nth-child(3)&#123;</span></span><br><span class="line"><span class="language-xml">   color:red;</span></span><br><span class="line"><span class="language-xml"> &#125;</span></span><br><span class="line"><span class="language-xml"> <span class="comment">&lt;!--2n 即2的倍數的li皆會執行效果--&gt;</span></span></span><br><span class="line"><span class="language-xml"> li:nth-child(2n)&#123;</span></span><br><span class="line"><span class="language-xml">   color:green;</span></span><br><span class="line"><span class="language-xml"> &#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>tex 01<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>tex 02<span class="tag">&lt;/<span class="name">li</span>&gt;</span> <span class="comment">&lt;!--green--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>tex 03<span class="tag">&lt;/<span class="name">li</span>&gt;</span> <span class="comment">&lt;!--redn--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>tex 04<span class="tag">&lt;/<span class="name">li</span>&gt;</span> <span class="comment">&lt;!--green--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>tex 05<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>tex 06<span class="tag">&lt;/<span class="name">li</span>&gt;</span> <span class="comment">&lt;!--green--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>tex 07<span class="tag">&lt;/<span class="name">li</span>&gt;</span> <span class="comment">&lt;!--red--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>tex 08<span class="tag">&lt;/<span class="name">li</span>&gt;</span> <span class="comment">&lt;!--green--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="⠿-X-nth-last-child-n"><a href="#⠿-X-nth-last-child-n" class="headerlink" title="⠿ X:nth-last-child(n)"></a>⠿ X:nth-last-child(n)</h3><ul>
<li><code>X:nth-last-child(n)</code> 倒數參數 n 開始執行 CSS 樣式。</li>
</ul>
<h3 id="⠿-X-first-child-與-X-last-child"><a href="#⠿-X-first-child-與-X-last-child" class="headerlink" title="⠿ X:first-child 與 X:last-child"></a>⠿ X:first-child 與 X:last-child</h3><ul>
<li><code>X:first-child</code> 指向 X 第一個元素</li>
<li><code>X:last-child</code> 指向 X 最後一個元素</li>
</ul>
<p><a href="https://codepen.io/echocarriet/pen/OJZyjjv">CodePen 程式碼 01</a></p>
<p><a href="https://codepen.io/echocarriet/pen/qBbjKgO">CodePen 程式碼 02 - 選單下底線範例</a></p>
<h2 id="❒-偽元素"><a href="#❒-偽元素" class="headerlink" title="❒ 偽元素"></a>❒ 偽元素</h2><h3 id="⠿-not"><a href="#⠿-not" class="headerlink" title="⠿ :not"></a>⠿ <code>:not</code></h3><p><code>:not</code> : 為 CSS 偽類，可排除特定的元素被選中。</p>
<h3 id="範例-1-在多個-p-段落中，排除第一個-p-段落文字變紅色"><a href="#範例-1-在多個-p-段落中，排除第一個-p-段落文字變紅色" class="headerlink" title="範例 1. 在多個 p 段落中，排除第一個 p 段落文字變紅色"></a>範例 1. 在多個 p 段落中，排除第一個 p 段落文字變紅色</h3><p><a href="https://www.notion.so/CSS-not-e4e44072fb79496fa2917fafe42f8e16">CodePen 範例程式</a><a href="https://codepen.io/echocarriet/pen/WNMGeWv">碼</a></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:not</span>(<span class="selector-pseudo">:first</span>-child) &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="❒-CSS-權重"><a href="#❒-CSS-權重" class="headerlink" title="❒ CSS 權重"></a>❒ CSS 權重</h2><blockquote>
<p><strong>先看權重，再看先後</strong></p>
</blockquote>
<ul>
<li>任何元素選擇符 <code>*</code> : 0 分 ，沒有權級。</li>
<li><code>HTML</code> 標籤 ( 元素選擇器 )、偽元素選擇器：1 分。<ul>
<li><code>h1</code>、<code>p</code>、<code>ul</code>、<code>li</code> 等。</li>
</ul>
</li>
<li><code>class</code> 選擇器、偽類選擇器：10 分。<ul>
<li><code>.title</code> ，前方以點開頭。</li>
</ul>
</li>
<li><code>ID</code> 選擇器：100 分。<ul>
<li><code>#title</code> ，前方以 # 開頭。</li>
<li>因為 ID 選擇器權重較高為 100 分，在寫文件會有樣式覆蓋上的麻煩，所以不建議於 CSS 使用，除非 js 操作。</li>
</ul>
</li>
<li><code>inline style</code>：1000 分。<ul>
<li><code>&lt;h1 style=&quot; &quot;&gt;title&lt;/h1&gt;</code> ，直接在 HTML 標籤內寫 style。</li>
</ul>
</li>
<li><code>!important</code>：10000 分。<ul>
<li><code>.title2&#123; color:red; &#125; !important</code></li>
</ul>
</li>
</ul>
<h2 id="❒-權重分數運算"><a href="#❒-權重分數運算" class="headerlink" title="❒ 權重分數運算"></a>❒ 權重分數運算</h2><ul>
<li><code>.title h1 &#123;&#125;</code> →  10+1&#x3D;11 ( class 選擇器 + HTML 標籤 )</li>
<li><code>.qa-lost__title-link</code> → 10 ( class 選擇器 )</li>
<li><code>#Stencil .Pos-r</code>→ 100+10&#x3D;110 ( ID 選擇器 + class 選擇器  )</li>
<li><code>#atomic .Py , #atomic .Pt</code> → 100+10&#x3D;110 (  <strong>逗號不會有加分作用</strong>； ID 選擇器 + class 選擇器 )</li>
<li><code>.on_sale li a , .sale_category li a , .sale_news li a</code> → 10+1+1&#x3D;12 ( class 選擇器 + HTML 標籤 + HTML 標籤 )</li>
<li>眾多一分的權重是會壓過一個十分的權重的。<ul>
<li><code>.h2 .h2 .h2 .h2 .h2 .h2 .h2 .h2 .h2 .h2</code> &gt; <code>.h2</code></li>
</ul>
</li>
<li>權重相同時，後方會蓋掉前方設定。</li>
</ul>
<h2 id="❒-CSS-權重相關範例"><a href="#❒-CSS-權重相關範例" class="headerlink" title="❒ CSS 權重相關範例"></a>❒ CSS 權重相關範例</h2><h3 id="Q1-h1-文字顏色為"><a href="#Q1-h1-文字顏色為" class="headerlink" title="Q1. h1 文字顏色為 ?"></a>Q1. h1 文字顏色為 ?</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;title title2&quot;</span>&gt;</span>TITLE<span class="tag">&lt;/<span class="name">h1</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.title2</span>&#123;</span><br><span class="line"> <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.title</span>&#123;</span><br><span class="line"> <span class="attribute">color</span>:blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>答案： 1. 藍色 ( 這邊不管 HTML 的先後順序，以 CSS 先後順序為優先。)</p>
<h3 id="Q2-螢幕解析度在-769px-時，h1-文字顏色為"><a href="#Q2-螢幕解析度在-769px-時，h1-文字顏色為" class="headerlink" title="Q2. 螢幕解析度在 769px 時，h1 文字顏色為 ?"></a>Q2. 螢幕解析度在 769px 時，h1 文字顏色為 ?</h3><h3 id="Q3-螢幕解析度在-568px-時，h1-文字顏色為"><a href="#Q3-螢幕解析度在-568px-時，h1-文字顏色為" class="headerlink" title="Q3. 螢幕解析度在 568px 時，h1 文字顏色為 ?"></a>Q3. 螢幕解析度在 568px 時，h1 文字顏色為 ?</h3><h3 id="Q4-螢幕解析度在-320px-時，幾個-title-會被開啟"><a href="#Q4-螢幕解析度在-320px-時，幾個-title-會被開啟" class="headerlink" title="Q4. 螢幕解析度在 320px 時，幾個 .title 會被開啟 ?"></a>Q4. 螢幕解析度在 320px 時，幾個 .title 會被開啟 ?</h3><p>Q2 ~ Q4 程式碼 ↓</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>TITLE<span class="tag">&lt;/<span class="name">h1</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.title</span>&#123;</span><br><span class="line"> <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span>(max-width:768px&#123;</span><br><span class="line"> <span class="selector-class">.title</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>:blue;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span>(max-width:375px&#123;</span><br><span class="line"> <span class="selector-class">.title</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>:yellow;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>答案：Q2. 紅色<br>答案：Q3. 藍色<br>答案：Q4. 三個 .title 都會被開啟，只是上方第一個與第二個會被 <code>@media(max-width:375px&#123; &#125;</code> 的覆蓋掉。<br><img src="https://ithelp.ithome.com.tw/upload/images/20220915/20119743e3xEfsK9IC.png" alt="// 圖片來源 : 六角學院 ▲"></p>
<h3 id="Q5-根據以下-CSS，在螢幕解析度-600px-時文字的顏色為何"><a href="#Q5-根據以下-CSS，在螢幕解析度-600px-時文字的顏色為何" class="headerlink" title="Q5. 根據以下 CSS，在螢幕解析度 600px 時文字的顏色為何 ?"></a>Q5. 根據以下 CSS，在螢幕解析度 600px 時文字的顏色為何 ?</h3><p>A. 紅色  B. 黑色  C. 黃色  D. 藍色</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">576px</span>)&#123;</span><br><span class="line">    <span class="selector-tag">p</span> &#123; </span><br><span class="line">        <span class="attribute">color</span>: red;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">768px</span>)&#123;</span><br><span class="line">    <span class="selector-tag">p</span> &#123; </span><br><span class="line">        <span class="attribute">color</span>: black; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123; <span class="attribute">color</span>: yellow; &#125;</span><br></pre></td></tr></table></figure>

<p>答案： C 黃色 ( <strong>先看權重再看先後</strong>，上方權重皆為 1 ，所以後方的 <code>p</code> 會覆蓋掉斷點中的 <code>p</code> 設定。)</p>
<h2 id="參考資訊"><a href="#參考資訊" class="headerlink" title="參考資訊"></a>參考資訊</h2><ul>
<li><a href="https://developer.mozilla.org/zh-TW/docs/Glossary/CSS_Selector">MDN - CSS 選擇器</a></li>
<li>偽元素選擇器<ul>
<li><a href="https://www.delftstack.com/zh-tw/howto/css/css-not-first-child/">在 CSS 中選擇非第一個子元素的方法</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:not">MDN - :not()</a></li>
</ul>
</li>
<li>六角學院</li>
</ul>
]]></content>
      <categories>
        <category>HTML&amp;CSS</category>
      </categories>
      <tags>
        <tag>2022年iThome鐵人賽</tag>
        <tag>權重</tag>
      </tags>
  </entry>
  <entry>
    <title>Day10 | 你有正確清除浮動 float 嗎 ?</title>
    <url>/html-css/20230327/1954621280/</url>
    <content><![CDATA[<h2 id="❒-為什麼要清除浮動"><a href="#❒-為什麼要清除浮動" class="headerlink" title="❒ 為什麼要清除浮動"></a>❒ 為什麼要清除浮動</h2><p>父元素在未設定高度的情況下，是無法被撐開呈一個容器，所以會由裡面的子元素去撐開它。 但當子元素使用到 float 浮動，會造成左鄰右舍集體大爆走，導致父元素無法判斷子元素而無法被撐開。 這時就需使用清除浮動，讓使用 float 的子元素可以按規則在容器中移動。</p>
<h2 id="❒-怎麼清除浮動"><a href="#❒-怎麼清除浮動" class="headerlink" title="❒ 怎麼清除浮動?"></a>❒ 怎麼清除浮動?</h2><p>清除浮動的方式有很多種，這邊在父元素使用<strong>偽元素清除浮動</strong>的方式，程式碼如下:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">  <span class="attribute">content</span>:<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="attribute">display</span>:table;</span><br><span class="line">  <span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="▷-下方用選單範例來看看，未使用清除浮動與使用清除浮動的差異"><a href="#▷-下方用選單範例來看看，未使用清除浮動與使用清除浮動的差異" class="headerlink" title="▷ 下方用選單範例來看看，未使用清除浮動與使用清除浮動的差異"></a>▷ 下方用選單範例來看看，未使用清除浮動與使用清除浮動的差異</h3><p><strong>❶ 範例. 父層 <code>.header</code> 中加入靠左的 <code>.menu</code></strong></p>
<p><a href="https://codepen.io/echocarriet/pen/MWWagXp">CodePen 範例</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;menu clearfix&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>menu1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>menu2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>menu3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>選單靠左，<code>.menu li</code> 使用 <code>float:left;</code> 未做清除浮動，父元素 <code>.header</code> 無法判斷高度 ( 高度消失 )，下面的 <code>.content</code> 見上方有空位就會往上推擠。<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20220925/20119743TdiBqcge4d.png" alt="示意圖"></p>
</li>
<li><p>為了還 <code>.header</code> 一個高度，需做清除浮動動作。要清除浮動的內容在父元素加上 clearfix 的 class 。</p>
</li>
<li><p>選單 <code>.menu li</code> 使用 float ，需在它的父元素 <code>.menu</code> 加上 clearfix 的 class。清除動作完成後，子元素與左鄰右舍歸隊，父元素能正確判斷子元素，高度完整被撐開。</p>
  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line"><span class="attribute">content</span>:<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="attribute">display</span>:table;</span><br><span class="line"><span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  <img src="https://ithelp.ithome.com.tw/upload/images/20220925/20119743lqEwDre1Eu.png" alt="示意圖"></p>
</li>
</ul>
<p><strong>❷ 範例. 父層 .header 中加入 ➀ 靠左的 logo ② 靠右的 menu</strong></p>
<p><a href="https://codepen.io/echocarriet/pen/eYYpYQb">CodePen 範例</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header clearfix&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;logo&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>六角學院<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;menu clearfix&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>menu1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>menu2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>menu3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://ithelp.ithome.com.tw/upload/images/20220925/20119743BHpjYlZb6H.png" alt="示意圖"></p>
<ul>
<li><p><code>.header</code> 子層中設定 float 屬性，讓 logo 靠左 、選單部分 <code>.menu</code> 靠右 ＆ <code>.menu li</code> 靠左對齊。</p>
  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.logo</span>&#123;</span><br><span class="line"> <span class="attribute">float</span><span class="selector-pseudo">:left</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.menu</span>&#123;</span><br><span class="line"> <span class="attribute">float</span><span class="selector-pseudo">:right</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.menu</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line"> <span class="attribute">float</span><span class="selector-pseudo">:left</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>由上得知，使用到 float 的子元素有 <code>.logo</code> 、<code>.menu</code> 、<code>.menu li</code> ，回到 HTML 中找尋它們的父元素做清除浮動的動作</p>
<ul>
<li><code>.logo</code> 父元素→ <code>.header</code></li>
<li><code>.menu</code> 父元素→ <code>.header</code></li>
<li><code>.menu li</code> 父元素→ <code>.menu</code></li>
</ul>
</li>
</ul>
<hr>
<h2 id="❒-參考資源"><a href="#❒-參考資源" class="headerlink" title="❒ 參考資源"></a>❒ 參考資源</h2><ul>
<li><a href="https://www.hexschool.com/courses/html_css.html">六角學院課程-使用HTML、CSS開發一個網站&#x2F;第五節</a></li>
<li><a href="https://www.youtube.com/watch?v=QwuhilXyNYI">六角學院影片-使用 Chrome 工具檢查浮動的問題(clearfix)</a></li>
</ul>
]]></content>
      <categories>
        <category>HTML&amp;CSS</category>
      </categories>
      <tags>
        <tag>2022年iThome鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>Day12 | 客製 Bootstrap 中的 Utilities</title>
    <url>/bootstrap/20230329/2886543945/</url>
    <content><![CDATA[<h2 id="自定義通用類別-Utilities"><a href="#自定義通用類別-Utilities" class="headerlink" title="自定義通用類別 Utilities"></a>自定義通用類別 Utilities</h2><ul>
<li>文件中 <a href="https://getbootstrap.com/docs/5.1/utilities/api/">Utility API</a> 可透過 Sass 自訂想用的通用類別。</li>
<li>通用類別為一個 className 對應一個 CSS 屬性。</li>
</ul>
<h2 id="客製-Utilities-基本、縮寫、響應式"><a href="#客製-Utilities-基本、縮寫、響應式" class="headerlink" title="客製 Utilities | 基本、縮寫、響應式"></a>客製 Utilities | 基本、縮寫、響應式</h2><p><strong>客製 Utilities 順序：</strong></p>
<ol>
<li>基本設定</li>
<li>自訂義前綴類別 ( 縮寫 ）<ol>
<li>可自行決定是否要設定縮寫，如果沒有就會依上方 1. 中 「 property 屬性值 - values 值 」 為 class 名稱。</li>
</ol>
</li>
<li>響應式通用類別<ol>
<li>如果要開啟響應式，就加上此類別。</li>
</ol>
</li>
</ol>
<h3 id="➊-基本設定"><a href="#➊-基本設定" class="headerlink" title="➊ 基本設定"></a>➊ <a href="https://getbootstrap.com/docs/5.1/utilities/api/#class">基本設定</a></h3><p> <a href="https://getbootstrap.com/docs/5.1/utilities/api/#api-explained">API 說明</a> -  假設在 Utilities 定義一個透明度</p>
<ul>
<li><p>先定義一個透明度的名稱 <code>opacity</code>。</p>
<ul>
<li><p><code>&quot;opacity&quot;:()</code> 括號內為透明度的相關內容。</p>
</li>
<li><p>定義屬性 <code>property</code> 對應 css 屬性 → <code>property: opacity</code></p>
</li>
<li><p>定義透明度有五個階級的值 <code>values</code> : 0 ~ 100 冒號後方接 css 屬性的值。</p>
</li>
<li><p>最後會利用迴圈的形式帶出這些內容。</p>
<pre><code><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$utilities</span>: (</span><br><span class="line">  <span class="string">&quot;opacity&quot;</span>: (</span><br><span class="line">    property: opacity,</span><br><span class="line">    values: (</span><br><span class="line">      <span class="number">0</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="number">25</span>: .<span class="number">25</span>,</span><br><span class="line">      <span class="number">50</span>: .<span class="number">5</span>,</span><br><span class="line">      <span class="number">75</span>: .<span class="number">75</span>,</span><br><span class="line">      <span class="number">100</span>: <span class="number">1</span>,</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
<p><img src="https://ithelp.ithome.com.tw/upload/images/20220927/20119743vr3tPN93oI.png" alt="// 出處：六角學院"></p>
</li>
</ul>
<h3 id="➋-自定義前綴類別-Local-CSS-variables"><a href="#➋-自定義前綴類別-Local-CSS-variables" class="headerlink" title="➋ 自定義前綴類別 Local CSS variables"></a>➋ <a href="https://getbootstrap.com/docs/5.1/utilities/api/#local-css-variables">自定義前綴類別 Local CSS variables</a></h3><ol>
<li><p>承上新增透明度 utilities，加入 <code>class: 自訂縮寫名,</code> 可使用自訂縮寫名來取代 <code>opacity</code>。</p>
<pre><code> <figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$utilities</span>: (</span><br><span class="line">  <span class="string">&quot;opacity&quot;</span>: (</span><br><span class="line">    property: opacity,</span><br><span class="line">  class: o,</span><br><span class="line">    values: (</span><br><span class="line">      <span class="number">0</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="number">25</span>: .<span class="number">25</span>,</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 輸出後</span></span><br><span class="line"><span class="selector-class">.o-0</span> &#123; <span class="attribute">opacity</span>: <span class="number">0</span> <span class="meta">!important</span>; &#125;</span><br><span class="line"><span class="selector-class">.o-25</span> &#123; <span class="attribute">opacity</span>: .<span class="number">25</span> <span class="meta">!important</span>; &#125;</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ol>
<h3 id="➌-響應式通用類別-Responsive"><a href="#➌-響應式通用類別-Responsive" class="headerlink" title="➌ 響應式通用類別 Responsive"></a>➌ <a href="https://getbootstrap.com/docs/5.1/utilities/api/#responsive">響應式通用類別 Responsive</a></h3><ul>
<li><p>於  <code>responsive</code> 加上 <code>true</code> ，就會開啟中斷點的形式 ( 響應式 )。</p>
</li>
<li><p>以上方 <code>opacity</code> 為例，會輸出為 <code>.opacity-&#123;sm,md,lg,xl,xxl&#125;-&#123;0,25,50,75,100&#125;</code>。</p>
<pre><code><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$utilities</span>: (</span><br><span class="line">  <span class="string">&quot;opacity&quot;</span>: (</span><br><span class="line">    property: opacity,</span><br><span class="line">  class: o,</span><br><span class="line">    responsive: true,</span><br><span class="line">    values: (</span><br><span class="line">      <span class="number">0</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="number">25</span>: .<span class="number">25</span>,</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 輸出後</span></span><br><span class="line"><span class="selector-class">.opacity-0</span> &#123; <span class="attribute">opacity</span>: <span class="number">0</span> <span class="meta">!important</span>; &#125;</span><br><span class="line"><span class="selector-class">.opacity-25</span> &#123; <span class="attribute">opacity</span>: .<span class="number">25</span> <span class="meta">!important</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">576px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.opacity-sm-0</span> &#123; <span class="attribute">opacity</span>: <span class="number">0</span> <span class="meta">!important</span>; &#125;</span><br><span class="line">  <span class="selector-class">.opacity-sm-25</span> &#123; <span class="attribute">opacity</span>: .<span class="number">25</span> <span class="meta">!important</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">768px</span>) &#123; ... 同上 &#125;</span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">992px</span>) &#123; ... 同上 &#125;</span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">1200px</span>) &#123; ... 同上 &#125;</span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">1400px</span>) &#123; ... 同上 &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
<h3 id="範例-1-於-utilities-自訂-CSS-屬性"><a href="#範例-1-於-utilities-自訂-CSS-屬性" class="headerlink" title="範例 1. 於 utilities 自訂 CSS 屬性"></a>範例 1. 於 utilities 自訂 CSS 屬性</h3><p>假設要自訂一個「 <code>background-size:cover;</code> 與 <code>background-position:center center;</code> 」。</p>
<p><strong>▷ 操作步驟 ｜<code>background-size:cover;</code>：</strong></p>
<p>➀ 從 node_modules 複製一份 <code>_utilities.scss</code> 檔案存在專案 helpers 資料夾中 ( 資料夾名稱自訂 )。<br>② 開啟複製的 <code>_utilities.scss</code>，把要設定的 <code>background-size:cover;</code> 加入，就會輸出為 <code>.bg-s-cover</code>、<code>.bg-s-contain</code>、<code>.bg-s-50</code>。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 複製的_utilities.scss</span></span><br><span class="line">&quot;<span class="attribute">background-size</span>&quot;: (</span><br><span class="line">  property: background-size,</span><br><span class="line">  class: bg-s,</span><br><span class="line">  values: (</span><br><span class="line">    cover: cover,</span><br><span class="line">    contain: contain,</span><br><span class="line">    <span class="number">50</span>: <span class="number">50%</span>,</span><br><span class="line">  )</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>➂ 開啟 all.scss</p>
<ul>
<li>import 複製的 <code>_utilities.scss</code> 檔案。</li>
<li>加入 Utilities API → <code>@import &quot;../node_modules/bootstrap/scss/utilities/api&quot;;</code></li>
<li>刪除 <code>@import &quot;../node_modules/bootstrap/scss/utilities&quot;;</code> ( 如同客製 variables 檔案一樣 )。</li>
</ul>
<p><strong>▷ 操作步驟 ｜<code>background-position:center center;</code>：</strong></p>
<p>➀ 承上<br>② 開啟複製的 <code>_utilities.scss</code>，把要設定的 <code>background-position</code> 加入，就會輸出為 <code>.bg-p-center</code>。</p>
<pre><code><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 複製的 _utilities.scss</span></span><br><span class="line">&quot;<span class="attribute">background-position</span>&quot;: (</span><br><span class="line">  property: background-position,</span><br><span class="line">  class: bg-p,</span><br><span class="line">  values: (</span><br><span class="line">    center: center center,</span><br><span class="line">  )</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
</code></pre>
<h2 id="資料來源"><a href="#資料來源" class="headerlink" title="資料來源"></a>資料來源</h2><ul>
<li>六角學院 - Bootstrap 5 網頁切版整合術</li>
</ul>
]]></content>
      <categories>
        <category>Bootstrap</category>
      </categories>
      <tags>
        <tag>2022年iThome鐵人賽</tag>
        <tag>bootstrap</tag>
      </tags>
  </entry>
  <entry>
    <title>Day11 | 客製 Bootstrap Sass 樣式</title>
    <url>/bootstrap/20230329/1760453453/</url>
    <content><![CDATA[<h2 id="❒-版本"><a href="#❒-版本" class="headerlink" title="❒ 版本"></a>❒ 版本</h2><p>Bootstrap v5.1</p>
<p>此文章使用 <code>npm i bootstrap@5.2.1</code> 方式載入 Bootstrap</p>
<h2 id="❒-BS-文件客製-Sass-中-Option-A-與-B-差異"><a href="#❒-BS-文件客製-Sass-中-Option-A-與-B-差異" class="headerlink" title="❒ BS 文件客製 Sass 中 Option A 與 B 差異"></a>❒ <a href="https://getbootstrap.com/docs/5.2/customize/sass/">BS 文件客製 Sass</a> 中 Option A 與 B 差異</h2><p>文件 Option A 方式可直接載入完整的 bootstrap，Option B 可選取需要的元件及工具 .. 等進行匯入，但直接載入完整的 bootstrap 怕檔案太肥的話，可選擇使用 Option B 方式。</p>
<h2 id="❒-文件中-Option-A-方法"><a href="#❒-文件中-Option-A-方法" class="headerlink" title="❒ 文件中 Option A 方法"></a>❒ 文件中 Option A 方法</h2><p><strong>範例 :</strong> <a href="https://github.com/echocarriet/vueBsOptionA">Option A GitHub Demo</a> ( Vue )</p>
<p><strong>BS 文件 :</strong>  Customize &#x2F; Sass &#x2F; <a href="https://getbootstrap.com/docs/5.1/customize/sass/#importing">Importting</a> : Option A</p>
<p><strong>於專案使用 npm 載入 BS 後，視需求選擇要「 客製 variables 」或「 客製 variables 與 utilities 」。</strong></p>
<h3 id="❶-Option-A-import-檔案｜客製-variables"><a href="#❶-Option-A-import-檔案｜客製-variables" class="headerlink" title="❶ Option A. @import 檔案｜客製 variables"></a>❶ <strong>Option A.</strong> @import <strong>檔案｜客製 variables</strong></h3><p><strong>步驟 :</strong></p>
<ol>
<li>從 node_modules 中複製一份 _variables 檔案到專案中 ( 下方第 2 支檔案 )，前面記得加上第一支 <code>functions</code> 檔案不然會出錯。</li>
</ol>
<p><strong>▷ Option A</strong> @import <strong>檔案程式碼｜客製 variables</strong></p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&quot;../node_modules/bootstrap/scss/functions&quot;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;./helpers/variables&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;../node_modules/bootstrap/scss/bootstrap&quot;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="❷-Option-A-import-檔案｜客製-variables-與-utilities"><a href="#❷-Option-A-import-檔案｜客製-variables-與-utilities" class="headerlink" title="❷ Option A. @import 檔案｜客製 variables 與 utilities"></a>❷ <strong>Option A.</strong> @import <strong>檔案｜客製 variables 與 utilities</strong></h3><p><strong>步驟 :</strong></p>
<p>➀ 從 node_modules 中複製一份 _variables 檔案到專案中 ( 下方第 2 支檔案 )，前面記得加上第一支 <code>functions</code> 檔案不然會出錯。<br>② 客製 <code>utilities</code> ，與_variables 一樣於 node_modules 中複製一份 <code>_utilities</code> 到專案路徑中下。</p>
<ul>
<li><p>如同 variables 操作，把文件中 <code>node_modules</code> 路徑改成專案放置的路徑。</p>
</li>
<li><p>客製 utilities 需匯入Utilities API。</p>
  <figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&quot;../node_modules/bootstrap/scss/utilities/api</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>utilities 相關設定可參考此<a href="https://www.notion.so/Bootstrap-Sass-69e96475551640b99d410071287054fb">筆記</a>。</p>
</li>
</ul>
<p><strong>▷ Option A. <code>@import</code> 檔案程式碼｜客製 variables 與 utilities</strong></p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&quot;../node_modules/bootstrap/scss/functions&quot;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;./helpers/variables&quot;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;../node_modules/bootstrap/scss/maps&#x27;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;../node_modules/bootstrap/scss/mixins&#x27;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;./helpers/utilities&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;../node_modules/bootstrap/scss/bootstrap&quot;</span>;</span><br><span class="line"><span class="comment">// 客製utilities需匯入Utilities API</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;../node_modules/bootstrap/scss/utilities/api&quot;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="❒-文件中-Option-B-方法"><a href="#❒-文件中-Option-B-方法" class="headerlink" title="❒ 文件中 Option B 方法"></a>❒ 文件中 Option B 方法</h2><p><strong>範例 :</strong></p>
<p><a href="https://github.com/echocarriet/vueBsOptionB">Option B GitHub Demo</a> ( Vue )</p>
<p><strong>BS 文件 :</strong></p>
<p>① Customize &#x2F; Sass &#x2F; <a href="https://getbootstrap.com/docs/5.1/customize/sass/#importing">Importting</a> : Option B<br>② <a href="https://getbootstrap.com/docs/5.1/customize/optimize/">優化 Optimize</a> &#x2F; <a href="https://getbootstrap.com/docs/5.1/customize/optimize/#lean-sass-imports">Lean Sass imports</a></p>
<ul>
<li>第一點的 Option B 可搭配文件中 <a href="https://getbootstrap.com/docs/5.1/customize/optimize/#lean-sass-imports">Lean Sass imports</a> 使用，選取需要的檔案 <code>@import</code>。</li>
<li><strong>於專案使用 npm 載入 BS 後，視需求選擇要「 客製 variables 」或「 客製 variables 與 utilities 」。</strong></li>
<li>Option B 可自行選取要用的 「 components、helpers、Utilities 」，但有些必要的檔案是必須 <code>@import</code> 的，如下：<ul>
<li>文件 <a href="https://getbootstrap.com/docs/5.1/customize/optimize/">優化 Optimize</a> &#x2F; <a href="https://getbootstrap.com/docs/5.1/customize/optimize/#lean-sass-imports">Lean Sass imports</a> 中「 Configuration 」內為必須 <code>@import</code> 的檔案，「 Layout &amp; components、Helpers、Utilities 」為選用的項目。路徑記得要改到 node_modules 下。</li>
<li>‼️ 注意：選用的項目 「 Layout &amp; components 」 中建議保留「 root、reboot、type 」這三個檔案，它們為 BS 的預設值。</li>
</ul>
</li>
</ul>
<h3 id="❶-Option-B-import-檔案｜客製-variables"><a href="#❶-Option-B-import-檔案｜客製-variables" class="headerlink" title="❶ Option B. @import 檔案｜客製 variables"></a>❶ <strong>Option B.</strong> @import <strong>檔案｜客製 variables</strong></h3><p><strong>步驟 :</strong></p>
<p>從 node_modules 中複製一份 _variables 檔案到專案中 ( 下方第 2 支檔案 )，前面記得加上第一支 <code>functions</code> 檔案不然會出錯。</p>
<p><strong>▷ Option B</strong> <code>@import</code> <strong>檔案程式碼｜客製 variables</strong></p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// #1. 必須 import 的檔案</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;../node_modules/bootstrap/scss/functions&quot;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;./helpers/variables&quot;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;../node_modules/bootstrap/scss/maps&#x27;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;../node_modules/bootstrap/scss/mixins&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;../node_modules/bootstrap/scss/utilities&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// #2. 必須 import 的檔案</span></span><br><span class="line"><span class="comment">// 這三支為 BS 的預設值，建議加入必匯入檔案</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;../node_modules/bootstrap/scss/root&quot;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;../node_modules/bootstrap/scss/reboot&quot;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;../node_modules/bootstrap/scss/type&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// #3. 選取需要的檔案匯入</span></span><br><span class="line"><span class="comment">// 可參考 優化 Optimize/Lean Sass imports中的「Layout &amp; components、Helpers、Utilities </span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h3 id="❷-Option-B-import-檔案｜客製-variables-與-utilities"><a href="#❷-Option-B-import-檔案｜客製-variables-與-utilities" class="headerlink" title="❷ Option B. @import 檔案｜客製 variables 與 utilities"></a>❷ <strong>Option B.</strong> @import <strong>檔案｜客製 variables 與 utilities</strong></h3><p><strong>步驟 :</strong></p>
<p>① 從 node_modules 中複製一份 _variables 檔案到專案中 ( 下方第 2 支檔案 )，前面記得加上第一支 <code>functions</code> 檔案不然會出錯。<br>② 客製 <code>utilities</code> ，與_variables 一樣於 node_modules 中複製一份 <code>_utilities</code> 到專案路徑下。</p>
<ul>
<li><p>如同 variables 操作，把文件中 <code>node_modules</code> 路徑改成專案放置的路徑。</p>
</li>
<li><p>加入 Utilities API。</p>
  <figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&quot;../node_modules/bootstrap/scss/utilities/api&quot;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>客製 utilities 需匯入Utilities API。</p>
  <figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&quot;../node_modules/bootstrap/scss/utilities/api&quot;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>utilities 相關設定可參考明日文章。</p>
</li>
</ul>
<p><strong>▷ Option B</strong> <code>@import</code> <strong>檔案程式碼｜客製 variables 與 utilities</strong></p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// #1. 必須 import 的檔案</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;../node_modules/bootstrap/scss/functions&quot;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;./helpers/variables&quot;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;../node_modules/bootstrap/scss/maps&#x27;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;../node_modules/bootstrap/scss/mixins&#x27;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;./helpers/utilities&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @import &quot;../node_modules/bootstrap/scss/utilities&quot;; 如utilities有客製此可刪</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #2. 必須 import 的檔案</span></span><br><span class="line"><span class="comment">// 這三支為 BS 的預設值，建議加入必匯入檔案</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;../node_modules/bootstrap/scss/root&quot;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;../node_modules/bootstrap/scss/reboot&quot;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;../node_modules/bootstrap/scss/type&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// #3. 選取需要的檔案匯入</span></span><br><span class="line"><span class="comment">// 可參考 優化 Optimize/Lean Sass imports中的「Layout &amp; components、Helpers</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;../node_modules/bootstrap/選取需要的檔案&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// #4. 客製utilities需匯入Utilities API</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;../node_modules/bootstrap/scss/utilities/api&quot;</span>;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Bootstrap</category>
      </categories>
      <tags>
        <tag>2022年iThome鐵人賽</tag>
        <tag>bootstrap</tag>
      </tags>
  </entry>
  <entry>
    <title>Day13 | 那些當助教遇到的問與答</title>
    <url>/html-css/20230329/3908497130/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>很榮幸之前有當過幾個月六角學院 HTML &amp; CSS 線上問答助教一小段時間，這邊整理出幾個自己印象比較深刻的問題。</p>
<h2 id="❒-margin-0-auto-與-margin-auto-差異"><a href="#❒-margin-0-auto-與-margin-auto-差異" class="headerlink" title="❒ margin:0 auto; 與 margin:auto; 差異"></a>❒ margin:0 auto; 與 margin:auto; 差異</h2><p>下方 <code>auto</code> 的意思指剩下可用空間。</p>
<ul>
<li><code>margin:0 auto;</code> 表示平均分配左右空間，上下空間為 0。</li>
<li><code>margin:auto;</code> 表示平均分配上下與左右空間。</li>
<li>以 <code>margin-left:auto;</code> 為例，可讓區塊靠右對齊，因為 left 把剩餘的空間拿走。</li>
</ul>
<p>根據規範，<code>margin-top: auto;</code> 和 <code>margin-bottom: auto;</code> ，其計算值為 0。所以 <code>margin:auto;</code> 與 <code>margin:0 auto;</code> 視覺上呈現會是一樣的。</p>
<p><strong>參考資訊：</strong></p>
<ul>
<li><a href="https://blog.csdn.net/dkmings/article/details/51661056">margin：auto 与 margin：0 auto 区别</a></li>
</ul>
<h2 id="❒-margin-0-auto-與-text-align-center-差異"><a href="#❒-margin-0-auto-與-text-align-center-差異" class="headerlink" title="❒ margin:0 auto; 與 text-align:center 差異"></a>❒ margin:0 auto; 與 text-align:center 差異</h2><p><a href="https://codepen.io/echocarriet/pen/XWqzNNW">CodePen 範例</a></p>
<ul>
<li>區塊內的所有文字或行內元素（ 例如：標題標籤、a 標籤、img 標籤 ）都可使用 <code>text-align</code> 做調整。</li>
<li><code>margin:0 auto;</code> 是讓區塊本身置中。</li>
</ul>
<p><strong>參考資訊：</strong></p>
<p>六角學院 - <a href="https://courses.hexschool.com/courses/666803/lectures/14726942">使用 HTML、CSS 開發一個網站 | text-align 文字水平調整</a></p>
<h2 id="❒-關於-font-family"><a href="#❒-關於-font-family" class="headerlink" title="❒ 關於 font-family"></a>❒ 關於 font-family</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: -apple-system, BlinkMacSystemFont, <span class="string">&quot;Segoe UI&quot;</span>, <span class="string">&quot;Microsoft JhengHei&quot;</span>, Roboto, <span class="string">&quot;Helvetica Neue&quot;</span>, Arial, sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>預設字體中包含 Mac 與 Windows 的系統字。<ul>
<li>電腦使用自己的系統字支援好、瀏覽性好、載入速度也會比較快。</li>
</ul>
</li>
<li>順序由左至右，電腦依序從左至右查詢支援的字體，不支援的字體會跳過繼續往右邊找。</li>
<li>微軟正黑體請以英文 <code>&quot; Microsoft JhengHei &quot;</code> 取代中文，避免錯誤。</li>
<li>一定要加上 <code>sans-serif</code> 無襯線字體，因為此字體是 Mac 與 Windows 都支援的字體，假設前方系統字都沒有，至少還有<code>sans-serif</code> 可支援。</li>
<li><code>font-family</code> 字體名稱中有空白或是中文，需用單引號 <code>&#39;&#39;</code> 或雙引號 <code>&quot;&quot;</code>  將它括起來，避免發生錯誤。</li>
</ul>
<p><strong>參考資訊：</strong></p>
<ul>
<li><a href="https://wcc723.github.io/design/2018/10/25/fonts/">系統字體介紹</a></li>
<li><a href="https://wcc723.github.io/css/2014/01/01/font-family/">font-family 要怎麼玩</a></li>
</ul>
<h2 id="❒-font-family-寫於-星號無效"><a href="#❒-font-family-寫於-星號無效" class="headerlink" title="❒ font-family 寫於 * 星號無效 ?"></a>❒ font-family 寫於 * 星號無效 ?</h2><ul>
<li><p><code>*</code> 星號設定 <code>font-family</code> ，但頁面沒有吃到是因為 <a href="https://meyerweb.com/eric/tools/css/reset/">CSS Reset</a> 中 <code>font: inherit;</code> 的關係。</p>
</li>
<li><p><code>*</code> 星號 CSS 選擇器權重為 0 ，因此會被 CSS Reset 的 <code>font:inherit;</code> 給覆蓋。所以可把 <code>font-family</code> 寫於 <code>html,body</code> 內，如下：</p>
  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span>, <span class="selector-tag">body</span> &#123; </span><br><span class="line"> <span class="attribute">font-family</span>: ...;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>參考資訊：</strong></p>
<ul>
<li><a href="https://blog.csdn.net/weixin_40612082/article/details/80380655">CSS选择器与选择器权重</a></li>
</ul>
<h2 id="❒-CSS-的-body-設定"><a href="#❒-CSS-的-body-設定" class="headerlink" title="❒ CSS 的 body 設定"></a>❒ CSS 的 body 設定</h2><ul>
<li><p>寬度與版型置中建議寫於 body 下的子層，直接寫於 body 會降低整體網頁彈性。body 的設定較常用於字型樣式設定。</p>
</li>
<li><p>背景色的部分也建議寫於 body 下的子層 ( 例如 .wrap )，一個專案內可能不同頁面會設定不同的背景色，所以可用 .wrap 包覆寫外層，但字體樣式基本上全站都會一樣，所以可以寫於 body。</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="❒-把-CSS-寫於-HTML-與外部載入差異"><a href="#❒-把-CSS-寫於-HTML-與外部載入差異" class="headerlink" title="❒ 把 CSS 寫於 HTML 與外部載入差異 ?"></a>❒ 把 CSS 寫於 HTML 與外部載入差異 ?</h2><p>HTML 套用 CSS 的方法有三種：</p>
<ol>
<li>行內<ul>
<li>使用 style 方式寫入標籤中。</li>
</ul>
</li>
<li>HTML 內部載入<ul>
<li>把樣式直接寫在 <code>&lt;head&gt;</code> 內。</li>
</ul>
</li>
<li>外部載入<ul>
<li>把樣式寫在外部 .css 檔案中，再到 HTML 的 <code>&lt;head&gt;</code> 中使用 <code>&lt;link rel=&quot;stylesheet&quot; href=&quot;xxx.css&quot;&gt;</code> 載入此檔案。</li>
</ul>
</li>
</ol>
<ul>
<li>如果直接於 HTML 把 CSS 撰寫在裡面，內容一多，很容易頁面會變非常長，修改維護都會不方便。所以一般 HTML 都會使用從外部載入 CSS 的方式，除了 HTML 頁面會比較乾淨，日後維護管理都會比較方便唷 !</li>
<li>關於 HTML 套用 CSS 三種方法的優先順序可參考此文章： <a href="https://medium.com/ui-ux%E7%B7%B4%E5%8A%9F%E5%9D%8A/css%E7%9A%84%E5%84%AA%E5%85%88%E9%A0%86%E4%BD%8D-cfb859e988bd">CSS的優先順位</a></li>
</ul>
<h2 id="❒-flex-與-float-差異"><a href="#❒-flex-與-float-差異" class="headerlink" title="❒ flex 與 float 差異 ?"></a>❒ flex 與 float 差異 ?</h2><ul>
<li>float 與 flex 相似處為在父層各自使用 float 與 flex 皆可讓子層元素靠左或靠右移動，但 flex<br>的運用會再更廣一些。<br>雖然都可以讓元素移動位置，但它們的寫法卻是完全不一樣的， float 因為會讓區塊浮動的關係，所以需要做清除浮動的動作，而 <code>flex</code> 則是使用主軸與交錯軸做控制。</li>
<li>深入解說可參考六角學院共筆部落格中的 “ <a href="https://w3c.hexschool.com/flexbox/a5e0a54c">Flexbox 排版跟 float 差在哪裡</a> “ 文章</li>
</ul>
<h2 id="❒-除了用-Flex-外可讓-h2、span-垂直置中的其他方式？"><a href="#❒-除了用-Flex-外可讓-h2、span-垂直置中的其他方式？" class="headerlink" title="❒ 除了用 Flex 外可讓 h2、span 垂直置中的其他方式？"></a>❒ 除了用 Flex 外可讓 h2、span 垂直置中的其他方式？</h2><ul>
<li>可使用 <code>inline-block</code> 搭配 <code>vertical-align</code> 的方式，不過還是較推薦使用 flex 排版。<a href="https://codepen.io/echocarriet/pen/gOrdZWr">CodePen</a> 範例</li>
<li>參考文章 : <a href="https://muki.tw/tech/align-introduce/">難解的 CSS 排版：認識對齊 ( 上 )</a> 。</li>
</ul>
<p>另外也可參考筆者鐵人賽中 「 <a href="https://ithelp.ithome.com.tw/articles/10296009">Day7 | 垂直置中的一些排版方式</a> 」文章</p>
<h2 id="❒-CSS-中-content-屬性問題"><a href="#❒-CSS-中-content-屬性問題" class="headerlink" title="❒ CSS 中 content 屬性問題"></a>❒ CSS 中 content 屬性問題</h2><ul>
<li><code>content</code> 是 CSS 的一個屬性，常用於 <code>::before</code> 和 <code>::after</code> 這二個偽元素中。<br>把 <code>content</code> 的屬性值設為空字串 → <code>content: &#39;&#39;;</code> ，再搭配其它屬性生成輔助。( 例如圖片取代文字用法 )。</li>
</ul>
<p><strong>參考資訊 :</strong></p>
<ul>
<li><a href="https://ithelp.ithome.com.tw/articles/10197087">小事之 CSS 偽元素 與 content Property</a></li>
</ul>
<h2 id="❒-使用-text-orientation-屬性讓文字旋轉"><a href="#❒-使用-text-orientation-屬性讓文字旋轉" class="headerlink" title="❒ 使用 text-orientation 屬性讓文字旋轉"></a>❒ 使用 text-orientation 屬性讓文字旋轉</h2><ul>
<li><code>text-orientation</code> 屬性可讓文字旋轉。</li>
</ul>
<p><strong>參考資訊：</strong></p>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/text-orientation">text-orientation</a></li>
</ul>
<h2 id="❒-為什麼-text-decoration-屬性，不要套用到最外層-body-上"><a href="#❒-為什麼-text-decoration-屬性，不要套用到最外層-body-上" class="headerlink" title="❒ 為什麼 text-decoration 屬性，不要套用到最外層 body 上"></a>❒ 為什麼 text-decoration 屬性，不要套用到最外層 body 上</h2><ul>
<li>會把整個父層 ( 包含此父層下的子元素們 ) 都加上底線，</li>
<li><code>text-decoration</code> 屬性定義比較特別，所以建議把它套用到 body 內的其它子層元素上，例如 h1 、 p 段落。</li>
</ul>
<p>上方解說須重構</p>
<ul>
<li><code>text-decoration</code> 屬性定義比較特別，不要套用到最外層的 body 上，請直接套用於要使用的那個元素上，不然套用的那個元素內如果還有其他子元素，都會一起套用 <code>text-decoration</code> 的設定。( 要多繞口 )</li>
</ul>
<p><strong>範例：</strong></p>
<p><a href="https://codepen.io/echocarriet/pen/QWrOGNZ">CodePen 範例</a></p>
<ul>
<li>父層 <code>.wrap</code> 使用 <code>text-decoration: line-through;</code> 可見子層 <code>.inWrap</code> 使用 <code>text-decoration: none;</code> 無效。</li>
<li>試試把範例中的 body 註解，可見 body 下的所有元素都會吃到 <code>text-decoration</code>。</li>
</ul>
<p><strong>參考資訊：</strong></p>
<ul>
<li><a href="https://www.oxxostudio.tw/articles/201501/css-text-decoration.html">CSS 搞怪的 text-decoration</a></li>
</ul>
<h2 id="❒-hr-標籤用法"><a href="#❒-hr-標籤用法" class="headerlink" title="❒ hr 標籤用法"></a>❒ hr 標籤用法</h2><p><code>hr</code> 標籤是段落焦點轉換，比較適合用在 A 區塊轉到 B 區塊之間，如果是像標題下的線條，是偏向裝飾用的話，就建議用 <code>border</code> 來處理，像<a href="https://xd.adobe.com/view/0f1c0abb-4063-4ed0-96b1-452f520f878b-5a4f/">設計稿</a>中「個人資料」下方銜接內容中間的線條就較適合使用 <code>border-bottom</code> 屬性。</p>
<p><strong>參考資訊：</strong></p>
<ul>
<li><a href="https://developer.mozilla.org/zh-TW/docs/Web/HTML/Element/hr">MDN web docs - <hr></a></li>
</ul>
<h2 id="ㄒ解決選單中滑鼠滑入時-a-連結產生的跳動感"><a href="#ㄒ解決選單中滑鼠滑入時-a-連結產生的跳動感" class="headerlink" title="ㄒ解決選單中滑鼠滑入時 a 連結產生的跳動感"></a>ㄒ解決選單中滑鼠滑入時 a 連結產生的跳動感</h2><p><a href="https://codepen.io/echocarriet/pen/vYjWyjW">CodePen 範例</a></p>
<ul>
<li>可於 a 連結設定透明的 <code>border-bottom</code>，可避免 a 連結 hover 時產生的高度變化。</li>
</ul>
<h2 id="❒-root-選取器"><a href="#❒-root-選取器" class="headerlink" title="❒ :root 選取器"></a>❒ :root 選取器</h2><ul>
<li>對 HTML 來說 <code>:root</code> 為 <code>&lt;html&gt;</code> 元素，除了優先級更高外功能與 html  選擇器相同。</li>
<li><code>:root</code> 可搭配 CSS variables ( 變數 ) 使用。<ul>
<li><p>於 <code>:root</code> 建立變數。</p>
</li>
<li><p>於選擇器上套用此變數。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 建立變數 */</span></span><br><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line"> <span class="attr">--white-color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 套上變數 */</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line"> <span class="attribute">color</span>: <span class="built_in">var</span>(--white-color);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<p><strong>參考資訊：</strong></p>
<ul>
<li><a href="https://ithelp.ithome.com.tw/articles/10228111">:root 根目錄選取器 - 叫你阿爸出來講</a></li>
</ul>
<h2 id="❒-linear-gradient-的漸層效果"><a href="#❒-linear-gradient-的漸層效果" class="headerlink" title="❒ linear-gradient 的漸層效果"></a>❒ linear-gradient 的漸層效果</h2><p>➊ <strong>基本寫法：</strong></p>
<p>但此寫法方向就是固定從上至下 ( 起始色 → 結束色 )，無法控制方向。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(起始色彩, 結束色彩);</span><br></pre></td></tr></table></figure>

<p>➋ <strong>可控制方向的寫法：</strong></p>
<p>因有些舊瀏覽器沒有支援 <code>linear-gradient</code>，所以需於前方加入前綴詞。如果沒有加前綴詞就需於方向前加上 <code>to</code>。</p>
<p><strong>語法：</strong></p>
<ul>
<li><p>前綴詞</p>
  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background</span>: <span class="built_in">-webkit-linear-gradient</span>(left ,red,orange,yellow,green,blue,purple);</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">-o-linear-gradient</span>(left ,red,orange,yellow,green,blue,purple);</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">-moz-linear-gradient</span>(left ,red,orange,yellow,green,blue,purple);</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(left ,red,orange,yellow,green,blue,purple);</span><br></pre></td></tr></table></figure>
</li>
<li><p>加上 <code>to</code>：<code>linear-gradient(方向性, 色彩);</code></p>
  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line">linear-gradient(<span class="selector-tag">to</span> <span class="attribute">left</span> <span class="attribute">top</span>, blue, red);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 方向一般由上至下 */</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>➌ <strong>可控制漸層色的角度寫法：</strong></p>
<ul>
<li>方向性 : 上至下方。</li>
<li>單位角度：<code>deg</code> 。</li>
<li>起始色與結束色位置的單位：<code>％</code></li>
<li>色彩：也可使用 rgba，前三個值為 rgb，最後一個值為透明度 ( 0~1 )。如果要插入多個色彩可使用逗號隔開。</li>
<li>語法一：<code>linear-gradient(角度, 起始色彩 , 結束色彩 );</code><ul>
<li>設定一個由 “ 上淺黑至下深黑 “ 的漸層背景。<a href="https://codepen.io/echocarriet/pen/xxjPmZy">CodePen 範例</a></li>
</ul>
</li>
<li>語法二：<code>linear-gradient(角度, 起始色彩 起始色彩位置, 結束色彩 結束色彩位置);</code><ul>
<li>雙色背景斜角度效果，可試試看調整顏色後方 % 數值。 <a href="https://codepen.io/echocarriet/pen/vYjpxPN">CodePen 範例</a></li>
</ul>
</li>
<li>語法三：<code>linear-gradient(角度, 起始色彩 起始色彩位置, 中間色彩 中間色彩位置, 結束色彩 結束色彩位置);</code><ul>
<li>雙色背景斜角效果，因為語法二的方式無法調整紅色部分長度 ( 縮小紅色數值會變漸層色 )，所以使用語法三來調整，讓中間色與結束色數值設定相同即可。<a href="https://codepen.io/echocarriet/pen/ZEovKYm">CodePen 範例</a></li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">180deg</span>, <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>), <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>));</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">135deg</span>, red <span class="number">50%</span>, yellow <span class="number">50%</span>);</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(</span><br><span class="line">    <span class="number">163deg</span>, </span><br><span class="line">    red <span class="number">2%</span>, </span><br><span class="line">    red <span class="number">40%</span>, </span><br><span class="line">    yellow <span class="number">40%</span></span><br><span class="line">  );</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>參考資訊：</strong></p>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/gradient/linear-gradient">MDN - linear-gradient</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10248148">Background-image 之二- 金魚都能懂的CSS必學屬性</a></li>
</ul>
]]></content>
      <categories>
        <category>HTML&amp;CSS</category>
      </categories>
      <tags>
        <tag>2022年iThome鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>Day14 | JS 函式</title>
    <url>/javascript/20230329/1028260270/</url>
    <content><![CDATA[<h2 id="❒-記住，函式也是物件的一種"><a href="#❒-記住，函式也是物件的一種" class="headerlink" title="❒ 記住，函式也是物件的一種"></a>❒ 記住，函式也是物件的一種</h2><p>雖然使用 <code>typeof</code> 檢查 <code>function</code> 會得到 <code>function</code> 的結果，但實際上 <code>function</code> 仍屬於 <code>object</code> 的一種。可以把它想像成被呼叫的特殊物件 ( 值 )。</p>
<h2 id="❒-函式寫法"><a href="#❒-函式寫法" class="headerlink" title="❒ 函式寫法"></a>❒ 函式寫法</h2><p>函式寫法會包含下面三部分：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ----- 簡易範例</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myNmae</span>(<span class="params">parm</span>) &#123;</span><br><span class="line"> <span class="keyword">return</span> parm + parm;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 呼叫函式，就會執行此函式</span></span><br><span class="line"><span class="title function_">myNmae</span>(<span class="number">5</span>);</span><br></pre></td></tr></table></figure>

<ol>
<li><strong>函式的名稱</strong><ul>
<li>上方程式碼中 <code>myNmae</code> 部分，名稱可自訂名稱，也有可能沒有名稱，如下方定義函式的方式 - 函式表達式寫法。</li>
</ul>
</li>
<li><strong>參數</strong><ul>
<li><code>()</code> 裡的內容，如有多個參數可使用逗號隔開，上方程式中 <code>parm</code>。</li>
</ul>
</li>
<li><strong>需重覆執行的內容</strong><ul>
<li><code>&#123;&#125;</code> 大括號中的內容。</li>
</ul>
</li>
</ol>
<p>上方範例為函式宣告與呼叫方式，「 透過名為 <code>myName</code> 的關鍵字來宣告函式 」＆「 透過 <code>myNmae(5);</code> 呼叫 <code>myName</code> 函式 」，<code>myName</code> 函式裡的 <code>parm</code> 的值就會是 <code>myNmae(5);</code> 傳進來的 5，而 <code>parm + parm</code> 結果就會是 10。</p>
<p>最後透過 <code>return</code> 回傳結果，如果沒有 <code>return</code> 回傳預設會回傳 <code>undefined</code>。</p>
<h2 id="❒-定義函式的方式"><a href="#❒-定義函式的方式" class="headerlink" title="❒ 定義函式的方式"></a>❒ 定義函式的方式</h2><h3 id="➊-函式宣告"><a href="#➊-函式宣告" class="headerlink" title="➊ 函式宣告"></a>➊ 函式宣告</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myName</span>(<span class="params">parm</span>)&#123;</span><br><span class="line"> <span class="keyword">return</span> parm + parm;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">myName</span>(<span class="number">5</span>); <span class="comment">//10</span></span><br></pre></td></tr></table></figure>

<p>函式宣告的方式較常使用。</p>
<h3 id="➋-函式表達式-函式運算式-Function-Expression"><a href="#➋-函式表達式-函式運算式-Function-Expression" class="headerlink" title="➋ 函式表達式 ( 函式運算式 ) Function Expression"></a>➋ 函式表達式 ( 函式運算式 ) Function Expression</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 變數名稱 = function(參數)&#123;…&#125;</span></span><br><span class="line"><span class="comment">// 將函式透過 = 來指定給某個變數</span></span><br><span class="line"><span class="keyword">const</span> myName = <span class="keyword">function</span>(<span class="params">parm</span>) &#123;</span><br><span class="line"> <span class="keyword">return</span> parm + parm;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">myName</span>(<span class="number">5</span>); <span class="comment">//10</span></span><br></pre></td></tr></table></figure>

<p>與函式宣告不同，函式表達式 function 後方沒有名稱，也可稱「 匿名函式 」，但如果要加名稱也是可以，但它就只會在「 自己函式的區塊內 」也就是 <code>&#123;&#125;</code> 內有效。</p>
<h3 id="➌-使用-new-Function-建立函式"><a href="#➌-使用-new-Function-建立函式" class="headerlink" title="➌ 使用 new Function 建立函式"></a>➌ 使用 <code>new Function</code> 建立函式</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 透過 new 來建立 Function 物件</span></span><br><span class="line"><span class="keyword">let</span> myName = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&#x27;parm1&#x27;</span>, <span class="string">&#x27;parm2&#x27;</span>, <span class="string">&#x27; return parm1 + parm2 &#x27;</span>);</span><br><span class="line"><span class="title function_">myName</span>(<span class="number">5</span>, <span class="number">5</span>);  <span class="comment">// 10</span></span><br></pre></td></tr></table></figure>

<p><code>new Function</code> 建立的函式物件，每次執行都會進行解析字串的動作 ( <code>&#39;return parm1 + parm2&#39;</code> ) ，所以效能較差，實務上較少使用。</p>
<h2 id="❒-陳述式-Statement-與表達式-Expression"><a href="#❒-陳述式-Statement-與表達式-Expression" class="headerlink" title="❒ 陳述式 Statement 與表達式 Expression"></a>❒ 陳述式 Statement 與表達式 <strong>Expression</strong></h2><blockquote>
<p><strong>陳述式 Statement → 不會回傳值。</strong><br><strong>表達式 Expression → 會回傳一個值。</strong></p>
</blockquote>
<ul>
<li><p>JavaScript 語法基本上分為「 陳述式 statement 」與「 表達式 expression 」兩大類。</p>
</li>
<li><p>陳述式 ( statement ) 大多是一個片段或幾個詞彙，其中也會混用到表達式 ( statement ) 的詞彙。運作上表達式 ( statement ) 可以獨立出現，也可以與陳述式 ( statement ) 混用。</p>
  <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用函式陳述式宣告一個函式，但運行後回傳結果為表達式</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">number</span>(<span class="params"></span>) &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 呼叫函式，回傳結果</span></span><br><span class="line"><span class="title function_">number</span>();</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="❒-陳述式-Statement"><a href="#❒-陳述式-Statement" class="headerlink" title="❒ 陳述式 Statement"></a>❒ 陳述式 Statement</h2><ul>
<li><p>JavaScript 的語句類型，用於命令執行指定的一系列操作，最大的特徵是「 <strong>不會回傳結果</strong> 」。</p>
</li>
<li><p>陳述式不會回傳結果，所以無法賦予值在其他變數上，會顯示錯誤訊息。</p>
  <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 錯誤寫法:把 statement 賦予在 expression 上會顯示錯誤訊息，如下</span></span><br><span class="line"><span class="keyword">var</span> ming;</span><br><span class="line">ming = <span class="keyword">if</span> (<span class="number">1</span> === <span class="number">1</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;55&#x27;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>  <img src="https://ithelp.ithome.com.tw/upload/images/20220929/20119743kuvOUCjf90.png" alt="錯誤訊息"></p>
</li>
<li><p>如果程式碼中只有 <code>&#123;&#125;</code> 是物件不會是陳述式，需要在 <code>&#123;&#125;</code> 裡面加入程式碼才會變成陳述式。另外下方範例中 <code>&#123;&#125;</code> 內使用 <code>var</code> 宣告，外層可讀取到變數，但使用 <code>let</code>、<code>const</code> 外層是無法讀取到內層的 ming 變數。可參考後天的 「 Day 14 | 關於 let、 const、var  」文章。</p>
  <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// --- 正確寫法</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">var</span> ming = <span class="string">&#x27;小明&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// --- 錯誤寫法:陳述式不會回傳值所以不能賦予在變數上</span></span><br><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line"> <span class="keyword">var</span> ming = <span class="string">&#x27;小明&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// --- 正確寫法</span></span><br><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line"> ming = <span class="string">&#x27;小明&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

  <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注意：下面兩種寫法所呈現出來的意思是完全不同的</span></span><br><span class="line"><span class="comment">//--- 陳述式</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">let</span> ming = <span class="string">&#x27;小明&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//--- 物件實字</span></span><br><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line"> ming = <span class="string">&#x27;小明&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="常見的陳述式"><a href="#常見的陳述式" class="headerlink" title="常見的陳述式"></a>常見的陳述式</h3><ul>
<li>宣告 ( <code>var</code>、<code>let</code>、<code>const</code>、<code>function</code> )</li>
<li><code>if .. else</code>、<code>switch</code> …</li>
<li>迴圈 ( <code>for</code>  )</li>
<li>陳述式完整分類可參考 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements">MDN 文件</a>。</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 陳述式們</span></span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">let</span> ming = <span class="string">&#x27;小明&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="❒-表達式-運算式-Expression"><a href="#❒-表達式-運算式-Expression" class="headerlink" title="❒ 表達式 ( 運算式 ) Expression"></a>❒ 表達式 ( 運算式 ) Expression</h2><ul>
<li>又可稱為表示式、運算式，經常透過一些符號結合上下語句並運算及「 <strong>回傳結果</strong> 」。</li>
</ul>
<h3 id="常見的表達式"><a href="#常見的表達式" class="headerlink" title="常見的表達式"></a>常見的表達式</h3><ul>
<li>純值</li>
<li>變數</li>
<li>運算子<ul>
<li>算術運算子<ul>
<li>四則運算 ( 加、減、乘、除  )</li>
<li>一元運算子 ( 正號 <code>+</code>、負號 <code>-</code>、遞增 <code>++</code>、遞減 <code>—-</code> )</li>
<li>二元運算子 ( 取餘數 <code>%</code> )</li>
</ul>
</li>
<li>比較運算子 ( <code>==</code>、<code>===</code>、<code>!=</code>、<code>!==</code>、 <code>&gt;</code> 、<code>&lt;</code>  、<code>&lt;=</code> 、<code>&gt;=</code> )</li>
<li>邏輯運算子 ( <code>&amp;&amp;</code>、<code>||</code>、<code>!</code> )</li>
<li>其他運算子可參考 <a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Guide/Expressions_and_Operators">MDN 運算式與運算子</a>。</li>
</ul>
</li>
<li>正規表達式</li>
<li>函式表達式</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 表達式</span></span><br><span class="line"><span class="number">1</span> === <span class="number">1</span></span><br><span class="line"><span class="number">5</span> + <span class="number">6</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="❒-函式陳述式-Function-Statement-具名函式"><a href="#❒-函式陳述式-Function-Statement-具名函式" class="headerlink" title="❒ 函式陳述式 Function Statement ( 具名函式 )"></a>❒ 函式陳述式 Function Statement ( 具名函式 )</h2><blockquote>
<p>Function Statement 會直接宣告一個函式</p>
</blockquote>
<ul>
<li>為函式宣告，直接宣告一個函式並給它一個名稱，不須使用變數 ( <code>var</code>、<code>let</code>、<code>const</code> ) 來定義一個函式。</li>
<li>「 函式陳述式 Function Statement 」與「函式表達式 Function Expression 」兩者提升結果不同，下篇講到提升 hoisting。</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">callName</span>(<span class="params"></span>)&#123; &#125;</span><br></pre></td></tr></table></figure>

<h2 id="❒-函式表達式-Function-Expression-匿名函式"><a href="#❒-函式表達式-Function-Expression-匿名函式" class="headerlink" title="❒ 函式表達式 Function Expression ( 匿名函式 )"></a>❒ 函式表達式 Function Expression ( 匿名函式 )</h2><blockquote>
<p>Function Expression 會先宣告變數，再賦予值。</p>
</blockquote>
<p>為變數宣告，先會宣告一個變數，並用等號把後方的函式賦予到前面宣告的變數上。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> callName = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="參考資訊"><a href="#參考資訊" class="headerlink" title="參考資訊"></a>參考資訊</h2><ul>
<li>Kuro - 008 天重新認識 JavaScript</li>
<li>JavaScript 表達式觀念及運用 - JS Expression</li>
<li>六角學院 - JavaScript 核心篇</li>
<li><a href="https://www.casper.tw/development/2020/09/17/js-expression/">JavaScript 表達式觀念及運用 - JS Expression</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>2022年iThome鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>Day15 | JS 的執行環境、作用域、範圍鏈</title>
    <url>/javascript/20230329/3917783636/</url>
    <content><![CDATA[<h2 id="❒-執行的錯誤情境-LHS-RHS"><a href="#❒-執行的錯誤情境-LHS-RHS" class="headerlink" title="❒ 執行的錯誤情境 LHS, RHS"></a>❒ 執行的錯誤情境 LHS, RHS</h2><p>在 JavaScript 遇到錯誤記得修正，不然後方的程式碼都不會運行，這時也可以運用 LHS, RHS 提示來進行排除。</p>
<p><img src="https://ithelp.ithome.com.tw/upload/images/20220930/20119743b4Zgq8LM5z.png" alt="// LHS, RHS。出處：六角學院 ↑"></p>
<h3 id="範例-1"><a href="#範例-1" class="headerlink" title="範例 1"></a>範例 1</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ming = <span class="string">&#x27;小明&#x27;</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>ming 在取值時就會稱為 RHS。</li>
<li>小明賦予到左邊變數 <code>ming</code> 上稱為 LHS。</li>
</ul>
<h3 id="範例-2-延續上題"><a href="#範例-2-延續上題" class="headerlink" title="範例 2 | 延續上題"></a>範例 2 | 延續上題</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ming = <span class="string">&#x27;小明&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> man = ming;</span><br></pre></td></tr></table></figure>

<ul>
<li>右邊的值 <code>ming</code> 就是使用 RHS 取得這個變數，並且透過 LHS 賦予到左邊的變數。</li>
<li>在等號 <code>=</code> 的右邊或是函式取得變數上，都可以稱為 RHS。</li>
</ul>
<h3 id="範例-3"><a href="#範例-3" class="headerlink" title="範例 3"></a>範例 3</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> = <span class="literal">true</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br></pre></td></tr></table></figure>

<p><strong>解析：</strong></p>
<ul>
<li>當左側不是變數時，就無法被賦予值，會顯示錯誤訊息 <code>Uncaught SyntaxError: Invalid left-hand side in assignment</code>。<ul>
<li>看到 LHS 錯誤時，可以看一下左邊的值是不是沒有辦法被賦予。</li>
</ul>
</li>
</ul>
<p><strong>答案：</strong></p>
<ul>
<li><code>1 = true;</code> 在編譯時產生錯誤 <code>Uncaught SyntaxError: Invalid left-hand side in assignment</code> → LHS 錯誤。<ul>
<li><code>console.log(a);</code> 不會在編譯過程產生錯誤，會在執行階段發現變數無法取得而產生錯誤訊息 <code>Uncaught ReferenceError: a is not defined</code>，表示此變數是沒有被定義過的，在 JS 運行過程中也無法找到此變數 → RHS 錯誤 。</li>
</ul>
</li>
</ul>
<h2 id="❒-語法作用域-Lexical-scope"><a href="#❒-語法作用域-Lexical-scope" class="headerlink" title="❒ 語法作用域 ( Lexical scope )"></a>❒ 語法作用域 ( Lexical scope )</h2><p><img src="https://ithelp.ithome.com.tw/upload/images/20220930/201197430Xn9yCXQIw.png" alt="// 靜態作用域與動態作用域,出處：六角學院 ↑"></p>
<ul>
<li>JavaScript 採用語法作用域，也稱靜態作用域。</li>
<li>語法作用域會牽扯到靜態作用域與動態作用域。</li>
</ul>
<h3 id="靜態作用域"><a href="#靜態作用域" class="headerlink" title="靜態作用域"></a>靜態作用域</h3><ul>
<li>變數的作用域在語法解析時，就已經確定作用域。</li>
<li>JavaScript 是直譯式語言或透過直譯器來生成代碼，並運行代碼。語法作用域也稱靜態作用域 ( 語法解析時就已經確定作用域 )，寫 function 時作用域就已經確定 ( 下方範例 )。</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 範例一</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">callName</span>(<span class="params"></span>) &#123;</span><br><span class="line"> <span class="keyword">var</span> <span class="title class_">Ming</span> = <span class="string">&#x27;小明&#x27;</span>;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Ming</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">callName</span>();  <span class="comment">// 可印出小明</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 範例二</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">callName</span>(<span class="params"></span>) &#123;</span><br><span class="line"> <span class="keyword">var</span> <span class="title class_">Ming</span> = <span class="string">&#x27;小明&#x27;</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">callName</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Ming</span>); <span class="comment">//是無法呼叫到小明，is not desined</span></span><br><span class="line"><span class="comment">// 因JS作用域在函式內，在內層宣告變數外層是讀不到的</span></span><br><span class="line"><span class="comment">// 也就是函式內的程式碼只在&#123;&#125;中運行，出了&#123;&#125;就被釋放掉了。</span></span><br></pre></td></tr></table></figure>

<h3 id="動態作用域"><a href="#動態作用域" class="headerlink" title="動態作用域"></a>動態作用域</h3><ul>
<li>變數作用域在函式調用時才會決定它的作用域。</li>
</ul>
<h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p><img src="https://ithelp.ithome.com.tw/upload/images/20220930/20119743A5ZT2dcpPw.png" alt="// JavaScript 的作用域,出處：六角學院 ↑"></p>
<ul>
<li>JavaScript 的作用域是一層一層向內的。外層有一層全域作用域 → 內層由函式所包覆。</li>
<li>上圖中兩個 function 的作用域是獨立的，如果作用域內有需要一些變數，但這作用域內沒有特定的變數時會向外層 ( 全域 ) 尋找，如果外層 ( 全域 ) 有可以使用就會直接使用，否則會顯示 <code>ReferenceError: xxx is not defined</code>。</li>
</ul>
<h3 id="作用域-範例-1-靜態作用域"><a href="#作用域-範例-1-靜態作用域" class="headerlink" title="作用域 | 範例 1. ( 靜態作用域 )"></a>作用域 | 範例 1. ( 靜態作用域 )</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> value = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>)&#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>)&#123;</span><br><span class="line"> <span class="keyword">var</span> value =<span class="number">2</span>;</span><br><span class="line"> <span class="title function_">fn1</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn2</span>();</span><br></pre></td></tr></table></figure>

<p><strong>執行順序 :</strong></p>
<ul>
<li>運行順序先宣告 value 等於 1 。</li>
<li>執行 <code>fn2()</code>，再把 <code>value</code> 重新宣告等於 2，再執行 <code>fn1()</code>。</li>
<li>這時 <code>fn1()</code> 內 <code>value</code> 值會等於 1。</li>
</ul>
<p><strong>解說 :</strong></p>
<ul>
<li>因為 JS 是屬於靜態作用域，所以作用域在撰寫 funciton 時就已經確定。因此 <code>var value = 1;</code> 作用域包含全部，所以無論在 <code>fn1()</code> 或 <code>fn2()</code> 都可以讀取到。</li>
<li>雖然在 <code>fn2()</code> 重新賦予 <code>value = 2</code> 的值，但 <code>value = 2</code> 的值作用域只在 <code>fn2()</code> 內。<br>所以再往下執行 <code>fn1()</code> 時， <code>fn1()</code> 內的 <code>console.log(value);</code>  就會向外查找 <code>value</code> 等於 1 的值。</li>
</ul>
<p>▶️  所以答案會印出 1。</p>
<h2 id="❒-執行環境與執行堆疊"><a href="#❒-執行環境與執行堆疊" class="headerlink" title="❒ 執行環境與執行堆疊"></a>❒ 執行環境與執行堆疊</h2><h3 id="函式執行環境"><a href="#函式執行環境" class="headerlink" title="函式執行環境"></a>函式執行環境</h3><p><img src="https://ithelp.ithome.com.tw/upload/images/20220930/20119743BGOhY0qkk7.png" alt="// 函式執行環境, 出處：六角學院 ↑"></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 範例</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">callName</span>(<span class="params"></span>) &#123;</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">callName</span>();</span><br></pre></td></tr></table></figure>

<ul>
<li>上方介紹到函式作用域是限制在 function 內，所以在 function 宣告任何變數，它的作用域就會限制在 function 內。</li>
<li>‼️ <strong>注意 : 如果我們沒有執行這段函式「 <code>callName();</code>  」，它是不會有任何變數產生。</strong>所以是需要執行它「 呼叫 <code>callName();</code>  」才會產生執行環境，這個執行環境內才會有屬於它的變數。<br>另外它「 <code>callName();</code>  」是可以重複調用的。</li>
<li>會產生一個 <code>this</code>，後方會介紹到。</li>
</ul>
<h3 id="全域執行環境與堆疊"><a href="#全域執行環境與堆疊" class="headerlink" title="全域執行環境與堆疊"></a>全域執行環境與堆疊</h3><p><img src="https://ithelp.ithome.com.tw/upload/images/20220930/20119743uu7ya1jc4W.png" alt="// 全域執行環境, 出處：六角學院 ↑"></p>
<ul>
<li>除了函式，全域也有屬於自己的全域執行環境。</li>
<li>全域執行環境是在網頁一開啟或是後端的 Node.js 一開啟時，它的執行環境就已經建立了。它在建立時會同時產生一個 window 變數 ( 使用瀏覽器開啟 ) 或是 global 變數 ( 使用 Node JS 開啟 ) 。</li>
<li>會產生一個 <code>this</code>，等於 window  或 global。<ul>
<li>但注意 <code>this</code> 會隨著它的執行環境而有所不同，後方章節會介紹到。</li>
</ul>
</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 範例</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params">name</span>) &#123;</span><br><span class="line"> <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">doSomething</span>(<span class="params"></span>) &#123;</span><br><span class="line"> <span class="title function_">sayHi</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">doSomething</span>();</span><br></pre></td></tr></table></figure>

<p><strong>運行順序 :</strong></p>
<ol>
<li>上方兩個函式，先運行 <code>doSomething()</code>。</li>
<li><code>doSomething()</code> 裡面再運行 <code>sayHi();</code>。</li>
</ol>
<p><strong>解說 :</strong></p>
<ul>
<li>在執行環境堆疊的狀態，會先看到上方運行順序。</li>
<li>網頁一開啟就會產生全域執行環境<ol>
<li>呼叫 <code>doSomething()</code>，出現 <code>doSomething()</code> 的執行環境，並且堆疊在全域的執行環境上。</li>
<li><code>doSomething()</code> 內去呼叫 <code>sayHi();</code> 這個函式，<code>sayHi();</code> 會堆疊在 <code>doSomething()</code> 這個函式上。</li>
</ol>
</li>
<li>所以這個執行環境是一層一層堆疊起來的，和函式在宣告的時候沒有關聯性，而是與呼叫的位置有關係。<br>離開時也是一層一層的離開 <code>sayHi();</code> 執行完就會先離開 → <code>doSomething()</code> 完成後也會離開 → 最後回到全域的執行環境。</li>
</ul>
<h2 id="❒-範圍鍊"><a href="#❒-範圍鍊" class="headerlink" title="❒ 範圍鍊"></a>❒ 範圍鍊</h2><h3 id="解說範圍鍊"><a href="#解說範圍鍊" class="headerlink" title="解說範圍鍊"></a>解說範圍鍊</h3><ul>
<li>當函式的本身沒有這個變數時，它就會向外層來做尋找，這尋找的過程與執行環境是沒有關聯性的。</li>
<li>所以下方範例中，無論是函式 fn1 或函式 fn2 的範圍鍊都是指向外層的全域環境。<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20220930/20119743dZ5EAdD40b.png" alt="// 函式 fn1 或函式 fn2 的範圍鍊都是指向外層的全域環境, 出處：六角學院 ↑"></li>
</ul>
<h3 id="範圍鍊範例-1"><a href="#範圍鍊範例-1" class="headerlink" title="範圍鍊範例 1"></a>範圍鍊範例 1</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> value = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>)&#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>)&#123;</span><br><span class="line"> <span class="keyword">var</span> value =<span class="number">2</span>;</span><br><span class="line"> <span class="title function_">fn1</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn2</span>();</span><br></pre></td></tr></table></figure>

<ol>
<li>一開始會產生全域執行環境。</li>
<li>執行 <code>fn2();</code> 的執行環境 → 執行 <code>fn2()</code> 內的 <code>fn1();</code> ，雖然在 <code>fn2()</code> 重新賦予 <code>value = 2</code> 的值，但 <code>value = 2</code> 的值作用域只在 <code>fn2()</code> 內。<br>所以再往下執行 <code>fn1()</code> 時， <code>fn1()</code> 內的 <code>console.log(value);</code>  就會向外查找 <code>value</code> 等於 1 的值。</li>
<li>‼️ <strong>注意 : 函式 <code>fn1</code> 在往外層尋找 <code>value</code> 時並不會跟執行環境有任何的關聯性。</strong>因為 JS 是語法作用域，它在程式碼撰寫時就已經確定它的作用域。<ol>
<li>函式 <code>fn1</code> 沒有 <code>value</code> 這個變數時會向外層全域來做尋找，這尋找過程與執行環境 ( 執行環境也就是 <code>function fn1()&#123;&#125;</code> 內 ) 是沒有關聯性的。</li>
</ol>
</li>
</ol>
<h3 id="範圍鍊範例-02"><a href="#範圍鍊範例-02" class="headerlink" title="範圍鍊範例 02"></a>範圍鍊範例 02</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = <span class="string">&#x27;老媽&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`hi <span class="subst">$&#123;person&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">doMorningWork</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> person = <span class="string">&#x27;老爸&#x27;</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">meetAuntie</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> person = <span class="string">&#x27;漂亮阿姨&#x27;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`嗨囉~ <span class="subst">$&#123;person&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">sayHi</span>();</span><br><span class="line">  <span class="title function_">meetAuntie</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sayHi</span>();</span><br><span class="line"><span class="title function_">doMorningWork</span>();</span><br></pre></td></tr></table></figure>

<ul>
<li><p>答案</p>
<p>  hi 老媽、hi 老媽、哈囉~漂亮阿姨</p>
<ul>
<li><code>doMorningWork()</code> 內的 <code>sayHi();</code> 會忽視裏面的變數 person 老爸，向外層尋找變數 value 老媽。因為變數 person 老爸作用域只在 <code>doMorningWork()</code> 內。<br>另外函式 sayHi 向外尋找變數 person 老媽是因為它裡面本身沒有此變數。</li>
<li><code>doMorningWork()</code> 內宣告一個 <code>meetAuntie()</code> ，所以現在執行的不是外層的 sayHi 而是內層的 <code>meetAuntie()</code>，而內層的 <code>meetAuntie()</code> 本身就有一個 person 變數漂亮阿姨，所以會印出 <code>哈囉~漂亮阿姨</code>。<ul>
<li>如果註解掉 <code>var person = &#39;漂亮阿姨&#39;;</code> 就會向外尋找變數印出 <code>哈囉~老爸</code>。</li>
</ul>
</li>
<li>結論 : <strong>當函式的本身沒有這個變數時，它就會向外層來做尋找</strong>，這尋找的過程與執行環境是沒有關聯性的。</li>
</ul>
</li>
</ul>
<h2 id="參考資訊"><a href="#參考資訊" class="headerlink" title="參考資訊"></a>參考資訊</h2><ul>
<li>六角學院 - JavaScript 核心篇</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>2022年iThome鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>Day17 | JS 常見的錯誤類型</title>
    <url>/javascript/20230402/4130580881/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在六角學院的「 JavaScript 核心篇 」中常遇到開發者工具顯示 <code>Uncaught SyntaxError</code> 與 <code>Uncaught ReferenceError</code> 錯誤訊息，藉此篇文章整理開發中常遇到的錯誤訊息們，方便日後除錯翻閱。</p>
<h2 id="❐-JavaScript-常見的錯誤類型-Error-Reference"><a href="#❐-JavaScript-常見的錯誤類型-Error-Reference" class="headerlink" title="❐ JavaScript 常見的錯誤類型 ( Error Reference )"></a>❐ JavaScript 常見的錯誤類型 ( Error Reference )</h2><ul>
<li>SyntaxError</li>
<li>ReferenceError</li>
<li>TypeError</li>
<li>RangeError</li>
<li>URIError</li>
</ul>
<h2 id="❐-SyntaxError-語法錯誤"><a href="#❐-SyntaxError-語法錯誤" class="headerlink" title="❐ SyntaxError 語法錯誤"></a>❐ SyntaxError 語法錯誤</h2><p><code>SyntaxError</code> 通常為語法結構的錯誤，此錯誤結構有時候也可以透過 VSCdoe 的提示來查看，結構有問題的地方 VSCode 會顯示紅色毛毛蟲樣式。</p>
<p><strong>範例 1. 函式缺少結尾 <code>&#125;</code></strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">callName</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello, 媽&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><code>callName()</code> 結尾少了 <code>&#125;</code>，開發者工具會跳出 <code>Uncaught SyntaxError</code> 錯誤訊息。</p>
<p><strong>範例 2. 結尾符號不正確</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> myName = <span class="string">&#x27;Carrie&#x27;</span>,</span><br></pre></td></tr></table></figure>

<p>正確寫法應為 <code>let myName = &#39;Carrie&#39;;</code> 而非逗號，開發者工具會跳出 <code>Uncaught SyntaxError</code> 錯誤訊息。</p>
<h2 id="❐-ReferenceError-參考、引用錯誤"><a href="#❐-ReferenceError-參考、引用錯誤" class="headerlink" title="❐ ReferenceError 參考、引用錯誤"></a>❐ ReferenceError 參考、引用錯誤</h2><p><code>ReferenceError</code> 錯誤類型較常在執行階段才會看到錯誤，編輯器中不一定會顯示錯誤，除非裝 ESLint 工具，可透過下面方式進行除錯。</p>
<h3 id="除錯重點"><a href="#除錯重點" class="headerlink" title="除錯重點"></a>除錯重點</h3><ul>
<li>可透過 Chrome 開發者工具的錯誤訊息排錯。</li>
<li>於 JS 撰寫的開發環境中 ( 例如 VSCode ) 裝 ESLint 工具。</li>
</ul>
<p><strong>範例1.</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Ming</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Ming</span> = <span class="string">&#x27;小明&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>因為 <code>let</code> 宣告變數，變數在創造階段會位於暫時性死區，而 <code>console.log(Ming);</code> 在 <code>Ming = &#39;小明&#39;;</code> 之前，自然讀取不到 <code>Ming</code> 的值，會顯示 <code>Uncaught ReferenceError: Cannot access &#39;Ming&#39; before initialization</code> 錯誤訊息。</p>
<p><strong>範例 2. 呼叫為宣告的變數</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Ming</span>);</span><br></pre></td></tr></table></figure>

<p>會顯示錯誤訊息 <code>Uncaught ReferenceError: Ming is not defined</code>。</p>
<h2 id="❐-TypeError-型別錯誤"><a href="#❐-TypeError-型別錯誤" class="headerlink" title="❐ TypeError 型別錯誤"></a>❐ TypeError 型別錯誤</h2><p><code>TypeError</code> 錯誤訊息不會顯示於編輯器中，也是須於執行環境中才會看到錯誤訊息。</p>
<h3 id="除錯重點-1"><a href="#除錯重點-1" class="headerlink" title="除錯重點"></a>除錯重點</h3><ul>
<li>可透過 Chrome 開發者工具的錯誤訊息排錯。</li>
<li>在要取變數、重新賦予變數新值，先確認此變數的資料型別與結構。<ul>
<li><code>const</code> 不能重新賦予值。</li>
<li><code>undefined</code>  與 <code>null</code>  無法再增加屬性。</li>
</ul>
</li>
</ul>
<p><strong>範例 1. const 重新賦予值</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Ming</span> = <span class="string">&#x27;小明&#x27;</span>;</span><br><span class="line"><span class="title class_">Ming</span> = <span class="string">&#x27;大明&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>由於 <code>const</code> 不能重新賦予值，所以會顯示錯誤訊息 <code>Uncaught TypeError: Assignment to constant variable</code> 。</p>
<p><strong>範例 2. undefined  與 null 新增屬性</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="literal">null</span>.<span class="property">name</span> = <span class="string">&#x27;Hi&#x27;</span>;</span><br><span class="line"><span class="literal">undefined</span>.<span class="property">callMe</span> = <span class="string">&#x27;Hello&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>由於 <code>undefined</code>  與 <code>null</code>  無法再增加屬性，所以分別會顯示錯誤訊息：</p>
<ul>
<li><code>Uncaught TypeError: Cannot set properties of null (setting &#39;name&#39;)</code></li>
<li><code>Uncaught TypeError: Cannot set properties of undefined (setting &#39;callMe&#39;)</code></li>
</ul>
<p><strong>範例 3. 對 undefined 的值新增屬性</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> family = &#123;</span><br><span class="line">  <span class="attr">dog</span>: <span class="number">2</span>,</span><br><span class="line">&#125;</span><br><span class="line">family.<span class="property">father</span>.<span class="property">child</span> = <span class="number">3</span>;</span><br></pre></td></tr></table></figure>

<p>錯誤訊息：<code>Uncaught TypeError: Cannot set properties of undefined (setting &#39;child&#39;)</code></p>
<ul>
<li>因為 <code>father</code> 並沒有定義 ( 不存在 )，所以它的值為 <code>undefined</code> ，在 <code>undefined</code> 上是無法新增任何屬性。</li>
</ul>
<h2 id="❐-RangeError-範圍錯誤"><a href="#❐-RangeError-範圍錯誤" class="headerlink" title="❐ RangeError 範圍錯誤"></a>❐ RangeError 範圍錯誤</h2><p><code>RangeError</code> 錯誤訊息的原因為</p>
<ul>
<li>無效的陣列長度</li>
<li>過度執行函式，會產生過多執行堆疊<ul>
<li>需檢視程式碼的邏輯找出問題點，否則會過去消耗硬體資源。</li>
</ul>
</li>
</ul>
<p><strong>範例 1. 無效的陣列長度</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ary = [<span class="string">&#x27;A&#x27;</span>];</span><br><span class="line">ary.<span class="property">length</span> = ary.<span class="property">length</span> - <span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<p>錯誤訊息 <code>Uncaught RangeError: Invalid array length</code></p>
<p><strong>範例 2. 函式自己呼叫自己</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">fn</span>();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<p>執行堆疊超過環境限制，錯誤訊息 <code>Uncaught RangeError: Maximum call stack size exceeded</code></p>
<h2 id="❐-URIError-Url-錯誤"><a href="#❐-URIError-Url-錯誤" class="headerlink" title="❐ URIError  Url 錯誤"></a>❐ URIError  Url 錯誤</h2><p>Url 解析不成功的原因為：傳遞給「 decodeURI、encodeURL、encodeURIComponent、decodeURIComponent 」這些函數的參數不合格，導致函數無法正確對它進行解析。</p>
<p><strong>範例1. decodeURL</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 錯誤: Uncaught URIError: URI malformed at decodeURI</span></span><br><span class="line"><span class="built_in">decodeURI</span>(<span class="string">&#x27;%carrie&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正確</span></span><br><span class="line"><span class="built_in">decodeURI</span>(<span class="string">&#x27;%25carrie&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="參考資訊"><a href="#參考資訊" class="headerlink" title="參考資訊"></a>參考資訊</h2><ul>
<li><a href="https://israynotarray.com/javascript/20211126/12988607/">JavaScript 錯誤類型 ( JavaScript Error Reference )</a></li>
<li><a href="https://www.casper.tw/development/2020/09/16/chrome-js-alert/">JavaScript 開發中常見錯誤解決辦法</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Errors/Malformed_URI">MDN - URIError: malformed URI sequence</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>2022年iThome鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>Day16 | JS的Hoisting提升與執行環境</title>
    <url>/javascript/20230402/1554806580git/</url>
    <content><![CDATA[<h2 id="❐-提升-Hoisting"><a href="#❐-提升-Hoisting" class="headerlink" title="❐  提升 Hoisting"></a>❐  提升 Hoisting</h2><h3 id="關於提升"><a href="#關於提升" class="headerlink" title="關於提升"></a>關於提升</h3><ul>
<li>在創造環境把記憶體空間準備好，此流程稱為提升 Hoisting。</li>
<li>透過 <code>let</code> 宣告的變數不會有 hoisting 變數提升的特性只有類似的概念，<code>var</code> 宣告的變數才會，下方會有範例。<ul>
<li><code>let</code> 一樣有創造階段和執行階段，類似 Hoisting 提升的概念，只是它在提升時不會賦予變數 <code>undefined</code> 的值，而是出現「 暫時性死區 TDZ 」，這個暫時性死區無法存取這個變數而出現錯誤訊息 <code>Uncaught ReferenceError: Cannot access &#39;Ming&#39; before initialization</code>。<ul>
<li><a href="https://echocarrie.com/javascript/20230402/408647625/">Day18 | JS 關於 let、 const、var</a></li>
</ul>
</li>
</ul>
</li>
<li><strong>在創造階段函式優先。( 優先只適用於透過函式宣告方式定義的函式，如下述函數陳述式 Function statement )。</strong><ul>
<li>( 詳細解說請看 「 Kuro - 008 天重新認識 JavaScript 」2-42 頁 )</li>
</ul>
</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// -----透過函式宣告</span></span><br><span class="line"><span class="comment">// 會回傳 5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isTotal</span>(<span class="number">5</span>));</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isTotal</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> num + num;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// -----函式運算子 Function expression</span></span><br><span class="line"><span class="comment">// 會顯示錯誤訊息 Uncaught ReferenceError</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isCount</span>(<span class="number">5</span>));</span><br><span class="line"><span class="keyword">var</span> isCount= <span class="keyword">function</span> (<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> num + num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="創造環境中變數與函式差異"><a href="#創造環境中變數與函式差異" class="headerlink" title="創造環境中變數與函式差異"></a>創造環境中變數與函式差異</h3><p>➊ <strong>函式陳述式 Function statement :</strong></p>
<p>在創造階段，會把記憶體空間與整個函式的內容都準備好並載入進來。所以函式在創造階段就已經可以運行。<a href="https://www.notion.so/01-81ba487af4b54222a3eb37053570b1ab">範例</a></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">callName</span>();</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">callName</span>(<span class="params"></span>) &#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;呼叫小明&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ============= 印出 呼叫小明</span></span><br></pre></td></tr></table></figure>

<p>➋ <strong>變數 :</strong></p>
<ul>
<li>在創造階段變數是不會賦予值，只會先有一個記憶體空間。</li>
<li>函式表達式 ( Funciton expression ) 創造階段與變數一樣會先提出變數給予記憶體空間，下方有範例。</li>
</ul>
<p>❗注意 : 這邊 <code>let</code> 宣告的變數不會有變數提升的特性，有變數提升特性的只有 <code>var</code> 宣告的變數。( 詳細解說請看 「 Kuro - 008 天重新認識 JavaScript 」 2-38 ~ 2-40 頁 )</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Ming</span>);</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Ming</span>;   <span class="comment">// 創造階段</span></span><br><span class="line"><span class="title class_">Ming</span> = <span class="string">&#x27;小明&#x27;</span>;   <span class="comment">// 執行階段</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ============= undefined</span></span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Ming</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Ming</span>;</span><br><span class="line"><span class="title class_">Ming</span> = <span class="string">&#x27;小明&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ============= let宣告變數沒有提升特性，所以顯示錯誤訊息 ReferenceError</span></span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函式表達式( Funciton expression )</span></span><br><span class="line"><span class="keyword">var</span> callName = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;呼叫小明&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// =========== 拆解</span></span><br><span class="line"><span class="comment">// 創造階段</span></span><br><span class="line"><span class="keyword">var</span> callName;</span><br><span class="line"><span class="comment">// 執行階段</span></span><br><span class="line">callName = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;呼叫小明&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">callName</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="❐-Hoisting-分兩階段"><a href="#❐-Hoisting-分兩階段" class="headerlink" title="❐  Hoisting 分兩階段"></a>❐  Hoisting 分兩階段</h2><ol>
<li>創造環境。<ul>
<li>在創造環境把記憶體空間準備好，此流程稱為提升 Hoisting。</li>
</ul>
</li>
<li>執行。</li>
</ol>
<h3 id="➊-創造環境"><a href="#➊-創造環境" class="headerlink" title="➊ 創造環境"></a>➊ <strong>創造環境</strong></h3><p>創造環境階段，會把程式碼裡面所有變數挑出來，在記憶體上面分別給它們空間，一直到執行階段才會把這些程式碼依序執行，並且賦予它值。</p>
<p><strong>範例 1</strong></p>
<p><img src="https://ithelp.ithome.com.tw/upload/images/20221001/201197433reKHwNEnT.png" alt="出處：六角學院"></p>
<ul>
<li>記憶體是一對的，左方是 <code>key</code> 右方是<code>值</code>。在 hoisting 創造環境這階段時，記憶體會先放入 key 。</li>
<li>宣告變數時會先把 a 放到記憶體左邊位置，但還不會給它值。所以這時去檢查它時值會出現 <code>undefined</code>，直到執行時才會把值套用上來。<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20221001/20119743O9CE7Vimhy.png" alt="出處：六角學院"></li>
</ul>
<p>&#x2F;</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Ming</span> = <span class="string">&#x27;小明&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Ming</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ========== 拆解</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Ming</span>;   <span class="comment">// 創造階段</span></span><br><span class="line"><span class="title class_">Ming</span> = <span class="string">&#x27;小明&#x27;</span>;   <span class="comment">// 執行階段</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Ming</span>);</span><br></pre></td></tr></table></figure>

<p><strong>上方程式碼執行時會分為兩個步驟 :</strong></p>
<ol>
<li>會先宣告這個變數 <code>var Ming;</code>。</li>
<li>把小明的值賦予到 <code>Ming</code>。</li>
<li>此現象稱為提升。</li>
</ol>
<p><strong>範例 2</strong></p>
<p><img src="https://ithelp.ithome.com.tw/upload/images/20221001/20119743Hb6etIINVM.png" alt="出處：六角學院"></p>
<p><strong>創造階段</strong></p>
<ol>
<li>準備好所有變數的記憶體空間，因為未到執行階段所以未賦予值，值目前呈現 <code>undefined</code>。</li>
<li>在創造環境把記憶體空間準備好，此流程稱為提升 Hoisting。</li>
</ol>
<h3 id="➋-創造階段"><a href="#➋-創造階段" class="headerlink" title="➋ 創造階段"></a>➋ 創造階段</h3><p><img src="https://ithelp.ithome.com.tw/upload/images/20221001/201197436YwI50IPym.png" alt="圖解案例 ▲"></p>
<ul>
<li>函式陳述式 ( Function statement ) 在創造階段就會優先載入。與變數宣告 ( 像 Function expression ) 有些不同。</li>
<li>上方圖解案例中，創造階段變數與函式差異 :<ul>
<li>變數 : 在創造階段變數 a 是不會賦予值，只會先有一個記憶體空間。</li>
<li>函式 : 函式在創在階段，會把記憶體空間與整個函式的內容都準備好並載入進來。所以<strong>函式在創造階段就已經可以運行</strong>。</li>
</ul>
</li>
</ul>
<h3 id="函式陳述式範例"><a href="#函式陳述式範例" class="headerlink" title="函式陳述式範例"></a>函式陳述式範例</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">callName</span>();</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">callName</span>(<span class="params"></span>) &#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;呼叫小明&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>拆解：</strong></p>
<ol>
<li>函式在創造階段就已經把記憶體和函式準備好了，所以 <code>callName();</code> 移到最上方是不會出錯的。</li>
<li><code>function callName()</code> 會被移至上方。</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 創造階段</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">callName</span>(<span class="params"></span>) &#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;呼叫小明&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 執行</span></span><br><span class="line"><span class="title function_">callName</span>();</span><br></pre></td></tr></table></figure>

<p><strong>答案：</strong> 會印出 <code>呼叫小明</code></p>
<h3 id="函式表達式-範例"><a href="#函式表達式-範例" class="headerlink" title="函式表達式 範例"></a>函式表達式 範例</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 可正確呼叫</span></span><br><span class="line"><span class="keyword">var</span> callName = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;呼叫小明&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">callName</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="title function_">callName</span>();</span><br><span class="line"><span class="keyword">var</span> callName = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;呼叫小明&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>解說 :</strong></p>
<ul>
<li><p>函式表達式創造階段與變數一樣會先提出變數給予記憶體空間。</p>
</li>
<li><p>在執行階段，才把 function 賦予到變數 callName 上。要運行這段函式必須在函式賦予到值上才能運行此段函式。</p>
  <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 創造階段</span></span><br><span class="line"><span class="keyword">var</span> callName;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 執行階段</span></span><br><span class="line">callName = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;呼叫小明&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">callName</span>();</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="函式表達式-函式陳述式-範例-1"><a href="#函式表達式-函式陳述式-範例-1" class="headerlink" title="函式表達式 + 函式陳述式- 範例 1"></a>函式表達式 + 函式陳述式- 範例 1</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 題目</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">callName</span>(<span class="params"></span>) &#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;呼叫小明 1&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> callName = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;呼叫小明 2&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">callName</span>();</span><br></pre></td></tr></table></figure>

<p><strong>解說 :</strong></p>
<ul>
<li><p>在創造階段函式優先，所以函式先被提至最上面 → 才換變數往前移 → 並賦予值的動作。</p>
  <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 創造階段</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">callName</span>(<span class="params"></span>) &#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;呼叫小明 1&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> callName;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 執行階段</span></span><br><span class="line">callName = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;呼叫小明 2&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">callName</span>();</span><br></pre></td></tr></table></figure>
</li>
<li><p>在執行階段，變數 <code>callName</code> 重新被另一個函式 <code>function() &#123; console.log(&#39;呼叫小明 2&#39;);&#125;</code> 給覆蓋掉，所以在執行 <code>callName();</code> 會出現 <code>呼叫小明 2</code>。</p>
<ul>
<li>無論是函式表達式 <code>var callName = function()&#123;&#125;</code> 在前或是函式陳述式 <code>function callName()</code> 在前，都會印出 <code>呼叫小明 2</code>。</li>
</ul>
</li>
</ul>
<p><strong>答案：</strong><code>呼叫小明 2</code></p>
<h3 id="函式表達式-函式陳述式-範例-2-延續-1"><a href="#函式表達式-函式陳述式-範例-2-延續-1" class="headerlink" title="函式表達式 + 函式陳述式- 範例 2 ( 延續 1 )"></a>函式表達式 + 函式陳述式- 範例 2 ( 延續 1 )</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 題目</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">callName</span>(<span class="params"></span>) &#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;呼叫小明 1&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">callName</span>();</span><br><span class="line"><span class="keyword">var</span> callName = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;呼叫小明 2&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>拆解 :</strong></p>
<ol>
<li><p>提升順序 : 函式 → 變數 → 賦予值。</p>
 <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 創造階段</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">callName</span>(<span class="params"></span>) &#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;呼叫小明 1&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> callName;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 執行階段</span></span><br><span class="line"><span class="title function_">callName</span>();</span><br><span class="line">callName = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;呼叫小明 2&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>創造階段先宣告函式，定義變數 callName 為空值。執行 <code>callName();</code> 這個函式取得 <code>console.log(&#39;呼叫小明 1&#39;);</code>。</p>
</li>
</ol>
<p><strong>答案：</strong><code>呼叫小明 1&#39;</code></p>
<h3 id="函式陳述式-範例-3"><a href="#函式陳述式-範例-3" class="headerlink" title="函式陳述式- 範例 3"></a>函式陳述式- 範例 3</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">callName</span>();</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">callName</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Ming</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Ming</span> = <span class="string">&#x27;小明&#x27;</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>答案</strong></p>
<p>  答案為 <code>undefined</code>。</p>
<ul>
<li><p>先把創造階段與執行階段分開。提出函式 → 提出變數 → 賦予值。</p>
  <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 創造</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">callName</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Ming</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Ming</span>;</span><br><span class="line"><span class="comment">// 執行</span></span><br><span class="line"><span class="title function_">callName</span>();</span><br><span class="line"><span class="title class_">Ming</span> = <span class="string">&#x27;小明&#x27;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>創造階段就先宣告函式，定義這個變數為空值。呼叫 <code>callName();</code> 這個函式目前所取的值是全域的 <code>Ming</code>，目前這個變數 <code>Ming</code> 還未被賦予值，答案就為 <code>undefined</code>。</p>
</li>
</ul>
</li>
</ul>
<h2 id="參考資訊"><a href="#參考資訊" class="headerlink" title="參考資訊"></a>參考資訊</h2><ul>
<li>六角學院 - JavaScript 核心篇</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>2022年iThome鐵人賽</tag>
        <tag>Hoisting</tag>
      </tags>
  </entry>
  <entry>
    <title>Day18 | JS 關於 let、 const、var</title>
    <url>/javascript/20230402/408647625/</url>
    <content><![CDATA[<p>ES6 的 <code>let</code>、<code>const</code> 是為了改變 <code>var</code> 在宣告變數上的一些問題。</p>
<h2 id="❐-var-宣告可能會產生的問題"><a href="#❐-var-宣告可能會產生的問題" class="headerlink" title="❐ var 宣告可能會產生的問題"></a>❐ var 宣告可能會產生的問題</h2><ul>
<li><code>var</code> 具函式作用域，所以不受區塊限制，但會受到函式範圍限制。</li>
<li><code>var</code> 也是一種宣告變數的方式，可覆寫值，與 let 類似但相對較不嚴謹，但目前已經很少使用 <code>var</code> 因為較容易發生奇怪的問題 ( <code>var</code> 會汙染全域變數，容易造成不可預期的錯誤 )。</li>
</ul>
<h3 id="範例-1"><a href="#範例-1" class="headerlink" title="範例 1"></a>範例 1</h3><ol>
<li><p>程式量大的時候你可能會忘記取過什麼變數，所以會出現重複宣告的情況，蓋掉之前寫的變數的值。</p>
 <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;ccc&#x27;</span>;</span><br><span class="line"><span class="comment">// var 是允許重複宣告變數的，且 console 不會丟任何錯誤提示給你，而 let 和 const 會。</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>var</code> 在函式外宣告屬於 global variables（全域變數，意即 JS 任何地方都可以使用），在函式內則為該函式整個區域都可以使用 → 這是屬於 scope（作用域的範疇）。主要都是圍繞在 Redeclartion（重新宣告）、Scope（作用域）、Hoisiting（提升）、TDZ 這幾個主題，有興趣的話也可以查查這些關鍵字。</p>
 <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">&quot;andy&quot;</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i&lt;=<span class="number">3</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (i = <span class="number">3</span>) &#123;</span><br><span class="line">    num = i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;name&#125;</span>的座號是 <span class="subst">$&#123;num&#125;</span> 號`</span>);     </span><br><span class="line"><span class="comment">// 可以取得 for 迴圈的變數 num，若是改用 let 宣告 num，它是取不到 for 迴圈內的 num 的，會報錯</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sayHi</span>();</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="範例-2-for-迴圈"><a href="#範例-2-for-迴圈" class="headerlink" title="範例 2. for 迴圈"></a>範例 2. for 迴圈</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`for 迴圈內 <span class="subst">$&#123;i&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`for 迴圈外 <span class="subst">$&#123;i&#125;</span>`</span>)</span><br></pre></td></tr></table></figure>

<p><strong>for 迴圈使用 var 宣告 <code>i</code> 會污染全域：</strong></p>
<ul>
<li>for 迴圈中，<code>var i = 0;</code> 中的 <code>i</code> 因為是用 <code>var</code> 宣告，所以為全域變數，在 for 迴圈外也取得到，所以如果想要把 i 控制在 for 迴圈內就會產生一些問題。<ul>
<li>這邊可透過 <code>window.i</code> 來查看並找到 <code>i</code> 的值。</li>
</ul>
</li>
</ul>
<p>範例 2. 出處：六角學院 JavaScript 核心篇 &#x2F; Let, Const 基本概念</p>
<h3 id="範例-3-判斷式"><a href="#範例-3-判斷式" class="headerlink" title="範例 3. 判斷式"></a>範例 3. 判斷式</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> answer = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (answer) &#123;</span><br><span class="line">  <span class="keyword">var</span> myFeedback = <span class="string">&#x27;同意&#x27;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`判斷是內：<span class="subst">$&#123;myFeedback&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`判斷是外：<span class="subst">$&#123;myFeedback&#125;</span>`</span>);</span><br></pre></td></tr></table></figure>

<p><strong>除了上方的 for 迴圈，在判斷式也會有相同問題 → 污染全域</strong></p>
<h2 id="❐-let"><a href="#❐-let" class="headerlink" title="❐ let"></a>❐ let</h2><ul>
<li><code>let</code> 宣告的變數可重新賦予新的值。</li>
<li>可取出 <code>let</code> 宣告過的變數，並重新賦予新的值。但不可使用 <code>let</code> 再重新宣告相同的變數，會出現錯誤訊息 <code>Uncaught SyntaxError: Identifier &#39;myName&#39; has already been declared</code>，這樣就可以避免同一個作用域下使用 let 做重覆宣告。</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 正確用法：宣告過的變數重新賦予新的值</span></span><br><span class="line"><span class="keyword">let</span> ricePrice = <span class="number">100</span>;</span><br><span class="line">ricePrice = <span class="number">150</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ricePice);   <span class="comment">// 150</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 錯誤用法，使用let 重新宣告相同的變數</span></span><br><span class="line"><span class="keyword">let</span> myName = <span class="string">&#x27;Carrie&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> myName = <span class="string">&#x27;CarrieT&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="❐-const"><a href="#❐-const" class="headerlink" title="❐ const"></a>❐ const</h2><ul>
<li><p><code>const</code> 是宣告一個常數，所以基本上使用 <code>const</code> 宣告的變數是沒辦法被調整的。( cosnt 在原始型別難以被覆寫 )</p>
</li>
<li><p>隨時需要做調整的變數值的話可使用 <code>let</code>，不會去更改值的話可使用 <code>const</code>。</p>
</li>
<li><p><code>const</code> 在 object <code>&#123;&#125;</code> 與 Array <code>[]</code> 中使用是可被修改的。除非使用 <code>Object.freeze(變數);</code> 會凍結裡面的內容無法做修改。<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20221003/20119743Udt3GrDNYJ.png" alt="在 object `{}` 與 Array `[]` 中使用是可被修改的"></p>
<p>  <img src="https://ithelp.ithome.com.tw/upload/images/20221003/201197434wcNxI2eN4.png" alt="使用 `Object.freeze(變數);` 會凍結裡面的內容無法做修改"></p>
</li>
</ul>
<h2 id="❐-var、let、const-作用域"><a href="#❐-var、let、const-作用域" class="headerlink" title="❐ var、let、const 作用域"></a>❐ var、let、const 作用域</h2><ul>
<li>所謂作用域即「變數有效的作用範圍」，最大為全域作用域範圍，指變數有效範圍是全部範圍；區塊作用域指的是 <code>&#123;&#125;</code> 大括號的範圍。</li>
<li>ES6 前，沒有區塊作用域概念 ( block funciton )，僅有全域 ( global scope ) 與函式作用域 （ function scope ），<code>var</code> 宣告的變數具有函式作用域的特性，代表**切分變數有效範圍的最小單位是 <code>function</code>**。</li>
<li>ES6 後，新增區塊作用域概念 ( block funciton )，let &#x2F; const 宣告的變數才具有區塊作用域的特性，<strong>切分變數最小單位的有效範圍式是 <code>&#123;&#125;</code> block</strong>。</li>
</ul>
<h3 id="➊-var-具函式作用域"><a href="#➊-var-具函式作用域" class="headerlink" title="➊ var 具函式作用域"></a>➊ var 具函式作用域</h3><blockquote>
<p><code>var</code> 具函式作用域，所以不受區塊 <code>&#123;&#125;</code> 限制，但會受到函式 <code>function</code> 範圍限制。</p>
</blockquote>
<p>因為 var 具函式作用域，所以上方「var 可能會產生的問題 」中範例 1、2、3 方式都會污染全域，除非用 <code>function</code> 包住。可見 function 外就讀取不到 <code>i</code> 的變數 ( <code>i is not defined</code> )。</p>
<p><strong>範例１.</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 這邊使用立即函式包覆</span></span><br><span class="line"><span class="comment">// 也可移除立即函式把 var 調整為 let</span></span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`for 迴圈內 <span class="subst">$&#123;i&#125;</span>`</span>)</span><br><span class="line"> &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`for 迴圈外 <span class="subst">$&#123;i&#125;</span>`</span>)</span><br></pre></td></tr></table></figure>

<p><strong>範例 2.</strong></p>
<p><code>var</code> 具函式作用域，所以不受區塊限制，但會受到函式範圍限制</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// --- var不受區塊限制，但會受到函式範圍限制</span></span><br><span class="line"><span class="comment">// --範例一</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">call</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> isCall = <span class="string">&#x27;Carrie&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(isCall);  <span class="comment">// Uncaught ReferenceError: isCall is not defined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// --範例二</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">var</span> isCall = <span class="string">&#x27;Carrie&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(isCall ); <span class="comment">//Carrie</span></span><br></pre></td></tr></table></figure>

<h3 id="➋-const、let-具區塊作用域"><a href="#➋-const、let-具區塊作用域" class="headerlink" title="➋ const、let 具區塊作用域"></a>➋ const、let 具區塊作用域</h3><p><strong>範例 １.</strong></p>
<p><code>const</code>、<code>let</code> 具區塊作用域，所以有效作用域範圍會被限制在該區域中</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// --範例一</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> isCall = <span class="string">&#x27;Carrie&#x27;</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(isCall );  </span><br><span class="line"><span class="comment">// --範例二</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">call</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> isCall = <span class="string">&#x27;Carrie&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(isCall );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 皆印出 Uncaught ReferenceError: isCall is not defined</span></span><br></pre></td></tr></table></figure>

<h2 id="❐-let-、const-實作技巧"><a href="#❐-let-、const-實作技巧" class="headerlink" title="❐ let 、const 實作技巧"></a>❐ let 、const 實作技巧</h2><h3 id="實作-1-for-迴圈使用-var-宣告"><a href="#實作-1-for-迴圈使用-var-宣告" class="headerlink" title="實作 1. for 迴圈使用 var 宣告"></a>實作 1. for 迴圈使用 var 宣告</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`這執行第 <span class="subst">$&#123;i&#125;</span> 次`</span>);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br></pre></td></tr></table></figure>

<p><strong>解析：</strong></p>
<p>for 迴圈中使用 <code>var</code> 宣告變數 <code>i</code> 是全域變數，所以 for 迴圈外 <code>console.log(i);</code> 中的 <code>i</code> 會是執行到最後的結果 10 ( 為 0 到 9 個執行一次的狀態 )。</p>
<ul>
<li><code>setTimeout</code> 為非同步的程式， JS 會放到事件緒列內，等到所有程式都執行完才回來執行這個非同步程式。所以 <code>setTimeout</code> 中的 <code>i</code> 會是全域變數的 <code>i</code> 並不是 for 迴圈內的 <code>i</code>。</li>
</ul>
<p><strong>答案：</strong></p>
<ul>
<li>所以無法如預期中依依印出 0 到 9</li>
<li><code>console.log(i);</code> 會印出 <code>10</code>、<code>setTimeout</code> 會印出 10 次 <code>這執行第 10 次</code>。</li>
</ul>
<h3 id="實作-2-for-迴圈使用-let-宣告"><a href="#實作-2-for-迴圈使用-let-宣告" class="headerlink" title="實作 2. for 迴圈使用 let 宣告"></a>實作 2. for 迴圈使用 let 宣告</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`這執行第 <span class="subst">$&#123;i&#125;</span> 次`</span>);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br></pre></td></tr></table></figure>

<p><strong>解析：</strong></p>
<ul>
<li>for 迴圈中使用 <code>let</code> 宣告變數 <code>i</code> 就不會是全域變數，因為 <code>let</code> 為區塊作用域只會在區塊 <code>&#123;&#125;</code> 內產生作用</li>
</ul>
<p><strong>答案：</strong></p>
<ul>
<li><code>setTimeout</code> 會依序印出 <code>這執行第 0 次</code> ～ <code>這執行第 9 次</code>。</li>
<li><code>console.log(i);</code> 會印出 <code>Uncaught ReferenceError: i is not defined</code>。<ul>
<li>因為使用 <code>let</code> 宣告的關係，所以 <code>i</code> 並非全域變數。</li>
</ul>
</li>
</ul>
<h2 id="❐-Let-有沒有-Hoisting？暫時性死區介紹"><a href="#❐-Let-有沒有-Hoisting？暫時性死區介紹" class="headerlink" title="❐ Let 有沒有 Hoisting？暫時性死區介紹"></a>❐ <strong><strong>Let 有沒有 Hoisting？暫時性死區介紹</strong></strong></h2><p>Hoisting 分創造與執行兩階段，下方實作範例中來看看 <code>var</code> 與 <code>let</code> 宣告會有什麼不同處。</p>
<h3 id="實作１-var"><a href="#實作１-var" class="headerlink" title="實作１. var"></a>實作１. var</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Ming</span>);</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Ming</span> = <span class="string">&#x27;小明&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><strong>解析：</strong></p>
<p>Hoisting 分創造與執行兩階段，以上方程式碼來說會拆分為下面形式：</p>
<ul>
<li>宣告的變數會先被移至創造階段 → <code>var Ming;</code></li>
<li>執行階段再賦予值 → <code>Ming = &#39;小明&#39;;</code></li>
<li>在創在階段 <code>var Ming;</code> 為 <code>undefined</code>，如果在賦予值前就先 <code>console.log(Ming);</code> 要去取 <code>Ming</code> 的值就會印出 <code>undefined</code>。</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">//----- 創造階段</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Ming</span>;</span><br><span class="line"><span class="comment">//----- 執行階段</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Ming</span>);</span><br><span class="line"><span class="title class_">Ming</span> = <span class="string">&#x27;小明&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><strong>答案：</strong><br>印出 <code>undefined</code></p>
<h3 id="實作-2-let"><a href="#實作-2-let" class="headerlink" title="實作 2. let"></a>實作 2. let</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Ming</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Ming</span> = <span class="string">&#x27;小明&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><strong>解析：</strong></p>
<ul>
<li><code>let</code> 在創造階段會產生「 暫時性死區 TDZ 」，在此區域是無法取得值的。</li>
<li>所以 <code>let</code> 類似 Hoisting 提升的概念，只是它在提升時不會賦予變數 <code>undefined</code> 的值，而是出現「 暫時性死區 TDZ 」，這個暫時性死區無法存取這個變數。</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">//----- 創造階段</span></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Ming</span>;  <span class="comment">// 暫時性死區 TDZ</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//----- 執行階段</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Ming</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Ming</span> = <span class="string">&#x27;小明&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><strong>答案：</strong></p>
<p>會顯示錯誤訊息 <code>Uncaught ReferenceError: Cannot access &#39;Ming&#39; before initialization</code> ( 無法在初始化前去取得此變數 )。</p>
<h3 id="實作-3-let"><a href="#實作-3-let" class="headerlink" title="實作 3. let"></a>實作 3. let</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> a);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> myName);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myName = <span class="string">&#x27;&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><strong>解析：</strong></p>
<ul>
<li><code>let</code> 一樣有創造階段，但 let 在創造階段會產生「 暫時性死區 TDZ 」，在此區域是無法取得值的，所以會顯示錯誤訊息 <code>Uncaught ReferenceError: Cannot access &#39;Ming&#39; before initialization</code></li>
</ul>
<p><strong>答案：</strong></p>
<ul>
<li><code>console.log(typeof a);</code> 印出 <code>undefined</code>。</li>
<li><code>console.log(typeof myName);</code> 印出錯誤訊息 <code>Uncaught ReferenceError: Cannot access &#39;Ming&#39; before initialization</code> ( 無法在初始化前去取得此變數 )。</li>
</ul>
<h2 id="❐-Let-及-Const-課後練習"><a href="#❐-Let-及-Const-課後練習" class="headerlink" title="❐ Let 及 Const - 課後練習"></a>❐ <strong><strong>Let 及 Const - 課後練習</strong></strong></h2><h3 id="課後練習-1"><a href="#課後練習-1" class="headerlink" title="課後練習 1"></a>課後練習 1</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">a</span>();</span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>答案：</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">//--創造</span></span><br><span class="line"><span class="keyword">let</span> a;</span><br><span class="line"><span class="comment">//--執行</span></span><br><span class="line"><span class="title function_">a</span>();</span><br><span class="line">a = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>印出：<code>Uncaught ReferenceError: Cannot access &#39;a&#39; before initialization</code></p>
<h3 id="課後練習-2-課程上我們了解到-let-會有暫時性死區問題，所以不能在變數宣告建立之前使用該變數，那-const-呢"><a href="#課後練習-2-課程上我們了解到-let-會有暫時性死區問題，所以不能在變數宣告建立之前使用該變數，那-const-呢" class="headerlink" title="課後練習 2. 課程上我們了解到 let 會有暫時性死區問題，所以不能在變數宣告建立之前使用該變數，那 const 呢?"></a>課後練習 2. 課程上我們了解到 let 會有暫時性死區問題，所以不能在變數宣告建立之前使用該變數，那 const 呢?</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> a = <span class="string">&#x27;Casper&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><strong>答案：</strong></p>
<p>印出：<code>Uncaught ReferenceError: Cannot access &#39;a&#39; before initialization</code></p>
<h3 id="課後練習-3-同前面幾題，如果我們接下來將-console-log-移至後方會得什麼"><a href="#課後練習-3-同前面幾題，如果我們接下來將-console-log-移至後方會得什麼" class="headerlink" title="課後練習 3. 同前面幾題，如果我們接下來將 console.log() 移至後方會得什麼?"></a>課後練習 3. 同前面幾題，如果我們接下來將 console.log() 移至後方會得什麼?</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br></pre></td></tr></table></figure>

<p><strong>答案：</strong></p>
<p><code>undefined</code></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">//--創造</span></span><br><span class="line"><span class="keyword">let</span> a;</span><br><span class="line"><span class="comment">//--執行</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br></pre></td></tr></table></figure>

<h3 id="課後練習-4-同上題，若改成-const-呢"><a href="#課後練習-4-同上題，若改成-const-呢" class="headerlink" title="課後練習 4. 同上題，若改成 const 呢?"></a>課後練習 4. <strong>同上題，若改成 const 呢?</strong></h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br></pre></td></tr></table></figure>

<p><strong>答案：</strong></p>
<p><code>Uncaught SyntaxError: Missing initializer in const declaration</code> ( const 宣告缺少初始化 )</p>
<h3 id="課後練習-5-請問-console-log-將會出現什麼"><a href="#課後練習-5-請問-console-log-將會出現什麼" class="headerlink" title="課後練習 5. 請問 console.log() 將會出現什麼?"></a>課後練習 5. <strong>請問 console.log() 將會出現什麼?</strong></h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [];</span><br><span class="line">array.<span class="title function_">push</span>(<span class="string">&#x27;Casper&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array);</span><br></pre></td></tr></table></figure>

<p><strong>答案：</strong></p>
<p><code>[’Casper’]</code></p>
<h3 id="課後練習-6-請問-console-log-結果是什麼"><a href="#課後練習-6-請問-console-log-結果是什麼" class="headerlink" title="課後練習 6. 請問 console.log() 結果是什麼?"></a>課後練習 6. <strong>請問 console.log() 結果是什麼?</strong></h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fu</span>(<span class="params"></span>) &#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"> <span class="keyword">let</span> a = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fu</span>();</span><br></pre></td></tr></table></figure>

<p><strong>答案：</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">//創造</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fu</span>(<span class="params"></span>) &#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"> <span class="keyword">let</span> a = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> a;</span><br><span class="line"></span><br><span class="line"><span class="comment">//執行</span></span><br><span class="line">a = <span class="number">10</span>;</span><br><span class="line"><span class="title function_">fu</span>();</span><br></pre></td></tr></table></figure>

<ul>
<li>fu() 內<ul>
<li><p><code>let</code> 在創造階段為暫時性死區，</p>
<pre><code><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fu</span>(<span class="params"></span>) &#123;</span><br><span class="line"> <span class="comment">// 創造</span></span><br><span class="line"> <span class="keyword">let</span> a; <span class="comment">//暫時性死區</span></span><br><span class="line"> <span class="comment">// 執行</span></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"> a = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
<li><p>另外 <code>let</code> 為區塊作用域，在 <code>&#123;&#125;</code> 執行完記憶體就會釋放掉。所以答案為 <code>Uncaught ReferenceError: Cannot access &#39;a&#39; before initialization</code>。</p>
</li>
</ul>
</li>
</ul>
<h3 id="課後練習-7-請問以下-console-log-將會出現什麼"><a href="#課後練習-7-請問以下-console-log-將會出現什麼" class="headerlink" title="課後練習 7. 請問以下 console.log() 將會出現什麼?"></a>課後練習 7. <strong>請問以下 console.log() 將會出現什麼?</strong></h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fu</span>(<span class="params"></span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line">fu.<span class="property">fu</span> = <span class="string">&#x27;QQ&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> a = fu;</span><br><span class="line">a.<span class="property">fu</span> = <span class="string">&#x27;Casper&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">fu</span>);</span><br></pre></td></tr></table></figure>

<p><strong>答案：</strong></p>
<ul>
<li>答案為 <code>Casper</code>。</li>
<li>函式為物件型別，所以是可以新增屬性的。後面的 <code>a.fu</code> 會覆蓋掉前面的 <code>fu.fu</code> 。</li>
</ul>
<h2 id="參考資訊"><a href="#參考資訊" class="headerlink" title="參考資訊"></a>參考資訊</h2><ul>
<li>六角學院 - JavaScript 核心篇</li>
<li><a href="https://www.programfarmer.com/articles/javaScript/javascript-var-let-const-for-loop">JS 宣告變數， var 與 let &#x2F; const 差異</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>2022年iThome鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>Day19 | JS 陣列與物件</title>
    <url>/javascript/20230402/3874156074/</url>
    <content><![CDATA[<h2 id="❒-物件結構"><a href="#❒-物件結構" class="headerlink" title="❒ 物件結構"></a>❒ 物件結構</h2><h3 id="宣告物件的兩種方式："><a href="#宣告物件的兩種方式：" class="headerlink" title="宣告物件的兩種方式："></a><strong>宣告物件的兩種方式：</strong></h3><ul>
<li>物件實字 ( 較常用 )</li>
<li>建構式</li>
</ul>
<h3 id="➊-物件實字"><a href="#➊-物件實字" class="headerlink" title="➊ 物件實字"></a>➊ <strong>物件實字</strong></h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 結構</span></span><br><span class="line"><span class="keyword">var</span> family = &#123;&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>透過物件實字定義物件，就可於物件中加入值：</strong></p>
<ul>
<li>物件內分別加入屬性 ( property ) 及屬性值 ( value )，如要增加多個可使用逗號隔開。<ul>
<li><code>property</code><ul>
<li>一個屬性對應一個屬性值。</li>
<li>屬性名稱不論是否為數字都會是字串型別。</li>
</ul>
</li>
<li><code>value</code> : 可以是物件、函式、純值。</li>
</ul>
</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 透過物件實字定義物件，就可於物件中加入值</span></span><br><span class="line"><span class="keyword">var</span> family = &#123;</span><br><span class="line"> <span class="attr">property</span>: value,</span><br><span class="line"> <span class="attr">property2</span>: value</span><br><span class="line"> ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="➋-建構式"><a href="#➋-建構式" class="headerlink" title="➋ 建構式"></a>➋ 建構式</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 架構</span></span><br><span class="line"><span class="keyword">var</span> family = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br></pre></td></tr></table></figure>

<p><strong>建構式與物件實字不同使用上要注意的部分：</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> number = <span class="keyword">new</span> <span class="title class_">Object</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> text = <span class="keyword">new</span> <span class="title class_">Object</span>(<span class="string">&#x27;hey&#x27;</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>插入數字在 <code>new Object</code> 括號內，會產生 number 的為包裹物件。</li>
<li>插入字串在 <code>new Object</code> 括號內，會產生 string 的為包裹物件。<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20221004/20119743nacCuOzKjM.png" alt="截圖"></li>
</ul>
<h2 id="❒-物件取值、新增、刪除"><a href="#❒-物件取值、新增、刪除" class="headerlink" title="❒ 物件取值、新增、刪除"></a>❒ 物件取值、新增、刪除</h2><p>關於物件與陣列的更多方法可參考下篇文章：Day20 | 陣列與物件常用的方法</p>
<h3 id="取值"><a href="#取值" class="headerlink" title="取值"></a>取值</h3><ol>
<li><code>.</code> 的方式 → <code>object.屬性</code></li>
<li>字串取值的方式 → <code>object[&#39;屬性&#39;]</code></li>
</ol>
<h3 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h3><ol>
<li><code>.</code> 的方式 → <code>object.屬性</code></li>
<li>字串取值的方式 → <code>object[&#39;屬性&#39;]</code></li>
</ol>
<h3 id="刪除"><a href="#刪除" class="headerlink" title="刪除"></a>刪除</h3><ol>
<li><code>delete object.屬性</code></li>
<li><code>delete object[&#39;屬性&#39;]</code></li>
</ol>
<h2 id="❒-變數及物件屬性的差異"><a href="#❒-變數及物件屬性的差異" class="headerlink" title="❒ 變數及物件屬性的差異"></a>❒ <strong><strong>變數及物件屬性的差異</strong></strong></h2><blockquote>
<p>變數無法被刪除，屬性才可以被刪除</p>
</blockquote>
<p><strong>範例</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">b = <span class="number">2</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>); </span><br></pre></td></tr></table></figure>

<ul>
<li><p>開發者工具中以 <code>console.log(window);</code> 可見 <code>a</code> 與 <code>b</code> 都在 window 根目錄下。<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20221004/201197437iinR8uT2F.png" alt="開發者工具截圖"></p>
</li>
<li><p><code>a</code> 是透過變數的方式新增 ( <code>var</code> 、<code>let</code>、<code>const</code> 宣告的變數 )。</p>
</li>
<li><p><code>b</code> 是透過屬性的方式新增，等同於 <code>window.b</code> ( window 內的屬性 )。</p>
</li>
<li><p>承上，所以使用 <code>delete b;</code> 是可刪除 <code>b</code> 屬性，但使用 <code>delete a;</code> 是無法刪除 <code>a</code> 變數。</p>
</li>
</ul>
<h2 id="❒-物件與純值"><a href="#❒-物件與純值" class="headerlink" title="❒ 物件與純值"></a>❒ 物件與純值</h2><blockquote>
<p>純值無法新增屬性，物件 ( 陣列、函式 ) 可以。</p>
</blockquote>
<ul>
<li>JavaScript 有兩種型別，分別為物件與純值。<ul>
<li>純值：基本型別 ( number、string、boolean、null、undefined )。</li>
</ul>
</li>
<li>除了物件外，陣列、函式也都是物件型別，所以可以新增屬性。<ul>
<li>函式比較特別的部分為使用 <code>typeof</code> 會印出 function，因為函式屬於物件型別下的一個子型別，可透過下方範例2 來驗證函式為物件型別。</li>
</ul>
</li>
</ul>
<h3 id="範例-1-純值無法新增屬性，物件可以"><a href="#範例-1-純值無法新增屬性，物件可以" class="headerlink" title="範例 1. 純值無法新增屬性，物件可以"></a>範例 1. 純值無法新增屬性，物件可以</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> nameIs = &#123;&#125;;</span><br><span class="line">nameIs.<span class="property">dog</span> = <span class="string">&#x27;小黑&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nameIs);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nameString = <span class="string">&#x27;小白&#x27;</span>;</span><br><span class="line">nameString.<span class="property">dog</span> = <span class="string">&#x27;小小白&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nameString);</span><br></pre></td></tr></table></figure>

<ul>
<li><code>console.log(nameIs);</code> 印出 <code>&#123;dog: &#39;小黑&#39;&#125;</code>。</li>
<li><code>console.log(nameString);</code> 印出 <code>小白</code>。因為純值無法新增屬性。</li>
</ul>
<h3 id="範例-2-函式也為物件型別，可以新增屬性"><a href="#範例-2-函式也為物件型別，可以新增屬性" class="headerlink" title="範例 2. 函式也為物件型別，可以新增屬性"></a>範例 2. 函式也為物件型別，可以新增屬性</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">callName</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;呼叫小明&#x27;</span>);</span><br><span class="line">&#125; </span><br><span class="line">callName.<span class="property">ming</span> = <span class="string">&#x27;小明&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">dir</span>(callName);</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>console.dir</code> 可看見物件的所有屬性內容，使用此方式可看到開發者工具中函式變成一個物件形式，裡面多了一個 <code>caller</code> ( 被呼叫的能力 )。<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20221004/20119743xsU5uKMgC0.png" alt="開發者工具截圖"></p>
</li>
<li><p>於 <code>callName</code>  函式新增屬性，再看看開發者工具，裡面多了一個剛剛新增個屬性。<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20221004/20119743yg64RKJp7A.png" alt="開發者工具截圖"></p>
</li>
<li><p>❗ 注意：函式裡 <code>name</code> 屬性是無法被覆蓋的，所以函式新增屬性不可為 <code>name</code>。</p>
</li>
</ul>
<h2 id="❒-未定義的物件屬性預設值"><a href="#❒-未定義的物件屬性預設值" class="headerlink" title="❒ 未定義的物件屬性預設值"></a>❒ <strong><strong>未定義的物件屬性預設值</strong></strong></h2><p>在物件下未定義的屬性它的屬性值會是 <code>undefined</code>，在 <code>undefined</code> 上是無法新增任何屬性，如下範例 1。</p>
<h3 id="範例-1-在物件下於未定義的屬性新增屬性值"><a href="#範例-1-在物件下於未定義的屬性新增屬性值" class="headerlink" title="範例 1. 在物件下於未定義的屬性新增屬性值"></a>範例 1. 在物件下於未定義的屬性新增屬性值</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> family = &#123;</span><br><span class="line">  <span class="attr">dog</span>: <span class="number">2</span>,</span><br><span class="line">&#125;</span><br><span class="line">family.<span class="property">father</span>.<span class="property">child</span> = <span class="number">3</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>會顯示錯誤訊息：<code>Uncaught TypeError: Cannot set properties of undefined (setting &#39;child&#39;)</code></li>
<li>因為 <code>father</code> 並沒有定義 ( 不存在 )，所以它的值為 <code>undefined</code> ，在 <code>undefined</code> 上是無法新增任何屬性。</li>
</ul>
<h3 id="範例-1-的解決方法"><a href="#範例-1-的解決方法" class="headerlink" title="範例 1. 的解決方法"></a>範例 1. 的解決方法</h3><p>➊ 於物件內新增 <code>father</code> 屬性，屬性值為空物件。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> family = &#123;</span><br><span class="line">  <span class="attr">dog</span>: <span class="number">2</span>,</span><br><span class="line"> <span class="attr">father</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">family.<span class="property">father</span>.<span class="property">child</span> = <span class="number">3</span>;</span><br></pre></td></tr></table></figure>

<p>➋ 在物件上新增屬性，此屬性直接定義物件結構</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> family = &#123;</span><br><span class="line">  <span class="attr">dog</span>: <span class="number">2</span>,</span><br><span class="line">&#125;</span><br><span class="line">family.<span class="property">father</span> = &#123;</span><br><span class="line">  <span class="attr">child</span>: <span class="number">3</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(family);</span><br></pre></td></tr></table></figure>

<h2 id="❒-陣列結構"><a href="#❒-陣列結構" class="headerlink" title="❒ 陣列結構"></a>❒ 陣列結構</h2><p>陣列也是物件型別的一種，但使用上還是有些不同。</p>
<h3 id="宣告陣列的方式："><a href="#宣告陣列的方式：" class="headerlink" title="宣告陣列的方式："></a><strong>宣告陣列的方式：</strong></h3><ul>
<li>陣列實字</li>
</ul>
<h3 id="➊-陣列實字"><a href="#➊-陣列實字" class="headerlink" title="➊ 陣列實字"></a>➊ 陣列<strong>實字</strong></h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以中括號來定義一個陣列</span></span><br><span class="line"><span class="keyword">var</span> newArray = [ </span><br><span class="line"> <span class="number">1</span>, </span><br><span class="line"> <span class="string">&#x27;text&#x27;</span>, </span><br><span class="line"> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line"> &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<ul>
<li>與物件不同的是陣列不需要屬性與屬性值，可直接插入數值或其他型別。</li>
<li>另外陣列內也可以插入一個物件。</li>
</ul>
<h2 id="❒-陣列取值、新增、取長度"><a href="#❒-陣列取值、新增、取長度" class="headerlink" title="❒ 陣列取值、新增、取長度"></a>❒ 陣列取值、新增、取長度</h2><p>關於物件與陣列的更多方法可參考下篇文章：Day20 | 陣列與物件常用的方法</p>
<h3 id="取值-1"><a href="#取值-1" class="headerlink" title="取值"></a>取值</h3><p><strong>方式：</strong> 透過索引取值</p>
<ul>
<li><p>陣列中資料的索引位置從第 <code>0</code> 開始，要取得某筆資料就直接取陣列中第 <code>n</code> 筆資料 → <code>Array[n]</code>。</p>
  <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果要取得陣列中的 true</span></span><br><span class="line"><span class="keyword">var</span> newArray = [ <span class="number">1</span>, <span class="string">&#x27;text&#x27;</span>, <span class="literal">true</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArray[<span class="number">2</span>]);</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="新增-1"><a href="#新增-1" class="headerlink" title="新增"></a>新增</h3><p><strong>方式：<code>push()</code></strong></p>
<ul>
<li><p>此新增方式會新增至陣列的最後一筆 → <code>Array.push(放置要新增的資料);</code></p>
  <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> newArray = [ <span class="number">1</span>, <span class="string">&#x27;text&#x27;</span>, <span class="literal">true</span>];</span><br><span class="line">newArray.<span class="title function_">push</span>(<span class="number">5</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArray);</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="取陣列長度"><a href="#取陣列長度" class="headerlink" title="取陣列長度"></a>取陣列長度</h3><p><strong>方式：</strong><code>Array.length</code></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> newArray = [ <span class="number">1</span>, <span class="string">&#x27;text&#x27;</span>, <span class="literal">true</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArray.<span class="property">length</span>); <span class="comment">//3</span></span><br></pre></td></tr></table></figure>

<h3 id="陣列中新增屬性不影響陣列長度"><a href="#陣列中新增屬性不影響陣列長度" class="headerlink" title="陣列中新增屬性不影響陣列長度"></a>陣列中新增屬性不影響陣列長度</h3><p><strong>範例：</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> newArray = [ <span class="number">1</span>, <span class="string">&#x27;text&#x27;</span>, <span class="literal">true</span>];</span><br><span class="line">newArray.<span class="title function_">push</span>(<span class="number">5</span>);</span><br><span class="line">newArray.<span class="property">dog</span> = <span class="number">2</span>; <span class="comment">// 陣列中新增屬性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArray);</span><br></pre></td></tr></table></figure>

<ul>
<li><code>newArray</code> 中新增 <code>dog</code> 屬性，可見陣列並沒有把此屬性列入陣列長度。<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20221004/20119743cKof6z2cMf.png" alt="開發者工具截圖"></li>
</ul>
<h3 id="陣列沒有依照索引順序新增，跳過幾個索引新增資料會發生什麼事？"><a href="#陣列沒有依照索引順序新增，跳過幾個索引新增資料會發生什麼事？" class="headerlink" title="陣列沒有依照索引順序新增，跳過幾個索引新增資料會發生什麼事？"></a>陣列沒有依照索引順序新增，跳過幾個索引新增資料會發生什麼事？</h3><ul>
<li>使用中括號新增值時，如果中間有空的部分 ( 跳過某幾個索引位置 )， JS 會自動在這些位置補上空值 <code>undefined</code>，這會影響到陣列長度 ( 那些空值也會加入到索引長度中 )。</li>
<li>陣列沒有依照索引順序新增跳過幾個索引，陣列長度會自動補齊但跳過的那幾個索引值會為 <code>empty</code> ( 不存在的空的陣列內容 )，取值時會呈現 <code>undefined</code>。</li>
</ul>
<p><strong>範例：</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> newArray = [ <span class="number">1</span>, <span class="string">&#x27;text&#x27;</span>, <span class="literal">true</span>];</span><br><span class="line">newArray[<span class="number">4</span>] = <span class="string">&#x27;我是索引4&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArray);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArray[<span class="number">3</span>]);</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>newArray</code> 陣列中跳過索引 3 直接在索引 4 新增一串文字 <code>我是索引4</code>，會看到索引 3 部分呈現 <code>empty</code> ，展開後也不會看到索引位置 3 的部分。<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20221004/20119743yxnyJpDeW2.png" alt="開發者工具截圖"></p>
</li>
<li><p><code>console.log(newArray[3]);</code> 取索引 3 的值會印出 <code>undefined</code>。</p>
</li>
</ul>
<h3 id="印出陣列的所有內容"><a href="#印出陣列的所有內容" class="headerlink" title="印出陣列的所有內容"></a>印出陣列的所有內容</h3><p><strong>方式：</strong> 使用 for 迴圈</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> newArray = [ <span class="number">1</span>, <span class="string">&#x27;text&#x27;</span>, <span class="literal">true</span>];</span><br><span class="line">newArray[<span class="number">3</span>] = <span class="string">&#x27;我是索引4&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; newArray.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(newArray[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>let i = 0;</code><ul>
<li>先宣告一個 <code>i</code> 索引，位置等於 0 。</li>
</ul>
</li>
<li><code>i &lt; newArray.length;</code>  <code>i++</code><ul>
<li>當索引位置沒有比陣列長度長時，就會依序增加上去 ( 從 0 1 2 3 加上去 )。</li>
</ul>
</li>
</ul>
<h2 id="參考資訊"><a href="#參考資訊" class="headerlink" title="參考資訊"></a>參考資訊</h2><ul>
<li>六角學院 - JavaScript 核心篇</li>
<li>陣列物件處理方法<ul>
<li><a href="https://www.hexschool.com/2017/09/01/2017-09-01-javascript-for/">JavaScript 陣列處理方法 [filter(), find(), forEach(), map(), every(), some(), reduce()]</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/closest">MDN - Element.closest()</a></li>
<li><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/slice">MDN - Array.prototype.slice()</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10224915">輕鬆淺拷貝的陣列 Array 方法 slice()</a></li>
<li><a href="https://medium.com/@bebebobohaha/slice-splice-split-%E5%82%BB%E5%82%BB%E5%88%86%E4%B8%8D%E6%B8%85-46d9c8992729">[ JavaScript ] slice()、splice()、split() 傻傻分不清</a></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>2022年iThome鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>Day2 | img 圖片與背景圖使用方式、視差滾動背景效果</title>
    <url>/html-css/20230327/3211221452/</url>
    <content><![CDATA[<h2 id="❒-圖片使用背景圖方式"><a href="#❒-圖片使用背景圖方式" class="headerlink" title="❒ 圖片使用背景圖方式"></a>❒ 圖片使用背景圖方式</h2><h3 id="▷-屬性-background-repeat"><a href="#▷-屬性-background-repeat" class="headerlink" title="▷ 屬性 background-repeat"></a>▷ 屬性 <code>background-repeat</code></h3><ul>
<li>為了確保背景圖正確顯示，需搭配 <code>background-repeat:no-repeat;</code> 告訴瀏覽器背景圖片不要重覆顯示。</li>
</ul>
<h3 id="▷-屬性-background-position"><a href="#▷-屬性-background-position" class="headerlink" title="▷ 屬性 background-position"></a>▷ 屬性 <code>background-position</code></h3><ul>
<li><code>background-position: 水平方向 垂直方向;</code><ul>
<li>水平方向：方向方式 ( left、center、right )、百分比方式。</li>
<li>垂直方向：方向方式 ( top、center、bottom )、百分比方式。</li>
</ul>
</li>
<li>注意：如果 <code>background-position</code> 使用了簡化寫法，只寫一個屬性值，另一個屬性值將會自動取中間值，為了將來管理方便，建議兩個方向的屬性值都寫上去比較好。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-position</span><span class="selector-pseudo">:right</span> <span class="attribute">bottom</span>;　// 靠右靠下對齊</span><br><span class="line"><span class="attribute">background-position</span>:<span class="number">30px</span> <span class="number">60px</span>;　//靠左 <span class="number">30px</span> 靠上 <span class="number">60</span> px 的位置</span><br><span class="line"><span class="attribute">background-position</span>:<span class="number">10%</span> <span class="number">50%</span>;　// 靠左 <span class="number">10%</span> 靠上 <span class="number">50%</span> 的位置</span><br><span class="line"><span class="attribute">background-position</span>:<span class="number">10%</span>;　// 效果同上一行，靠左 <span class="number">10%</span> 靠上 <span class="number">50%</span> 的位置</span><br></pre></td></tr></table></figure>

<h3 id="▷-屬性-background-size"><a href="#▷-屬性-background-size" class="headerlink" title="▷ 屬性 background-size"></a>▷ 屬性 <code>background-size</code></h3><p><a href="https://codepen.io/echocarriet/pen/JjvXwpg">CodePen 範例</a></p>
<ul>
<li><code>contain</code>：如果背景圖有設定寬高，會自適應在設定的寬高內，但當背景圖尺寸小於設定的寬高時，不會填滿設定的寬高。</li>
<li><code>cover</code>：背景圖會依設定個寬度做縮放並填滿。<ul>
<li>因為使用 <code>backgrounf-size: cover</code> 時，可能會裁切到原圖片，可搭配 <code>background-position</code> 調整圖片位置。</li>
</ul>
</li>
</ul>
<h3 id="▷-屬性-background-attachment"><a href="#▷-屬性-background-attachment" class="headerlink" title="▷ 屬性 background-attachment"></a>▷ 屬性 <code>background-attachment</code></h3><p>屬性主要是設定背景圖片位置在設定的區塊內捲動時會個著捲動或固定，可使用 <code>fixed</code> 做出視差滾動的效果。<br><strong>屬性值</strong></p>
<ul>
<li><code>scroll</code> 預設，在區塊內卷軸捲動時，背景會跟著移動。<a href="https://codepen.io/echocarriet/pen/xxjrRMJ">CodePen 範例</a><ul>
<li>需注意，如果子區塊也使用 <code>scroll</code> ，子區塊的卷軸捲動時背景圖會固定不動，不會跟著被捲走。<a href="https://codepen.io/echocarriet/pen/VwxWmgR">CodePen 範例</a></li>
</ul>
</li>
<li><code>fixed</code> 在區塊內卷軸捲動時，背景會固定不動。 <a href="https://codepen.io/echocarriet/pen/mdLwRyd">CodePen 範例</a><ul>
<li>注意：如果子區塊也使用 <code>fixed</code> ，子區塊的卷軸捲動時背景圖不個著被捲走，會固定。但父區塊捲動卷軸時，子區塊的背景會個著動。 <a href="https://codepen.io/echocarriet/pen/ExLXZVe">CodePen 範例</a></li>
</ul>
</li>
<li><code>local</code> 類似 <code>scroll</code> ，在區塊內滾動卷軸時背景圖會跟著動。<a href="https://codepen.io/echocarriet/pen/PoejWGN">CodePen 範例</a></li>
</ul>
<h2 id="❒-使用-background-attachment-fixed-做出視差滾動"><a href="#❒-使用-background-attachment-fixed-做出視差滾動" class="headerlink" title="❒ 使用 background-attachment:fixed 做出視差滾動"></a>❒ 使用 background-attachment:fixed 做出視差滾動</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 架構 */</span></span><br><span class="line"><span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;圖片路徑&quot;</span>);</span><br><span class="line"><span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line"><span class="attribute">background-attachment</span>: fixed;</span><br></pre></td></tr></table></figure>

<p><img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/gif%2F%E9%90%B5%E4%BA%BA%E8%B3%BD_%E8%A6%96%E5%B7%AE%E6%BB%BE%E5%8B%95%E7%A4%BA%E6%84%8F%E5%9C%96.gif?alt=media&token=8de99e63-63f5-43f9-986a-1708cd8cf610" alt="// 視差滾動示意圖"><br><a href="https://codepen.io/echocarriet/pen/rNvwjwZ">CodePen 範例</a></p>
<h2 id="❒-圖片使用-img-標籤方式"><a href="#❒-圖片使用-img-標籤方式" class="headerlink" title="❒ 圖片使用 img 標籤方式"></a>❒ 圖片使用 img 標籤方式</h2><h3 id="▷-圖片寬度設定中-max-width-與-width-差異"><a href="#▷-圖片寬度設定中-max-width-與-width-差異" class="headerlink" title="▷ 圖片寬度設定中 max-width 與 width 差異"></a>▷ 圖片寬度設定中 <code>max-width</code> 與 <code>width</code> 差異</h3><p><a href="https://codepen.io/echocarriet/pen/LYPOozq">CodePen 範例</a></p>
<p><code>max-width:100%;</code> ( 建議使用此方式 )</p>
<ul>
<li>會跟隨父層做自適應縮放，但會保有圖片原始寬度。如果父層寬度超出圖片寬度，則圖片會停止延伸。</li>
</ul>
<p><code>width:100%;</code></p>
<ul>
<li>隨父層做自適應縮放，父層大於圖片原始尺寸，圖片會跟著變大。</li>
<li>缺點 : 如果圖片解析度不夠會糊掉。</li>
</ul>
<p><img src="https://ithelp.ithome.com.tw/upload/images/20220917/20119743nnEbSgj6tg.png" alt="// 圖片寬度設定中 max-width 與 width 差異"></p>
<h3 id="▷-響應式圖片-Reset"><a href="#▷-響應式圖片-Reset" class="headerlink" title="▷ 響應式圖片 Reset"></a>▷ 響應式圖片 Reset</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* img reset */</span></span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line"> <span class="attribute">max-width</span>:<span class="number">100%</span>;</span><br><span class="line"> <span class="attribute">height</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>理解上方 <code>max-width</code> 與 <code>width</code> 差異後可以把上方 img reset 設定方式加入 CSS Reset 中，就不需要重覆設定也可避免因圖片解析度太高出現 x 軸或破版問題囉！</li>
</ul>
<h3 id="▷-屬性-object-fit"><a href="#▷-屬性-object-fit" class="headerlink" title="▷ 屬性 object-fit"></a>▷ 屬性 <code>object-fit</code></h3><p><a href="https://codepen.io/echocarriet/pen/jOxbpdz">CodePen 範例</a></p>
<ul>
<li><code>fill</code>：預設值，圖片在填滿容器時可能會產生變形。</li>
<li><code>contain</code> : 會保持圖片原本比例，呈現在容器中，但與容器尺寸不依時不會填滿整個容器。</li>
<li><code>cover</code> : 保持圖片比例，填滿容器，但與容器尺寸不依時會裁切到圖片以填滿整個容器。<ul>
<li>因為使用 <code>object-fit: cover</code> 時，可能會裁切到原圖片，如果想要移動可視範圍位置，可搭配 <code>object-position</code>，效果就類似於 <code>background-position</code>。</li>
<li>關於 <code>object-position</code> 用法可參考「 <a href="https://www.runoob.com/cssref/pr-object-position.html">CSS object-position 属性</a> ****」。</li>
</ul>
</li>
<li><code>none</code> : 不調整圖片比例。</li>
<li><code>scale-down</code> : 等比縮小，與 none 或 contain 中的一個相同，取決於它們兩個之間誰得到的對象尺寸更小。</li>
</ul>
<h2 id="參考資訊"><a href="#參考資訊" class="headerlink" title="參考資訊"></a>參考資訊</h2><ul>
<li><a href="https://tzuhui.github.io/2020/03/26/CSS/css-object-fit/">HTML img 也能有 bg-image 的 cover 效果</a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/object-position">MDN - object-position</a></li>
<li><a href="https://www.runoob.com/cssref/pr-object-fit.html">CSS object-fit 属性</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10249759">Background-attchment 金魚都能懂的CSS必學屬性</a></li>
</ul>
]]></content>
      <categories>
        <category>HTML&amp;CSS</category>
      </categories>
      <tags>
        <tag>2022年iThome鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>Day20 | JS陣列與物件常用的方法</title>
    <url>/javascript/20230402/2857193530/</url>
    <content><![CDATA[<h2 id="❒-陣列寫入、新增、刪除資料"><a href="#❒-陣列寫入、新增、刪除資料" class="headerlink" title="❒ 陣列寫入、新增、刪除資料"></a>❒ 陣列寫入、新增、刪除資料</h2><h3 id="➊-透過索引位置-取代原值、新增、取值"><a href="#➊-透過索引位置-取代原值、新增、取值" class="headerlink" title="➊ 透過索引位置 取代原值、新增、取值"></a>➊ 透過索引位置 取代原值、新增、取值</h3><ol>
<li><p><strong>取代原值 <code>Array[n] = 新值;</code></strong></p>
<ul>
<li><p>「 索引位置 」為每個元素的位置，從第 0 筆開始，如下方陣列範例中的索引位置分別為：第 0 筆為 <code>&#39;A&#39;</code>，第 1 筆為 <code>&#39;B&#39;</code>，第 2 筆為 <code>&#39;C&#39;</code>。</p>
  <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> newArray = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>];</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>n</code> 帶入索引位置，新值為要取代陣列中原有的內容。</p>
  <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 把索引位置1的值取代成 B2</span></span><br><span class="line"><span class="keyword">let</span> newArray = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>];</span><br><span class="line">newArray[<span class="number">1</span>] = <span class="string">&#x27;B2&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArray); <span class="comment">// [&#x27;A&#x27;, &#x27;B2&#x27;, &#x27;C&#x27;]</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>在陣列中新增值</strong> <strong><code>Array[n] = 值;</code></strong></p>
<ul>
<li><p>此方式會新增至陣列中第 <code>n</code> 個索引位置</p>
  <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> newArray = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>];</span><br><span class="line">newArray[<span class="number">3</span>] = <span class="string">&#x27;D&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArray); [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果陣列沒有依照索引順序新增，跳過幾個索引位置去新增資料，JS 會自動在這些位置補上空值 <code>undefined</code>，這會影響到陣列長度 ( 那些空值也會加入到索引長度中 )。</p>
<ul>
<li>可參考<a href="https://www.notion.so/03-6a0b3e0ed0aa497fb3063373482e34df">筆記</a>。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>取陣列中第 n 筆的值 <code>Array[n]</code></strong></p>
 <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> newArray = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArray[<span class="number">2</span>]);  <span class="comment">//C</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="➋-新增-push"><a href="#➋-新增-push" class="headerlink" title="➋ 新增 push()"></a>➋ 新增 <code>push()</code></h3><p>新增至陣列中的最後一筆資料。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">array.<span class="title function_">push</span>(<span class="number">5</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array);   <span class="comment">// [0, 1, 2, 5]</span></span><br></pre></td></tr></table></figure>

<h3 id="➌-新增-unshift"><a href="#➌-新增-unshift" class="headerlink" title="➌  新增 unshift()"></a>➌  新增 <code>unshift()</code></h3><p>新增至陣列中的索引位置第 0 筆資料。( 新增至陣列最開始那筆 )</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">array.<span class="title function_">unshift</span>(<span class="number">5</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array);   <span class="comment">// [5, 0, 1, 2]</span></span><br></pre></td></tr></table></figure>

<h3 id="❹-刪除-pop"><a href="#❹-刪除-pop" class="headerlink" title="❹ 刪除 pop()"></a>❹ 刪除 <code>pop()</code></h3><p>刪除陣列中最後一筆索引資料</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">array.<span class="title function_">pop</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array);   <span class="comment">// [0, 1]</span></span><br></pre></td></tr></table></figure>

<h3 id="❺-刪除-shift"><a href="#❺-刪除-shift" class="headerlink" title="❺ 刪除 shift()"></a>❺ 刪除 <code>shift()</code></h3><p>刪除陣列中第 0 筆索引資料</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">array.<span class="title function_">shift</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array);   <span class="comment">// [1, 2]</span></span><br></pre></td></tr></table></figure>

<h3 id="❻-刪除-splice-參數1-參數2"><a href="#❻-刪除-splice-參數1-參數2" class="headerlink" title="❻ 刪除 splice(參數1,參數2)"></a>❻ 刪除 <code>splice(參數1,參數2)</code></h3><ul>
<li>刪除陣列中指定資料</li>
<li><code>參數 1</code> → 陣列中起始位置</li>
<li><code>參數 2</code> → 從參數 1 的位置要往後刪除幾筆資料，包含參數 1 本身。</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [<span class="number">5</span>, <span class="number">8</span>, <span class="number">2</span>];</span><br><span class="line">array.<span class="title function_">splice</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array);   <span class="comment">// [5]</span></span><br></pre></td></tr></table></figure>

<h3 id="❼-更多陣列語法"><a href="#❼-更多陣列語法" class="headerlink" title="❼ 更多陣列語法"></a>❼ 更多陣列語法</h3><ul>
<li><a href="https://www.hexschool.com/2017/09/01/2017-09-01-javascript-for/">JavaScript 陣列處理方法 [filter(), find(), forEach(), map(), every(), some(), reduce()]</a></li>
</ul>
<h2 id="❒-物件讀取、新增、修改、刪除方式"><a href="#❒-物件讀取、新增、修改、刪除方式" class="headerlink" title="❒ 物件讀取、新增、修改、刪除方式"></a>❒ 物件讀取、新增、修改、刪除方式</h2><h3 id="➊-讀取物件的值-點記法-object-屬性"><a href="#➊-讀取物件的值-點記法-object-屬性" class="headerlink" title="➊ 讀取物件的值 - 點記法 object.屬性"></a>➊ 讀取物件的值 - 點記法 <code>object.屬性</code></h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> home = &#123;</span><br><span class="line">  <span class="attr">mother</span>: <span class="string">&quot;Linda&quot;</span>,</span><br><span class="line">  <span class="attr">father</span>: <span class="string">&quot;David&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(home.<span class="property">mother</span>); <span class="comment">//Linda</span></span><br></pre></td></tr></table></figure>

<h3 id="➋-讀取-amp-新增物件的值-39-39-括號-字串方式"><a href="#➋-讀取-amp-新增物件的值-39-39-括號-字串方式" class="headerlink" title="➋ 讀取 &amp; 新增物件的值 [&#39;&#39;] 括號+字串方式"></a>➋ 讀取 &amp; 新增物件的值 <code>[&#39;&#39;]</code> 括號+字串方式</h3><p>通常情況下會使用 <code>.</code> 取值，但某些情況無法用 <code>.</code> 取值，例如：屬性為數字開頭時 ( 物件的屬性不論是否為數字都會視為字串 )、讀取變數的情況下、JSON 格式有些屬性名稱會使用 <code>&quot;isName&quot;</code> 字串方式包起，就會需要使用括號方式 <code>[]</code> 來讀取或新增。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">myName</span>: <span class="string">&quot;王小花&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//讀取物件屬性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj[<span class="string">&#x27;myName&#x27;</span>]);  <span class="comment">//王小花</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//新增物件屬性</span></span><br><span class="line">obj[<span class="string">&#x27;key&#x27;</span>] = <span class="string">&#x27;value&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj); <span class="comment">//&#123;myName: &quot;王小花&quot;, key: &quot;value&quot;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//讀取變數</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="string">&#x27;myName&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj[a]);</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 字串取值</span></span><br><span class="line"><span class="keyword">const</span> family = &#123;</span><br><span class="line">  <span class="attr">dog</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">callFamily</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;呼叫家庭群組&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">family[<span class="string">&#x27;callFamily&#x27;</span>]();  <span class="comment">// 印出 呼叫家庭群組</span></span><br></pre></td></tr></table></figure>

<h3 id="➌-新增物件屬性-object-屬性-屬性值"><a href="#➌-新增物件屬性-object-屬性-屬性值" class="headerlink" title="➌ 新增物件屬性 object.屬性 = 屬性值;"></a>➌ 新增物件屬性 <code>object.屬性 = 屬性值;</code></h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> home = &#123;&#125;;</span><br><span class="line">home.<span class="property">mother</span> = <span class="string">&quot;Linda&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(home); <span class="comment">//&#123;mother: &quot;Linda&quot;&#125;</span></span><br></pre></td></tr></table></figure>

<p>❗注意：不能在物件下於未定義的屬性新增屬性值，會顯示錯誤訊息 <code>Uncaught TypeError</code>。可參考<a href="https://www.notion.so/03-6a0b3e0ed0aa497fb3063373482e34df">筆記</a>。</p>
<h3 id="❹-修改物件值-object-要修改的屬性名-屬性值"><a href="#❹-修改物件值-object-要修改的屬性名-屬性值" class="headerlink" title="❹ 修改物件值 object.要修改的屬性名 = 屬性值;"></a>❹ 修改物件值 <code>object.要修改的屬性名 = 屬性值;</code></h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> home = &#123;</span><br><span class="line">  <span class="attr">mother</span>: <span class="string">&quot;Linda&quot;</span>,</span><br><span class="line">  <span class="attr">father</span>: <span class="string">&quot;David&quot;</span>,</span><br><span class="line"> <span class="attr">dogName</span>: <span class="string">&quot;啾咪&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line">home.<span class="property">dogName</span> = <span class="string">&quot;小啾&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(home.<span class="property">dogName</span>); <span class="comment">//小啾</span></span><br></pre></td></tr></table></figure>

<h3 id="❺-刪除物件資料-delete-object-屬性"><a href="#❺-刪除物件資料-delete-object-屬性" class="headerlink" title="❺ 刪除物件資料 delete object.屬性;"></a>❺ 刪除物件資料 <code>delete object.屬性;</code></h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> home = &#123;</span><br><span class="line">  <span class="attr">mother</span>: <span class="string">&quot;Linda&quot;</span>,</span><br><span class="line">  <span class="attr">father</span>: <span class="string">&quot;David&quot;</span>,</span><br><span class="line"> <span class="attr">dogName</span>: <span class="string">&quot;啾咪&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">delete</span> home.<span class="property">dogName</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(home.<span class="property">dogName</span>); <span class="comment">//&#123;mother: &quot;Linda&quot;, father: &quot;David&quot;&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="❒-closest"><a href="#❒-closest" class="headerlink" title="❒ closest()"></a>❒ closest()</h2><h3 id="e-target-closest-selector"><a href="#e-target-closest-selector" class="headerlink" title="e.target.closest(selector)"></a><code>e.target.closest(selector)</code></h3><ul>
<li><p>選取到指定的選擇器 <code>selector</code> 最近的元素</p>
</li>
<li><p><a href="https://codepen.io/echocarriet/pen/vYZyGGd">練習 codepen</a></p>
</li>
<li><p><strong>程式碼</strong></p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;typeContent&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;請填入文字&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;sendBtn&quot;</span> <span class="attr">value</span>=<span class="string">&quot;送出&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

  <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> typeContent = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.typeContent&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> sendBtn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.sendBtn&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> list = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.list&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> data = [];</span><br><span class="line"><span class="comment">// 1.渲染畫面</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">render</span>(<span class="params">arr</span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    str += <span class="string">`&lt;li data-id=&quot;<span class="subst">$&#123;item.id&#125;</span>&quot;&gt;<span class="subst">$&#123;item.content&#125;</span>&lt;/li&gt;`</span></span><br><span class="line">  &#125;)</span><br><span class="line">  list.<span class="property">innerHTML</span> = str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2.新增資料</span></span><br><span class="line">sendBtn.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(typeContent.<span class="property">value</span>.<span class="title function_">trim</span>() !== <span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">    data.<span class="title function_">push</span>(&#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>(),</span><br><span class="line">      <span class="attr">content</span>: typeContent.<span class="property">value</span>.<span class="title function_">trim</span>(),</span><br><span class="line">    &#125;);</span><br><span class="line">    typeContent.<span class="property">value</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"> <span class="title function_">render</span>(data);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.選取 li 的 id</span></span><br><span class="line"><span class="comment">// 使用 closest 印出 li 的 id</span></span><br><span class="line">list.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="comment">// 取出離我們點擊到最近的 li 的 data-id</span></span><br><span class="line">  <span class="keyword">let</span> listId = e.<span class="property">target</span>.<span class="title function_">closest</span>(<span class="string">&quot;li&quot;</span>).<span class="property">dataset</span>.<span class="property">id</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(listId);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>線上課程</strong></p>
<ul>
<li><a href="https://courses.hexschool.com/courses/202011122/lectures/34213327">JavaScript 必修篇 - 前端修練全攻略 : Vtuber x Coding 蹦出新滋味 ⚙️</a> ( 約 44:00 )</li>
</ul>
<hr>
<h3 id="element-closest-selectors"><a href="#element-closest-selectors" class="headerlink" title="element.closest(selectors)"></a><code>element.closest(selectors)</code></h3><ul>
<li>參數 <code>selectors</code> 為指定的選擇器。</li>
<li>用來選取特定選取器且離當前元素最近的祖先元素 ( 也可以是當前元素本身 )，如果匹配不到就返回 <code>null</code>。</li>
</ul>
<h3 id="實作範例"><a href="#實作範例" class="headerlink" title="實作範例"></a>實作範例</h3><ul>
<li><p><strong>程式碼</strong></p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div-01&quot;</span>&gt;</span>Here is div-01</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div-02&quot;</span>&gt;</span>Here is div-02</span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div-03&quot;</span>&gt;</span>Here is div-03<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br></pre></td></tr></table></figure>

  <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> el = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;div-03&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> r1 = el.<span class="title function_">closest</span>(<span class="string">&quot;#div-02&quot;</span>);</span><br><span class="line"><span class="comment">// 返回 id 为 div-02 的那个元素</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> r2 = el.<span class="title function_">closest</span>(<span class="string">&quot;div div&quot;</span>);</span><br><span class="line"><span class="comment">// 返回最近的拥有 div 祖先元素的 div 祖先元素，这里的话就是 div-03 元素本身</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> r3 = el.<span class="title function_">closest</span>(<span class="string">&quot;article &gt; div&quot;</span>);</span><br><span class="line"><span class="comment">// 返回最近的拥有父元素 article 的 div 祖先元素，这里的话就是 div-01</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> r4 = el.<span class="title function_">closest</span>(<span class="string">&quot;:not(div)&quot;</span>);</span><br><span class="line"><span class="comment">// 返回最近的非 div 的祖先元素，这里的话就是最外层的 article</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>參考文章 : <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/closest">MDN - Element.closest()</a></p>
<h2 id="❒-補充-slice-參1-參2"><a href="#❒-補充-slice-參1-參2" class="headerlink" title="❒ 補充 slice(參1,參2)"></a>❒ 補充 <code>slice(參1,參2)</code></h2><ul>
<li>回傳一個新陣列物件，為原陣列選擇的 begin 至 end（不含 end）部分的淺拷貝（shallow copy）。( 可用來預設每頁顯示 x 筆資料，用來生成每頁的資料。 <a href="https://www.notion.so/Vue-9a28d448940340548d6bc1da95f8efe2">範例</a> )</li>
<li><code>slice(參1,參2)</code><ul>
<li>參數 1 ，是要從哪個索引值開始切</li>
<li>參數 2 ，指要在哪一個索引值結束，但要注意參數 2 如果是 3 那就會取到索引值 2 就停止。</li>
<li>參數為負數，會從陣列的尾值開始往前算。如果這個負數超過陣列的長度，<code>slice()</code> 就會把所有能給我們都給出來。</li>
</ul>
</li>
</ul>
<h3 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> alphabet =[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(alphabet.<span class="title function_">slice</span>(<span class="number">1</span>,<span class="number">3</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(alphabet.<span class="title function_">slice</span>(<span class="number">1</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(alphabet.<span class="title function_">slice</span>(-<span class="number">4</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(alphabet.<span class="title function_">slice</span>(-<span class="number">3</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(alphabet.<span class="title function_">slice</span>(-<span class="number">10</span>));</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>答案</strong><ol>
<li>從第 1 個索引值 b 開始，到第 3 個索引值停止也就是取到索引值 3 的前一個 c。<br>  <code>[&#39;b&#39;, &#39;c&#39;]</code></li>
<li>回傳一個新陣列，從第一個索引值開始做淺層拷貝。<br>  <code>[&#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]</code></li>
<li>變數 alphabet 有五個值 alphabet(5+(-4)) → 拿掉第一個值 a<br>  <code>[&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;e&#39;]</code></li>
<li>尾值 <code>&#39;e&#39;</code> 往前算 3 個值 : <code>&#39;e&#39;</code> → <code>&#39;d&#39;</code> → <code>&#39;c&#39;</code><br>  <code>[&#39;c&#39;,&#39;d&#39;,&#39;e&#39;]</code></li>
<li>負數超過陣列的長度，slice() 就會把所有能給我們都給出來。<br>  <code>[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;e&#39;]</code></li>
</ol>
</li>
</ul>
<h2 id="參考資訊"><a href="#參考資訊" class="headerlink" title="參考資訊"></a>參考資訊</h2><ul>
<li><a href="https://www.hexschool.com/2017/09/01/2017-09-01-javascript-for/">JavaScript 陣列處理方法 [filter(), find(), forEach(), map(), every(), some(), reduce()]</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/closest">MDN - Element.closest()</a></li>
<li><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/slice">MDN - Array.prototype.slice()</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10224915">輕鬆淺拷貝的陣列 Array 方法 slice()</a></li>
<li><a href="https://medium.com/@bebebobohaha/slice-splice-split-%E5%82%BB%E5%82%BB%E5%88%86%E4%B8%8D%E6%B8%85-46d9c8992729">[ JavaScript ] slice()、splice()、split() 傻傻分不清</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>2022年iThome鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>Day21 | 物件的方法介紹-針對物件本身屬性操作的方法</title>
    <url>/javascript/20230402/820185280/</url>
    <content><![CDATA[<h2 id="❒-屬性特徵"><a href="#❒-屬性特徵" class="headerlink" title="❒ 屬性特徵"></a>❒ 屬性特徵</h2><p>有很多原型是無法透過 chrome console 查看它的特徵，下方會依序介紹物件屬性比較特別的特徵，這些特徵也可以運用於框架間作出特別的效果。</p>
<h3 id="調整物件本身屬性特徵-參數-的方法"><a href="#調整物件本身屬性特徵-參數-的方法" class="headerlink" title="調整物件本身屬性特徵( 參數 ) 的方法"></a>調整物件本身屬性特徵( 參數 ) 的方法</h3><ul>
<li><code>Object.defineProperty</code>：一次調整一個屬性。</li>
<li><code>Object.defineProperties</code>：一次調整多個屬性。</li>
</ul>
<h3 id="defineProperty-與-defineProperties-可調整的屬性特徵-參數"><a href="#defineProperty-與-defineProperties-可調整的屬性特徵-參數" class="headerlink" title="defineProperty 與 defineProperties 可調整的屬性特徵 ( 參數 )"></a><code>defineProperty</code> 與 <code>defineProperties</code> 可調整的屬性特徵 ( 參數 )</h3><ol>
<li><code>value</code>：屬性本身的值，預設會為原來的值。</li>
<li><code>writable</code>：可否寫入，預設為 true。</li>
<li><code>configurable</code>：可否被刪除，預設為 true。</li>
<li><code>enumerable</code>：可否被列舉，預設為 true。</li>
</ol>
<h2 id="❒-Object-defineProperty-一次設定一個屬性"><a href="#❒-Object-defineProperty-一次設定一個屬性" class="headerlink" title="❒ Object.defineProperty  ( 一次設定一個屬性 )"></a>❒ Object.defineProperty  ( 一次設定一個屬性 )</h2><p><strong>結構：</strong><code>Object.defineProperty(物件, 屬性, 參數);</code></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 參數可以只帶入要設定的即可</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(物件, 屬性, &#123;</span><br><span class="line"> <span class="attr">value</span>: , <span class="comment">// 預設會為原來的值</span></span><br><span class="line"> <span class="attr">writable</span>: , <span class="comment">// 預設為 true</span></span><br><span class="line"> <span class="attr">configurable</span>: , <span class="comment">// 預設為 true</span></span><br><span class="line"> <span class="attr">enumerable</span>: , <span class="comment">// 預設為 true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li><code>屬性</code> 依字串形式帶入。</li>
<li><code>參數</code>為 <code>defineProperty</code> 可以調整的屬性特徵( 參數 )，分別有：<ol>
<li>屬性的值 <code>value</code>：可以去讀取或寫入這個值。</li>
<li>可否寫入 <code>writable</code>：一般來說值都可以被寫入，但可以使用 <code>defineProperty</code> 去限制屬性跟值是否可以被寫入。</li>
<li>可否被刪除 <code>configurable</code>：可設定此屬性是否可被刪除。</li>
<li>可否被列舉 <code>enumerable</code>：當不知道物件內有哪些屬性，可使用 <code>for (變數 in 物件) &#123;&#125;</code> 方法一一讀出物件內的屬性，一般來說這些屬性都可被讀出，可否被列舉意思為可限制哪些屬性是不可被列舉，當使用 <code>for in</code> 就不會讀到禁止被列舉的一些屬性。</li>
</ol>
</li>
<li><code>Object.defineProperty</code> 只能做到淺層保護，當屬性為物件時 <code>defineProperty</code> 只能對當下屬性做限制，不能對物件裡面的屬性做限制。可參考下方「 Object.defineProperty 其他使用方式 - 範例 2 」。</li>
</ul>
<h3 id="範例-1"><a href="#範例-1" class="headerlink" title="範例 1"></a>範例 1</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line"> <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line"> <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line"> <span class="attr">c</span>: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person);</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person, <span class="string">&#x27;a&#x27;</span>, &#123;</span><br><span class="line"> <span class="attr">value</span>: <span class="number">4</span>, </span><br><span class="line"> <span class="attr">writable</span>: <span class="literal">true</span>,</span><br><span class="line"> <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line"> <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong><code>writable: false</code> 屬性無法被寫入</strong></p>
<ul>
<li><code>person</code> 中的 <code>a</code> 屬性就無法被寫入其他值。<a href="https://codepen.io/echocarriet/pen/abGGryj">CodePen 範例</a><ul>
<li>但因為是靜默的錯誤，所以並不會跳出錯誤訊息。</li>
</ul>
</li>
</ul>
<p><strong><code>configurable: true</code> 屬性無法被刪除</strong></p>
<ul>
<li>範例中可見 b 屬性設定了 <code>configurable: true,</code> ，使用 <code>delete person.b;</code> 是無法被刪除的。 <a href="https://codepen.io/echocarriet/pen/rNvvgrv">CodePen 範例</a><ul>
<li>但因為是靜默的錯誤，所以並不會跳出錯誤訊息。</li>
</ul>
</li>
</ul>
<p><strong><code>enumerable: false</code> 屬性無法被列舉</strong></p>
<ul>
<li>白話來說就是被設定的屬性當要一一列出時，是不會被顯示出來的。</li>
<li>範例中 c 屬性被設定無法被列舉，所以當使用 <code>for (變數 in 物件) &#123;&#125;</code>  把物件屬性一一列出時，屬性 c 就不會出現。<a href="https://codepen.io/echocarriet/pen/bGMMyJq">CodePen 範例</a><ul>
<li><code>for (var key in person) &#123;&#125;</code> 此方式會把 <code>person</code> 屬性帶到 <code>key</code> 上。</li>
</ul>
</li>
</ul>
<h2 id="❒-Object-defineProperty-其他使用方式"><a href="#❒-Object-defineProperty-其他使用方式" class="headerlink" title="❒ Object.defineProperty 其他使用方式"></a>❒ Object.defineProperty 其他使用方式</h2><h3 id="範例-1-新增物件屬性"><a href="#範例-1-新增物件屬性" class="headerlink" title="範例 1. 新增物件屬性"></a>範例 1. 新增物件屬性</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">c</span>: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person, <span class="string">&#x27;d&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="number">4</span>,</span><br><span class="line">   <span class="attr">writable</span>: <span class="literal">true</span>, <span class="comment">//可否寫入</span></span><br><span class="line">   <span class="attr">configurable</span>:<span class="literal">true</span>, <span class="comment">//可否刪除</span></span><br><span class="line">   <span class="attr">enumerable</span>: <span class="literal">true</span>, <span class="comment">//可否列舉</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person);</span><br></pre></td></tr></table></figure>

<ul>
<li>屬性中使用物件內沒有的屬性，並於參數 value 加入值，可直接把新的屬性與屬性值加入物件中。</li>
</ul>
<h3 id="範例-2-Object-defineProperty-只能做到淺層保護"><a href="#範例-2-Object-defineProperty-只能做到淺層保護" class="headerlink" title="範例 2. Object.defineProperty 只能做到淺層保護"></a>範例 2. <code>Object.defineProperty</code> 只能做到淺層保護</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">c</span>: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person, <span class="string">&#x27;d&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">value</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">writable</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;)</span><br><span class="line">person.<span class="property">d</span>.<span class="property">dOne</span> = <span class="string">&#x27;D1&#x27;</span>;</span><br><span class="line">person.<span class="property">d</span>.<span class="property">dTwo</span> = <span class="string">&#x27;D2&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person);</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>Object.defineProperty</code> 只能做到淺層保護，當屬性為物件時 <code>defineProperty</code> 只能對當下屬性做限制，不能對物件裡面的屬性做限制。</p>
</li>
<li><p>範例中新增 d 屬性，屬性值為空物件，並設定不能寫入。<code>console.log(person);</code> 查看 d 為淺色，<code>writable: false</code> 在 d 屬性上有效。<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20221006/20119743fTEEHpV3mu.png" alt="截圖"></p>
</li>
<li><p>在 d 的物件裡面新增屬性 <code>dOne</code> <code>dTwo</code> ，<code>console.log(person);</code> 查看 d 物件裡面的屬性為深色，<code>writable: false</code> 在 d 屬性裡面的物件是無效的。<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20221006/20119743P6Xu3M5ejx.png" alt="截圖"></p>
</li>
</ul>
<h2 id="❒-Object-defineProperties-一次設定多個屬性"><a href="#❒-Object-defineProperties-一次設定多個屬性" class="headerlink" title="❒ Object.defineProperties ( 一次設定多個屬性 )"></a>❒ Object.defineProperties ( 一次設定多個屬性 )</h2><p><strong>結構：</strong><code>Object.defineProperty(物件, &#123;屬性們加上特徵&#125;);</code></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperties</span>(物件, &#123;</span><br><span class="line">  屬性<span class="number">1</span>: &#123;</span><br><span class="line">   <span class="comment">// --- 調整屬性的特徵</span></span><br><span class="line"> <span class="attr">value</span>: , <span class="comment">// 預設會為原來的值</span></span><br><span class="line"> <span class="attr">writable</span>: , <span class="comment">// 預設為 true</span></span><br><span class="line"> <span class="attr">configurable</span>: , <span class="comment">// 預設為 true</span></span><br><span class="line"> <span class="attr">enumerable</span>: , <span class="comment">// 預設為 true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  屬性<span class="number">2</span>: &#123;</span><br><span class="line">    <span class="comment">// 承上</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>範例1. 以調整屬性 a 與 b 的屬性值為例</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">c</span>: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperties</span>(person, &#123;</span><br><span class="line">  <span class="attr">a</span>: &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="number">5</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">b</span>: &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="number">7</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person);</span><br></pre></td></tr></table></figure>

<h2 id="參考資訊"><a href="#參考資訊" class="headerlink" title="參考資訊"></a>參考資訊</h2><ul>
<li>JavaScript 核心篇</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>2022年iThome鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>Day22 | 物件方法介紹 - 針對物件本身操作的方法</title>
    <url>/javascript/20230402/3628284774/</url>
    <content><![CDATA[<h2 id="❒-前言"><a href="#❒-前言" class="headerlink" title="❒ 前言"></a>❒ 前言</h2><p>上篇提到的 <code>Object.defineProperty</code>、<code>Object.defineProperties</code> 為調整物件本身的的屬性特徵方法，這篇將説說 <strong>preventExtensions ( 防止擴充 )<strong>、</strong>seal ( 封裝 )<strong>、</strong>Freeze ( 凍結 )</strong> 這三種針對物件本身做限制的方法。</p>
<h2 id="❒-對物件本身調整的方法"><a href="#❒-對物件本身調整的方法" class="headerlink" title="❒ 對物件本身調整的方法"></a>❒ 對物件本身調整的方法</h2><ul>
<li>preventExtensions ( 防止擴充 )</li>
<li>seal ( 封裝 )</li>
<li>Freeze ( 凍結 )</li>
</ul>
<h3 id="preventExtension、seal、freeze-的共同點與差異"><a href="#preventExtension、seal、freeze-的共同點與差異" class="headerlink" title="preventExtension、seal、freeze 的共同點與差異"></a><code>preventExtension</code>、<code>seal</code>、<code>freeze</code> 的共同點與差異</h3><ul>
<li>這三種方式都只能對物件本身做限制，無法對物件本身的巢狀屬性做限制。因為這三種方式只有淺層拷貝，物件本身的巢狀屬性就還是具有傳參考特性。</li>
<li><code>preventExtension</code> 可以調整屬性特徵，<code>seal</code>、<code>freeze</code> 不能調整屬性特徵。<ul>
<li>備註：<code>seal</code> 屬性特徵中 <code>writable</code> 經測試是可以被調整的，似乎是 <code>seal</code> 有調整過導致，須留意。</li>
</ul>
</li>
<li>限制程度：<code>freeze</code> &gt; <code>seal</code> &gt; <code>preventExtension</code></li>
</ul>
<h2 id="❒-preventExtension-防止擴充"><a href="#❒-preventExtension-防止擴充" class="headerlink" title="❒ preventExtension 防止擴充"></a>❒ preventExtension 防止擴充</h2><p><strong>特性：</strong> 不能「 新增 」物件本身屬性。</p>
<p><strong>結構：</strong><code>Object.preventExtensions(物件)</code></p>
<p><strong>Others :</strong></p>
<ul>
<li><p><code>Object.preventExtensions(物件)</code> 可搭配 <code>Object.isExtensible(物件)</code> 做驗證看使用了 <code>preventExtensions</code> 後的物件是否可被擴充。</p>
</li>
<li><p><code>Object.preventExtensions(物件)</code> 可搭 <code>Object.getOwnPropertyDescriptor(物件, &#39;屬性&#39;)</code> 查看物件裡的特定屬性特徵。</p>
</li>
<li><p>物件使用 <code>preventExtensions</code> 後的屬性特徵  ( 可使用 <code>Object.getOwnPropertyDescriptor(物件, &#39;物件屬性&#39;);</code> 查詢 )</p>
  <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">value</span>: 屬性本身的值</span><br><span class="line"><span class="attr">writable</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="範例-1-使用-preventExtensions-物件屬性特徵不會被改變"><a href="#範例-1-使用-preventExtensions-物件屬性特徵不會被改變" class="headerlink" title="範例 1. 使用 preventExtensions 物件屬性特徵不會被改變"></a>範例 1. 使用 <code>preventExtensions</code> 物件屬性特徵不會被改變</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">c</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">preventExtensions</span>(person);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`是否可被擴充 <span class="subst">$&#123;<span class="built_in">Object</span>.isExtensible(person)&#125;</span>`</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(person, <span class="string">&#x27;a&#x27;</span>));</span><br></pre></td></tr></table></figure>

<ul>
<li><code>Object.isExtensible(person)</code> 印出 <code>false</code>，可見 <code>preventExtensions</code> 的物件是不可被擴充的。</li>
<li>以物件 <code>a</code> 屬性為例，<code>Object.getOwnPropertyDescriptor(person, &#39;a&#39;)</code> 可見 <code>a</code> 屬性的特徵們一樣為預設。<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20221007/20119743smGRDiER2o.png" alt="截圖"></li>
</ul>
<h3 id="範例-2-只能針對物件本身做限制，無法對巢狀屬性做限制"><a href="#範例-2-只能針對物件本身做限制，無法對巢狀屬性做限制" class="headerlink" title="範例 2. 只能針對物件本身做限制，無法對巢狀屬性做限制"></a>範例 2. 只能針對物件本身做限制，無法對巢狀屬性做限制</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">c</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">preventExtensions</span>(person);</span><br><span class="line"><span class="comment">// 調整屬性</span></span><br><span class="line">person.<span class="property">a</span> = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="comment">// 新增屬性</span></span><br><span class="line">person.<span class="property">d</span> = <span class="string">&#x27;d&#x27;</span>;</span><br><span class="line"><span class="comment">// 調整巢狀屬性(新增)</span></span><br><span class="line">person.<span class="property">c</span>.<span class="property">inC</span> = <span class="string">&#x27;C is Here&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 調整特徵</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person, <span class="string">&#x27;a&#x27;</span> , &#123;</span><br><span class="line">  <span class="attr">configurable</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">delete</span> person.<span class="property">a</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person);</span><br></pre></td></tr></table></figure>

<ul>
<li>調整物件原有屬性：把物件內的 <code>a</code> 屬性的屬性值調整為 <code>a</code> 是沒問題的。</li>
<li>於物件新增屬性：物件新增 <code>d</code> 屬性後，並沒有在物件中看見新增的 <code>d</code> 屬性，因為 <code>preventExtensions</code> 的用意就是無法新增屬性。</li>
<li>調整物件內的巢狀屬性：<code>preventExtensions</code> 只能對物件本身做限制，無法對物件本身的巢狀屬性做限制，所以在巢狀屬性 <code>c</code> 內再新增 <code>inC</code> 屬性是沒問題的。</li>
<li>調整物件屬性特徵：調整 a 的屬性特徵為 <code>configurable: false</code>，是沒問題的，可見 <code>preventExtensions</code> 是可以再次調整屬性特徵。</li>
</ul>
<h2 id="❒-seal-封裝"><a href="#❒-seal-封裝" class="headerlink" title="❒ seal 封裝"></a>❒ seal 封裝</h2><h3 id="seal-特性"><a href="#seal-特性" class="headerlink" title="seal 特性"></a>seal 特性</h3><ul>
<li><p>物件屬性「無法新增刪除」，也無法重新配置特徵，但是可以調整目前屬性值。</p>
<ul>
<li>例外：<code>seal</code> 屬性特徵中 <code>writable</code> 經測試是可以被調整的，似乎是 <code>seal</code> 有調整過導致，須留意。</li>
</ul>
</li>
<li><p><code>seal</code> 與 <code>preventExtensions</code> 是有關聯性的，所以 <code>seal</code> 預設狀態為物件會被加上 <code>preventExtensions</code>，再把 「無法新增刪除，也無法重新配置特徵 」的特性加上。</p>
</li>
<li><p>物件使用 seal 後的屬性特徵為 ( 可使用 <code>Object.getOwnPropertyDescriptor(物件, &#39;物件屬性&#39;);</code> 查詢 )</p>
  <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="attr">configurable</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">value</span>: 屬性本身的值</span><br><span class="line"><span class="attr">writable</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="seal-結構"><a href="#seal-結構" class="headerlink" title="seal 結構"></a>seal 結構</h3><p> <strong><code>Object.seal(物件);</code></strong></p>
<h3 id="範例-1"><a href="#範例-1" class="headerlink" title="範例 1"></a>範例 1</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">c</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">seal</span>(person);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`是否可被封裝 <span class="subst">$&#123;<span class="built_in">Object</span>.isSealed(person)&#125;</span>`</span>);</span><br><span class="line"><span class="comment">// 調整屬性</span></span><br><span class="line">person.<span class="property">a</span> = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="comment">// 新增屬性</span></span><br><span class="line">person.<span class="property">d</span> = <span class="string">&#x27;d&#x27;</span>;</span><br><span class="line"><span class="comment">// 調整巢狀屬性(新增)</span></span><br><span class="line">person.<span class="property">c</span>.<span class="property">inC</span> = <span class="string">&#x27;C is Here&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person);</span><br></pre></td></tr></table></figure>

<ul>
<li>調整物件原有屬性：把物件內的 <code>a</code> 屬性的屬性值調整為 <code>a</code> 是沒問題的。</li>
<li>於物件新增屬性：物件新增 <code>d</code> 屬性後，並沒有在物件中看見新增的 <code>d</code> 屬性，因為 <code>preventExtensions</code> 的用意就是無法新增屬性。</li>
<li>調整物件內的巢狀屬性：<code>preventExtensions</code> 只能對物件本身做限制，無法對物件本身的巢狀屬性做限制，所以在巢狀屬性 <code>c</code> 內再新增 <code>inC</code> 屬性是沒問題的。<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20221007/20119743WoOMTs5Kum.png" alt="截圖"></li>
</ul>
<h3 id="範例-2-seal-封裝後是不能調整屬性特徵，但-writable-特徵例外"><a href="#範例-2-seal-封裝後是不能調整屬性特徵，但-writable-特徵例外" class="headerlink" title="範例 2. seal 封裝後是不能調整屬性特徵，但 writable 特徵例外"></a>範例 2. seal 封裝後是不能調整屬性特徵，但 <code>writable</code> 特徵例外</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">c</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">seal</span>(person);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`是否可被封裝 <span class="subst">$&#123;<span class="built_in">Object</span>.isSealed(person)&#125;</span>`</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(person, <span class="string">&#x27;a&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 調整特徵</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person, <span class="string">&#x27;a&#x27;</span> , &#123;</span><br><span class="line">  <span class="attr">writable</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Object.defineProperty(person, &#x27;a&#x27; , &#123;</span></span><br><span class="line"><span class="comment">//   configurable: true,</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(person, <span class="string">&#x27;a&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person);</span><br></pre></td></tr></table></figure>

<p><strong><code>writable</code> 特徵例外：</strong></p>
<ul>
<li><p>修改了物件 <code>a</code> 的屬性特徵 <code>writable</code> 由 <code>true</code> 變 <code>false</code>，並使用 <code>Object.getOwnPropertyDescriptor</code> 查看封裝後物件的屬性特徵，開發者工具依舊顯示 <code>writable: false</code>，驗證<strong>「 seal 封裝後的物件是無法調整屬性特徵 」</strong>。<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20221007/20119743PlNSIIThjb.png" alt="未調整 a 屬性的屬性特徵狀態 ↑"></p>
<p>  <img src="https://ithelp.ithome.com.tw/upload/images/20221007/20119743wbsPrP5g7s.png" alt="調整 a 屬性的writable屬性特徵狀態，被覆蓋為false"></p>
</li>
</ul>
<p><strong>調整其他特徵：</strong></p>
<ul>
<li>試圖改變其他特徵，會顯示錯誤訊息 <code>Uncaught TypeError</code>。<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20221007/20119743EcH0FEwCfh.png" alt="錯誤訊息 Uncaught TypeError"></li>
</ul>
<h2 id="❒-freeze-凍結"><a href="#❒-freeze-凍結" class="headerlink" title="❒ freeze 凍結"></a>❒ freeze 凍結</h2><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul>
<li><p>物件使用 <code>freeze</code> 會讓此物件被凍結並且，</p>
<ul>
<li>無法新增刪除屬性。</li>
<li>無法被修改屬性值。</li>
<li>無法調整屬性特徵。</li>
</ul>
</li>
<li><p>物件使用 <code>freeze</code> 的屬性特徵 ( 可使用 <code>Object.getOwnPropertyDescriptor(物件, &#39;物件屬性&#39;);</code> 查詢 )</p>
  <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="attr">configurable</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">value</span>: 屬性本身的值</span><br><span class="line"><span class="attr">writable</span>: <span class="literal">false</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>freeze</code> 與 <code>seal</code> 和 <code>preventExtensions</code> 是有關聯性的，所以 <code>freeze</code> 預設狀態為物件會被加上 <code>preventExtensions</code> ( 無法被擴展 ) 和 <code>seal</code> ( 封裝 ) 的特性，也無法被調整值。</p>
</li>
</ul>
<h3 id="結構"><a href="#結構" class="headerlink" title="結構"></a>結構</h3><p><code>Object.freeze(物件);</code></p>
<h3 id="範例-1-freeze-具備無法被擴展、封裝、凍結特性"><a href="#範例-1-freeze-具備無法被擴展、封裝、凍結特性" class="headerlink" title="範例 1. freeze 具備無法被擴展、封裝、凍結特性"></a>範例 1. freeze 具備無法被擴展、封裝、凍結特性</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">c</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">freeze</span>(person);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`是否可被擴展 <span class="subst">$&#123;<span class="built_in">Object</span>.isExtensible(person)&#125;</span>`</span>); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`是否可被封裝 <span class="subst">$&#123;<span class="built_in">Object</span>.isSealed(person)&#125;</span>`</span>);  <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`是否可被凍結 <span class="subst">$&#123;<span class="built_in">Object</span>.isFrozen(person)&#125;</span>`</span>);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h3 id="範例-2-物件-freeze-後嘗試調整、新增屬性與調整巢狀屬性"><a href="#範例-2-物件-freeze-後嘗試調整、新增屬性與調整巢狀屬性" class="headerlink" title="範例 2. 物件 freeze 後嘗試調整、新增屬性與調整巢狀屬性"></a>範例 2. 物件 freeze 後嘗試調整、新增屬性與調整巢狀屬性</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">c</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">freeze</span>(person);</span><br><span class="line"><span class="comment">// 調整屬性</span></span><br><span class="line">person.<span class="property">a</span> = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="comment">// 新增屬性</span></span><br><span class="line">person.<span class="property">d</span> = <span class="string">&#x27;d&#x27;</span>;</span><br><span class="line"><span class="comment">// 調整巢狀屬性(新增)</span></span><br><span class="line">person.<span class="property">c</span>.<span class="property">inC</span> = <span class="string">&#x27;C is Here&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person);</span><br></pre></td></tr></table></figure>

<ul>
<li>調整屬性與新增屬性：失敗。</li>
<li>調整巢狀屬性：成功。<ul>
<li>因為物件傳參考特性外加淺層拷貝，所以 <code>freeze</code> 只能針對當下物件凍結，無法對物件屬性的巢狀屬性做凍結。<br><img src="https://ithelp.ithome.com.tw/upload/images/20221007/20119743GpfqLIxNAt.png" alt="截圖"></li>
</ul>
</li>
</ul>
<h3 id="範例-3-物件凍結後嘗試調整屬性特徵"><a href="#範例-3-物件凍結後嘗試調整屬性特徵" class="headerlink" title="範例 3. 物件凍結後嘗試調整屬性特徵"></a>範例 3. 物件凍結後嘗試調整屬性特徵</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">c</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">freeze</span>(person);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 調整 writable 特徵</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person, <span class="string">&#x27;a&#x27;</span> , &#123;</span><br><span class="line">  <span class="attr">writable</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>此範例以調整 writable 特徵為例，會出現錯誤訊息 <code>Uncaught TypeError</code>。</li>
<li>另外嘗試調整其他屬性特徵 ( <code>configurable</code>、<code>enumerable</code>、<code>value</code>  )，一樣會跳出錯誤訊息。</li>
</ul>
<h2 id="參考資訊"><a href="#參考資訊" class="headerlink" title="參考資訊"></a>參考資訊</h2><ul>
<li>JavaScript 核心篇</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>2022年iThome鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>Day23 | 物件方法介紹 - 屬性特徵列舉與原型的關係、Setter 與 Getter 運用</title>
    <url>/javascript/20230402/1942469313/</url>
    <content><![CDATA[<h2 id="屬性列舉與原型的關係"><a href="#屬性列舉與原型的關係" class="headerlink" title="屬性列舉與原型的關係"></a>屬性列舉與原型的關係</h2><p>我們所制定的「 原型 」與「 原生原型 」最大不同就是在屬性特徵可列舉的部分 <code>enumerable</code>，因可列舉的關係 <code>for in</code> 方式不會出現原生原型的內容但會出現我們制定原型的內容。</p>
<h3 id="範例-1-自制的原型屬性與原生原型屬性關係"><a href="#範例-1-自制的原型屬性與原生原型屬性關係" class="headerlink" title="範例 1. 自制的原型屬性與原生原型屬性關係"></a>範例 1. 自制的原型屬性與原生原型屬性關係</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 原型概念須先產生建構函式</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 於建構函式新增原型的內容</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&#x27;人類&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 透過建構函式產生新物件</span></span><br><span class="line"><span class="keyword">var</span> casper = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="comment">// 新物件再賦予 a 屬性與屬性值 undefined</span></span><br><span class="line">casper.<span class="property">a</span> = <span class="literal">undefined</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(casper);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`hasOwnProperty a:<span class="subst">$&#123;casper.hasOwnProperty(<span class="string">&#x27;a&#x27;</span>)&#125;</span>`</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`hasOwnProperty name:<span class="subst">$&#123;casper.hasOwnProperty(<span class="string">&#x27;name&#x27;</span>)&#125;</span>`</span>);</span><br></pre></td></tr></table></figure>

<p>「 自制的原型屬性 」與 「 原生原型屬性 」的屬性特徵 <code>enumerable</code> 不同，使用此範例來拆解不同處。</p>
<p><strong>｜拆解｜</strong></p>
<p>➤ <strong>於建構函式新增原型內容 → 透過建構函式產生新物件 &amp; 賦予新屬性</strong><br><img src="https://ithelp.ithome.com.tw/upload/images/20221008/20119743qIfiVqIsfC.png" alt="https://ithelp.ithome.com.tw/upload/images/20221008/20119743qIfiVqIsfC.png"></p>
<ul>
<li>prototype 為原型中的屬性，casper 內容可見 prototype 中的 name 屬性顏色和其他 prototype 屬性顏色不同，和我們自己定義的屬性色彩 <code>a</code> 相同。</li>
</ul>
<p>➤ <strong>變數 <code>casper</code> 使用 <code>hasOwnProperty</code> 分別查看 <code>a</code> 與 <code>name</code> 屬性：</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&#x27;人類&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> casper = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">casper.<span class="property">a</span> = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> casper) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`casper 物件內的屬性：<span class="subst">$&#123;key&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`hasOwnProperty a:<span class="subst">$&#123;casper.hasOwnProperty(<span class="string">&#x27;a&#x27;</span>)&#125;</span>`</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`hasOwnProperty name:<span class="subst">$&#123;casper.hasOwnProperty(<span class="string">&#x27;name&#x27;</span>)&#125;</span>`</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(casper);</span><br></pre></td></tr></table></figure>

<ul>
<li>雖然原型鏈的概念會不斷向上尋找，但 <code>hasOwnProperty</code> 是針對物件當前的屬性來來查看。</li>
<li>casper 變數使用 <code>for in</code> 方式列舉出所有屬性包含使用建構函式新增的內容 <code>name</code> 但 <code>hasOwnProperty</code> 無法呈現出 <code>prototype</code> 中的 <code>name</code> 是因為 <code>hasOwnProperty</code> 只針對當前屬性來查看。</li>
</ul>
<p><img src="https://ithelp.ithome.com.tw/upload/images/20221008/20119743EO52jgVBBW.png" alt="https://ithelp.ithome.com.tw/upload/images/20221008/20119743EO52jgVBBW.png"></p>
<p><strong>➤  使用 <code>for in</code> 方式列出 casper 內的屬性</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&#x27;人類&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> casper = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">casper.<span class="property">a</span> = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> casper) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`casper 物件內的屬性：<span class="subst">$&#123;key&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>for in</code> 方式列出 casper 內的屬性有 <code>a</code> 與自訂原型中的 <code>name</code>。<ul>
<li>因為可列舉的關係 for in 方式不會出現原生原型的內容但會出現我們制定原型的內容 <code>name</code>。</li>
</ul>
</li>
</ul>
<p><strong>➤ 我們自制原型的屬性與原生原型屬性的「 屬性特徵不同 」</strong></p>
<ul>
<li><p>回到 <a href="https://ithelp.ithome.com.tw/articles/10304938">Day21 | 物件的方法介紹-針對物件本身屬性操作的方法</a> 中的 <code>definedProperty</code> ，它可針對屬性額外去定義屬性特徵  ( <code>value</code>、<code>writable</code>、<code>configurable</code>、<code>enumerable</code> )</p>
</li>
<li><p>範例中我們自制的原型屬性 <code>name</code> 與原型中的屬性特徵不同，差異在於：</p>
<ul>
<li><p>使用 <code>Object.getOwnPropertyDescriptor(物件)</code> 去得物件裡屬性的特定特，因為要查詢 casper 原型中的 name，所以結構如下</p>
<pre><code><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&#x27;人類&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> casper = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">casper.<span class="property">a</span> = <span class="literal">undefined</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(casper.<span class="property">__proto__</span>, <span class="string">&#x27;name&#x27;</span>));</span><br></pre></td></tr></table></figure>

![https://ithelp.ithome.com.tw/upload/images/20221008/20119743aIIWfQHhPQ.png](https://ithelp.ithome.com.tw/upload/images/20221008/20119743aIIWfQHhPQ.png)
</code></pre>
</li>
<li><p>再 casper 進到物件原型中的物件原型中的其中一個方法 toString。</p>
<pre><code><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&#x27;人類&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> casper = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">casper.<span class="property">a</span> = <span class="literal">undefined</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(casper.<span class="property">__proto__</span>, <span class="string">&#x27;name&#x27;</span>));</span><br></pre></td></tr></table></figure>

![https://ithelp.ithome.com.tw/upload/images/20221008/20119743v1yFuwbyEK.png](https://ithelp.ithome.com.tw/upload/images/20221008/20119743v1yFuwbyEK.png)
</code></pre>
</li>
</ul>
</li>
<li><p>由上方查詢屬性特徵看到我們制定的原型與原生原型的 <code>enumerable</code> 列舉方式不同。</p>
<ul>
<li>我們制定的原型屬性特徵 <code>enumerable: true</code> ( 可列舉 )，原生原型屬性特徵  <code>enumerable: false</code> ( 不可列舉 )。</li>
<li>就因可列舉的特徵，所以我們制定的原型屬性 <code>name</code> 在 <code>for in</code> 方式下是會被列出來的。</li>
</ul>
</li>
</ul>
<p>➤ <strong>我們制定的原型與原生的原型最大的不同在於我們制定的原型是可被列舉，原生原型是不可被列舉</strong></p>
<h2 id="❒-解決自制的原型屬性與原生原型屬性屬性特徵不同的方式"><a href="#❒-解決自制的原型屬性與原生原型屬性屬性特徵不同的方式" class="headerlink" title="❒ 解決自制的原型屬性與原生原型屬性屬性特徵不同的方式"></a>❒ 解決自制的原型屬性與原生原型屬性屬性特徵不同的方式</h2><h3 id="解決方式"><a href="#解決方式" class="headerlink" title="解決方式"></a>解決方式</h3><p>使用 <code>definedProperty</code> 對物件屬性做調整。關於 <code>definedProperty</code> 可參考前面的筆記 <a href="https://ithelp.ithome.com.tw/articles/10304938">Day21 | 物件的方法介紹-針對物件本身屬性操作的方法</a> 。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 承上範例 1.</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&#x27;人類&#x27;</span>;</span><br><span class="line"><span class="comment">// ------ 把屬性特徵 enumerable 調整為 false</span></span><br><span class="line"><span class="comment">// 可解決自制的原型屬性與原生原型屬性屬性特徵不同的問題</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>, <span class="string">&#x27;name&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">enumerable</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> casper = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">casper.<span class="property">a</span> = <span class="literal">undefined</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(casper);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(casper.<span class="property">__proto__</span>, <span class="string">&#x27;name&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> casper) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`casper 物件內的屬性：<span class="subst">$&#123;key&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://ithelp.ithome.com.tw/upload/images/20221008/201197432FJoZHFLl6.png" alt="https://ithelp.ithome.com.tw/upload/images/20221008/201197432FJoZHFLl6.png"></p>
<ul>
<li><p>自制原型屬性 name 使用 <code>definedProperty</code> 把屬性特徵 <code>enumerable</code> 調整為 false ( 不可被列舉 ) 與原生原型一樣 ，<code>console.log(casper);</code> 可見 <code>name</code> 顏色就與其他原生原型一樣了。</p>
<ul>
<li>另外 <code>Object.definedProperty(物件, &#39;屬性&#39;, 參數);</code>  中物件放入 Person 是因為函式也是物件的一種。</li>
</ul>
</li>
<li><p><code>Object.getOwnPropertyDescriptor(casper.__proto__, &#39;name&#39;)</code> 中 <code>enumerable</code> 屬性特徵也與原生原型一樣是 <code>false</code>。<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20221008/20119743XdgEjoWsos.png" alt="https://ithelp.ithome.com.tw/upload/images/20221008/20119743XdgEjoWsos.png"></p>
</li>
<li><p>使用 <code>for in</code> 方式就看不到 <code>name</code> 屬性。<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20221008/20119743q6ijGgvWkD.png" alt="https://ithelp.ithome.com.tw/upload/images/20221008/20119743q6ijGgvWkD.png"></p>
</li>
</ul>
<h3 id="解決使用-for-in-列舉的問題"><a href="#解決使用-for-in-列舉的問題" class="headerlink" title="解決使用 for in 列舉的問題"></a>解決使用 for in 列舉的問題</h3><p>使用 <code>for in</code> 可以一一列出物件屬性們，但 <code>for in</code> 不會分辨此屬性是自制原型或原生原型，由於自制原型預設是可被列舉，所以就會被列出來。</p>
<p>➤ <strong>沒使用 <code>definedProperty</code> 調整 <code>enumerable</code> 屬性特徵遇到的問題</strong></p>
<p>如果沒有使用 <code>definedProperty</code> 調整 <code>enumerable</code> 屬性特徵，使用 <code>for in</code> 就會一一列出物件屬性們，包含自制原型內的屬性。 <a href="https://codepen.io/echocarriet/pen/NWMzORP">CodePen 範例</a><br><img src="https://ithelp.ithome.com.tw/upload/images/20221008/20119743dF76G3RYWU.png" alt="casper 物件下的內容"><br>&#x2F;&#x2F; casper 物件下的內容 ↑</p>
<p>➤ <strong>解決使用 for in 不列出原型屬性的方式</strong></p>
<ol>
<li>使用 <code>definedProperty</code> 調整 <code>enumerable</code> <strong>。</strong><a href="https://codepen.io/echocarriet/pen/yLjERRo">CodePen 範例</a></li>
<li>在 <code>for in</code> 加上判斷式。<a href="https://codepen.io/echocarriet/pen/vYjrVaw">CodePen 範例</a><ol>
<li>在 <code>for in</code> 內加上一段判斷式來確保此屬性是在當前物件下而非原型內。<code>for in</code> 中的 <code>key</code> 就只會顯示當前物件的屬性 <code>a</code> 。</li>
</ol>
</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&#x27;人類&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> casper = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">casper.<span class="property">a</span> = <span class="literal">undefined</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(casper);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> casper) &#123;</span><br><span class="line">  <span class="comment">// 此判斷式目的可以確保此屬性是在當前物件下而非原型內</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Object</span>.<span class="property">hasOwnProperty</span>.<span class="title function_">call</span>(casper, key)) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`casper 物件內的屬性：<span class="subst">$&#123;key&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="❒-Getter-與-Setter，賦值運算不使用函式"><a href="#❒-Getter-與-Setter，賦值運算不使用函式" class="headerlink" title="❒ Getter 與 Setter，賦值運算不使用函式"></a>❒ Getter 與 Setter，賦值運算不使用函式</h2><p>想變更物件屬性值，但又希望他有運算功能，可使用 <code>Getter</code> ( 取得特定值的方法 ) 與 <code>Setter</code> ( 存值的方法 ) 。</p>
<h3 id="範例1-Setter-存值運用"><a href="#範例1-Setter-存值運用" class="headerlink" title="範例1. Setter 存值運用"></a>範例1. Setter 存值運用</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> wallet = &#123;</span><br><span class="line">  <span class="attr">total</span>: <span class="number">100</span>,</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">save</span>(<span class="params">price</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">total</span> = <span class="variable language_">this</span>.<span class="property">total</span> + price / <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">wallet.<span class="property">save</span> = <span class="number">300</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(wallet);</span><br></pre></td></tr></table></figure>

<p><strong>Setter 使用方式</strong></p>
<p><code>Setter</code> 是存值概念，會傳入參數</p>
<ul>
<li>先使用一個 <code>set</code> 關鍵字，後方加上屬性名稱 ( 為函式 <code>save(參數)&#123;&#125;</code> )，這樣在 Setter 裡面就可以透過參數方式把值傳入。會透過函式內的參數且透過運算來改變 <code>total</code> 這個屬性值。<ul>
<li>一般都會直接使用 <code>wallet.total = 新值;</code> 來改變  <code>total</code> 屬性值，但 Setter 是透過運算方式改變。</li>
</ul>
</li>
<li>如何透過 Setter 把值存入？<ul>
<li>可使用 <code>物件.屬性名稱 = 新值;</code> ( <code>wallet.save = 300;</code> )，等號右邊的值會透過參數的方式傳進去。</li>
<li>❗ 注意：這邊使用等號 <code>=</code> 非 <code>()</code> ，所以並非用函式方式來執行 <code>Setter</code>，是用等號賦予值的方式來改變存值的方式。</li>
</ul>
</li>
</ul>
<p><strong>答案</strong></p>
<ul>
<li>答案為 <code>250</code>。</li>
</ul>
<h3 id="範例-2-Getter-取值運用"><a href="#範例-2-Getter-取值運用" class="headerlink" title="範例 2. Getter 取值運用"></a>範例 2. Getter 取值運用</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> wallet = &#123;</span><br><span class="line">  <span class="attr">total</span>: <span class="number">100</span>,</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">save</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">total</span> /<span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">wallet.<span class="property">save</span> = <span class="number">300</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(wallet);</span><br><span class="line"><span class="comment">// 直接取 Getter 的值,就會是當下的值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(wallet.<span class="property">save</span>);</span><br></pre></td></tr></table></figure>

<p><strong>使用方式</strong></p>
<p><code>Getter</code> 是取值的概念，不會傳入參數，因為是取值所以會用到 <code>return</code>。</p>
<p><strong>答案</strong></p>
<ul>
<li><p>由開發者工具可見有一個 <code>save: (…)</code>，<code>Getter</code> 的值是在按下 <code>(…)</code> 出現的值。<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20221008/201197434oktkOVUjA.png" alt="https://ithelp.ithome.com.tw/upload/images/20221008/201197434oktkOVUjA.png"></p>
</li>
<li><p>驗證：<code>Getter</code> 的值是在按下 <code>(…)</code> 出現的值，與 <code>wallet.save</code> 相同為 50。<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20221008/201197433bsNriu5KF.png" alt="https://ithelp.ithome.com.tw/upload/images/20221008/201197433bsNriu5KF.png"></p>
</li>
</ul>
<h3 id="範例-3-Setter-存值和-Getter-取值一起使用"><a href="#範例-3-Setter-存值和-Getter-取值一起使用" class="headerlink" title="範例 3. Setter 存值和 Getter 取值一起使用"></a>範例 3. Setter 存值和 Getter 取值一起使用</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> wallet = &#123;</span><br><span class="line">  <span class="attr">total</span>: <span class="number">100</span>,</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">save</span>(<span class="params">price</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">total</span> = <span class="variable language_">this</span>.<span class="property">total</span> + price / <span class="number">2</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">save</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">total</span> /<span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">wallet.<span class="property">save</span> = <span class="number">300</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(wallet);</span><br><span class="line"><span class="comment">// 直接取 Getter 的值,就會是當下的值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(wallet.<span class="property">save</span>);</span><br></pre></td></tr></table></figure>

<p><strong>使用方式</strong></p>
<ul>
<li><code>set</code> 與 <code>get</code> 屬性名稱命名可一樣也可不一樣。</li>
<li>如果 <code>set</code> 與 <code>get</code> 兩個一起運用，要注意 <code>Getter</code> 值是在點下 <code>(…)</code> 出現的值。</li>
</ul>
<p><strong>答案</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set 部分 100+(300/2) = 250</span><br><span class="line">get 部分 250/2 = 125</span><br></pre></td></tr></table></figure>

<ul>
<li><code>Setter</code> 透過參數方式把值 300 存入經過運算， <code>total</code> 為 <code>250</code>。</li>
<li><code>Getter</code> 取到的值為 125。</li>
</ul>
<h2 id="❒-Getter-與-Setter-搭配-Object-defineProperty"><a href="#❒-Getter-與-Setter-搭配-Object-defineProperty" class="headerlink" title="❒ Getter 與 Setter 搭配 Object.defineProperty"></a>❒ <strong><strong>Getter 與 Setter 搭配 Object.defineProperty</strong></strong></h2><h3 id="defineProperty-架構"><a href="#defineProperty-架構" class="headerlink" title="defineProperty 架構"></a><strong><strong>defineProperty 架構</strong></strong></h3><p><code>Object.defineProperty(物件, ‘屬性名稱’,  參數);</code></p>
<h3 id="範例-1-延續上方範例，使用-defineProperty-方式"><a href="#範例-1-延續上方範例，使用-defineProperty-方式" class="headerlink" title="範例 1. 延續上方範例，使用 defineProperty 方式"></a>範例 1. 延續上方範例，使用 <strong><strong>defineProperty 方式</strong></strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var wallet = &#123;</span><br><span class="line">  total: 100</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Object.defineProperty(wallet, &#x27;save&#x27;, &#123;</span><br><span class="line">  set: function(price) &#123;</span><br><span class="line">    this.total = this.total + price / 2;</span><br><span class="line">  &#125;,</span><br><span class="line">  get: function() &#123;</span><br><span class="line">    return this.total /2;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">wallet.save = 300;</span><br><span class="line">console.log(wallet);</span><br><span class="line">console.log(Object.getOwnPropertyDescriptor(wallet, &#x27;save&#x27;));</span><br></pre></td></tr></table></figure>

<ul>
<li><p>屬性名稱帶上 <code>&#39;save&#39;</code>，參數裡面使用 <code>set</code> 冒號 <code>function</code> 方式把 Setter 加入。使用 <code>defineProperty</code>  的方式在開發者工具中看見 Getter 值為不同顏色，屬性特徵與 「 Getter 與 Setter，賦值運算不使用函式 」 新增方式不同 。<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20221008/20119743yjA6H1zNO5.png" alt="https://ithelp.ithome.com.tw/upload/images/20221008/20119743yjA6H1zNO5.png"></p>
<p>  &#x2F;&#x2F; console.log(wallet);</p>
</li>
<li><p>使用 <code>Object.getOwnPropertyDescriptor</code> 查看物件的  <code>&#39;save&#39;</code> 屬性特徵。<code>configurable</code> 與 <code>enumerable</code> 皆為 <code>false</code>，顯示不可刪除與不可列舉。<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20221008/20119743W2xUIbz8Op.png" alt="https://ithelp.ithome.com.tw/upload/images/20221008/20119743W2xUIbz8Op.png"></p>
</li>
</ul>
<p><strong>調整屬性特徵 <code>configurable</code> 與 <code>enumerable</code></strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> wallet = &#123;</span><br><span class="line">  <span class="attr">total</span>: <span class="number">100</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(wallet, <span class="string">&#x27;save&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">set</span>: <span class="keyword">function</span>(<span class="params">price</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">total</span> = <span class="variable language_">this</span>.<span class="property">total</span> + price / <span class="number">2</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">total</span> /<span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">wallet.<span class="property">save</span> = <span class="number">300</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(wallet);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(wallet, <span class="string">&#x27;save&#x27;</span>));</span><br></pre></td></tr></table></figure>

<ul>
<li>在 <code>defineProperty</code> 參數中加入 <code>configurable</code> 與 <code>enumerable</code> 即可。<ul>
<li><code>wallet</code> 物件中的 <code>save</code> 變深色 ＆屬性特徵 <code>configurable</code> 與 <code>enumerable</code> 也調整為 <code>true</code> ( 可刪除也可列舉 )。<br><img src="https://ithelp.ithome.com.tw/upload/images/20221008/20119743o3wrqMKo3U.png" alt="https://ithelp.ithome.com.tw/upload/images/20221008/20119743o3wrqMKo3U.png"></li>
</ul>
</li>
</ul>
<h2 id="❒-加碼範例-陣列使用-Getter-與-Setter"><a href="#❒-加碼範例-陣列使用-Getter-與-Setter" class="headerlink" title="❒ 加碼範例 - 陣列使用 Getter 與 Setter"></a>❒ 加碼範例 - 陣列使用 <strong><strong>Getter 與 Setter</strong></strong></h2><h3 id="取出陣列中最後一筆資料"><a href="#取出陣列中最後一筆資料" class="headerlink" title="取出陣列中最後一筆資料"></a>取出陣列中最後一筆資料</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> b = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>];</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>, <span class="string">&#x27;last&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>[<span class="variable language_">this</span>.<span class="property">length</span> - <span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">last</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b.<span class="property">last</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>使用 <code>defineProperty</code> 直接操作陣列的原型 <code>Array.prototype</code> ( 可透過陣列的建構函式來調整它 )，並加上自定義屬性名稱與帶入參數 Getter。</li>
<li>Getter 中 <code>return</code>  的 <code>this</code> 為陣列本身。</li>
<li>因為直接修改陣列原型，所以所有陣列都可以使用此方法，使用 <code>console.log(a.last);</code> 取最後一個值。</li>
</ul>
<h2 id="參考資訊"><a href="#參考資訊" class="headerlink" title="參考資訊"></a>參考資訊</h2><ul>
<li>JavaScript 核心篇</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>2022年iThome鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>Day26 | JS 箭頭函式</title>
    <url>/javascript/20230402/1073492342/</url>
    <content><![CDATA[<h2 id="❒-箭頭函式架構"><a href="#❒-箭頭函式架構" class="headerlink" title="❒ 箭頭函式架構"></a>❒ 箭頭函式架構</h2><ol>
<li>可把 <code>&#123;&#125;</code> 大括號省略。<ol>
<li>箭頭函式後的 <code>&#123;&#125;</code> 是作為箭頭函式裡面的程式碼片段的範圍使用，並不是物件實字中使用的<code>&#123;&#125;</code> 大括號。所以如果箭頭函式要回傳一個物件內容，須於 <code>&#123;&#125;</code> 外層加上 <code>()</code> 包覆 → <code>(&#123;&#125;)</code>。</li>
</ol>
</li>
<li>如果程式碼內容為表達式 ( 會回傳值 )，沒有其他內容就可以做縮寫「 省略 <code>&#123;&#125;</code> 大括號 &amp; <code>return</code> 」。</li>
<li>如果只有一個參數，可省略 <code>()</code> 括號，但如果沒有參數要保留 <code>()</code> 括號。</li>
<li>如果大括號內有多行程式，建議不要省略 <code>&#123;&#125;</code> 大括號 &amp; <code>return</code>。</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 箭頭函式回傳裡面的物件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">ArrFn</span> = (<span class="params"></span>) =&gt; (&#123;</span><br><span class="line">  <span class="attr">data</span>:<span class="number">1</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">ArrFn</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭頭函式未縮寫</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">numB</span> = (<span class="params">x</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">numB</span>(<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭頭函式縮寫 &quot;return和大括號&quot;可拿掉</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">numB</span> = (<span class="params">x</span>) =&gt; x * x;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">numB</span>(<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">numC</span> = (<span class="params">x</span>) =&gt; <span class="string">`數字相乘等於 <span class="subst">$&#123;x * x&#125;</span>`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">numC</span>(<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭頭函式縮寫-沒有參數</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">numD</span> = (<span class="params"></span>) =&gt; <span class="string">`數字只能是 <span class="subst">$&#123;<span class="number">9</span>&#125;</span>`</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">numD</span>());</span><br></pre></td></tr></table></figure>

<h2 id="❒-箭頭函式與傳統函式差異"><a href="#❒-箭頭函式與傳統函式差異" class="headerlink" title="❒ 箭頭函式與傳統函式差異"></a>❒ 箭頭函式與傳統函式差異</h2><ol>
<li>箭頭函式沒有 <code>argument</code> 這個參數。</li>
<li>箭頭函式沒有自己的 <code>this</code>，所以它的 <code>this</code> 會指向它的外層。</li>
<li>箭頭函式無法透過 <code>call</code>, <code>apply</code>, <code>bind</code> 重新給予 <code>this</code>。</li>
<li>箭頭函式不能當建構函式使用。</li>
</ol>
<h3 id="➊-箭頭函式沒有-argument-這個參數"><a href="#➊-箭頭函式沒有-argument-這個參數" class="headerlink" title="➊ 箭頭函式沒有 argument 這個參數"></a>➊ 箭頭函式沒有 <code>argument</code> 這個參數</h3><p>傳統函式在執行時會自動帶上 <code>argument</code> 這個參數，但箭頭函式沒有 <code>argument</code> 這個參數。</p>
<p><strong>範例 1. 傳統函式</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> nums = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">nums</span>(<span class="number">10</span>, <span class="number">50</span>, <span class="number">60</span>, <span class="number">5</span>, <span class="number">6</span>);</span><br></pre></td></tr></table></figure>

<p><img src="https://ithelp.ithome.com.tw/upload/images/20221011/20119743EgEhUmstMe.png" alt="截圖"></p>
<p><strong>範例 2. 箭頭函式</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">nums</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">nums</span>(<span class="number">10</span>, <span class="number">50</span>, <span class="number">60</span>, <span class="number">5</span>, <span class="number">6</span>);</span><br></pre></td></tr></table></figure>

<p>會顯示錯誤訊息 <code>Uncaught ReferenceError: arguments is not defined at nums</code></p>
<p>➤ <strong>其餘參數：解決箭頭函式沒有 <code>argument</code> 的方式</strong></p>
<p>有時候也會遇到想要取出沒列出的參數，可使用「 其餘參數 」的方式 <code>…變數名稱</code>。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">nums</span> = (<span class="params">...ary</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(ary);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">nums</span>(<span class="number">10</span>, <span class="number">50</span>, <span class="number">60</span>, <span class="number">5</span>, <span class="number">6</span>);</span><br></pre></td></tr></table></figure>

<p><img src="https://ithelp.ithome.com.tw/upload/images/20221011/20119743woYrjNdE78.png" alt="截圖"></p>
<ul>
<li>使用其餘參數後，展開後可見原型 Property 一樣是陣列，可以使用所有陣列的方法，和 <code>argument</code> 參數有些微不同。</li>
</ul>
<h3 id="➋-This-綁定的差異"><a href="#➋-This-綁定的差異" class="headerlink" title="➋ This 綁定的差異"></a>➋ This 綁定的差異</h3><p>箭頭函式沒有自己的 <code>this</code>，所以它的 <code>this</code> 會指向它外層。</p>
<p><strong>範例 1.</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myName = <span class="string">&#x27;全域&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  <span class="attr">myName</span>: <span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line">  <span class="attr">callName</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1&#x27;</span>, <span class="variable language_">this</span>.<span class="property">myName</span>);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;2&#x27;</span>, <span class="variable language_">this</span>.<span class="property">myName</span>);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;3&#x27;</span>, <span class="variable language_">this</span>);</span><br><span class="line">    &#125;,<span class="number">10</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">person.<span class="title function_">callName</span>();</span><br></pre></td></tr></table></figure>

<p><strong>解析：</strong><br><img src="https://ithelp.ithome.com.tw/upload/images/20221011/20119743pGfz2e5bY8.png" alt="截圖"></p>
<p>因為箭頭函式沒有自己的 <code>this</code>，所以 <code>setTimeout</code> 裡的 <code>this</code> 就會指向它外層的 <code>person</code> 下的 <code>myName</code>。</p>
<p><strong>範例 2.</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myName = <span class="string">&#x27;全域&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  <span class="attr">myName</span>: <span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line">  <span class="attr">callName</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1&#x27;</span>, <span class="variable language_">this</span>.<span class="property">myName</span>);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;2&#x27;</span>, <span class="variable language_">this</span>.<span class="property">myName</span>);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;3&#x27;</span>, <span class="variable language_">this</span>.<span class="property">myName</span>);</span><br><span class="line">    &#125;,<span class="number">10</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">person.<span class="title function_">callName</span>();</span><br></pre></td></tr></table></figure>

<p><strong>解析：</strong></p>
<ul>
<li><code>callName</code> 調整成箭頭函式，因為箭頭函式沒有自己的 <code>this</code>，所以會往外找外層的 <code>myName</code>。</li>
<li>答案：1、2 為 <code>全域</code>，3 為 window。<br><img src="https://ithelp.ithome.com.tw/upload/images/20221011/20119743uMNhCNHKiz.png" alt="截圖"></li>
</ul>
<p><strong>範例 3. this 不同，導致 DOM 的 this 也會指向不同位置</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用傳統函式</span></span><br><span class="line"><span class="keyword">const</span> el = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;p&#x27;</span>);</span><br><span class="line">el.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li><code>this</code> 會指向 <code>p</code> 段落。<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20221011/20119743y8qSe8GsDD.png" alt="截圖"></li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用箭頭函式</span></span><br><span class="line"><span class="keyword">const</span> el = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;p&#x27;</span>);</span><br><span class="line">el.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>箭頭函式 <code>this</code> 會指向 <code>window</code> ，因為箭頭函式沒有自己的 <code>this</code> 它會指向外層。<br>   <img src="https://ithelp.ithome.com.tw/upload/images/20221011/20119743LrZ7paM4Fc.png" alt="截圖"></li>
</ul>
<h3 id="➌-無法透過-call-apply-bind-重新給予-this"><a href="#➌-無法透過-call-apply-bind-重新給予-this" class="headerlink" title="➌ 無法透過 call, apply, bind 重新給予 this"></a>➌ 無法透過 call, apply, bind 重新給予 this</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> family = &#123;</span><br><span class="line">  <span class="attr">myName</span>: <span class="string">&#x27;小明家&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// const fn = function (para1, para2) &#123;</span></span><br><span class="line"><span class="comment">//   console.log(this, para1, para2);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span> = (<span class="params">para1, para2</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>, para1, para2);</span><br><span class="line">&#125;</span><br><span class="line">fn.<span class="title function_">call</span>(family, <span class="string">&#x27;小明&#x27;</span>, <span class="string">&#x27;杰倫&#x27;</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>傳統函式透過 <code>call</code> 可把另外一段函式傳入，作為它的還是函式執行的 <code>this</code>。</li>
<li>箭頭函式<ul>
<li><code>family</code> 用 <code>call</code> 的方式傳入，<code>this</code> 會指向全域，因為箭頭函式的 <code>this</code> 無法透過 <code>call</code>, <code>apply</code>, <code>bind</code> 重新給予。</li>
</ul>
</li>
</ul>
<h3 id="❹-箭頭函式不能當建構函式使用"><a href="#❹-箭頭函式不能當建構函式使用" class="headerlink" title="❹ 箭頭函式不能當建構函式使用"></a>❹ 箭頭函式不能當建構函式使用</h3><p><strong>範例 1. 查看傳統函式與箭頭函式的 prototype ( 原型 )</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Fn</span> = <span class="keyword">function</span> (<span class="params">a</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">ArrowFn</span> = (<span class="params">a</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Fn</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">ArrowFn</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = <span class="keyword">new</span> <span class="title class_">Fn</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> b = <span class="keyword">new</span> <span class="title class_">ArrowFn</span>(<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br></pre></td></tr></table></figure>

<ul>
<li>這兩段拿來做建構函式使用，使用建構函式時會使用 <code>prototype</code> 來新增一些方法，但因「 箭頭函式不具有 <code>prototype</code> 所以是不能拿來當建構函式使用 」。所以當 <code>ArrowFn</code> 要新建建構函式就會出現錯誤訊息 <code>Uncaught TypeError: ArrowFn is not a constructor</code>。<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20221011/201197437RvNJNJJ6r.png" alt="截圖"></li>
</ul>
<p>關於建構式可參考：<a href="https://www.casper.tw/javascript/2017/12/18/javascript-constructor/">鐵人賽：JavaScript 建構式</a></p>
<h2 id="❒-箭頭函式常見問題"><a href="#❒-箭頭函式常見問題" class="headerlink" title="❒ 箭頭函式常見問題"></a>❒ 箭頭函式常見問題</h2><h3 id="常見錯誤寫法-1"><a href="#常見錯誤寫法-1" class="headerlink" title="常見錯誤寫法 1"></a>常見錯誤寫法 1</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">ArrFn</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="attr">data</span>: <span class="number">1</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">ArrFn</span>());</span><br></pre></td></tr></table></figure>

<ul>
<li><p>此方式不能直接回傳物件實字，會顯示錯誤訊息：<code>Uncaught SyntaxError: Unexpected token &#39;&#125;’</code></p>
</li>
<li><p>箭頭函式後的 <code>&#123;&#125;</code> 是作為箭頭函式裡面的程式碼片段的範圍使用，並不是物件實字中使用的<code>&#123;&#125;</code> 大括號。所以如果箭頭函式要回傳一個物件內容，須於 <code>&#123;&#125;</code> 外層加上 <code>()</code> 包覆 → <code>(&#123;&#125;)</code>。</p>
  <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 正確寫法</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">ArrFn</span> = (<span class="params"></span>) =&gt; (&#123;</span><br><span class="line">  <span class="attr">data</span>: <span class="number">1</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">ArrFn</span>()); <span class="comment">// 就可正確回傳裡面的物件</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="常見錯誤寫法-2-判斷式後方不能接箭頭函式"><a href="#常見錯誤寫法-2-判斷式後方不能接箭頭函式" class="headerlink" title="常見錯誤寫法 2. 判斷式後方不能接箭頭函式"></a>常見錯誤寫法 2. 判斷式後方不能接箭頭函式</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> numFn = num || <span class="function">() =&gt;</span> <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">numFn</span>());</span><br></pre></td></tr></table></figure>

<ul>
<li><p>這種判斷式後方不能使用箭頭函式，會出現錯誤訊息 <code>Uncaught SyntaxError: Malformed arrow function parameter list</code>。</p>
</li>
<li><p>正確寫法需使用傳統函式或是如上一個範例用 <code>()</code> 包覆。</p>
  <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 正確寫法 --1</span></span><br><span class="line"><span class="comment">// numFn 右方的 num 是假值(上方定義 num為0所以會直接執行後方函式)，回傳函式表達式中的 1</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> numFn = num || <span class="keyword">function</span>(<span class="params"></span>) &#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">numFn</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正確寫法 --2</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> numFn = num || (<span class="function">() =&gt;</span> <span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">numFn</span>());</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="常見錯誤寫法-3"><a href="#常見錯誤寫法-3" class="headerlink" title="常見錯誤寫法 3"></a>常見錯誤寫法 3</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">myName</span>: <span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line">  <span class="attr">callName</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">myName</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">person.<span class="title function_">callName</span>();</span><br></pre></td></tr></table></figure>

<ul>
<li><p>會印出 <code>undefined</code>。因為箭頭函式沒有自己的 <code>this</code>， <code>callName</code> 使用箭頭函式裡面的 <code>this</code> 會指向全域，全域並沒有 <code>muName</code> 。所以如果要取得<code>小明</code>，<code>callName</code> 就要使用傳統函式。</p>
  <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">myName</span>: <span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line">  <span class="attr">callName</span>: <span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">myName</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">person.<span class="title function_">callName</span>();</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="常見錯誤寫法-4-箭頭函式不能作建構函式使用"><a href="#常見錯誤寫法-4-箭頭函式不能作建構函式使用" class="headerlink" title="常見錯誤寫法 4. 箭頭函式不能作建構函式使用"></a>常見錯誤寫法 4. 箭頭函式不能作建構函式使用</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Fn2</span> = <span class="keyword">function</span> (<span class="params">a</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Fn2</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">protoFn</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 實體化</span></span><br><span class="line"><span class="keyword">const</span> newObj = <span class="keyword">new</span> <span class="title class_">Fn2</span>(<span class="string">&#x27;函式&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newObj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newObj.<span class="title function_">protoFn</span>());</span><br></pre></td></tr></table></figure>

<ul>
<li><p>第一行使用傳統函式作建構函式使用。第二行在 <code>Fn2</code> 函式的 <code>prototype</code> 下新增一個原型方法 <code>protoFn</code> ，這個原型方法使用建構函式來建立。</p>
</li>
<li><p><code>console.log(newObj);</code> 可正確查到 <code>Fn2</code> 原型 (<code>prototype</code>) 下的 <code>protoFn</code> 方法。但實際在執行時 <code>console.log(newObj.protoFn());</code> 所得到的值會是空的。<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20221011/20119743vP5P91LJj7.png" alt="截圖"></p>
</li>
<li><p>為什麼無法得到 <code>newObj</code> 下面的 <code>name</code>，而是取到空值？</p>
<ul>
<li><p>主要是箭頭函式指向和傳統函式不同，所以 <code>Fn2.prototype.protoFn</code> 裡的 <code>this</code> 指向是全域 <code>window</code> 而非第一行 <code>Fn2</code> 。</p>
<pre><code><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Fn2</span> = <span class="keyword">function</span> (<span class="params">a</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 調整程式碼看看裡面的this</span></span><br><span class="line"><span class="title class_">Fn2</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">protoFn</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 實體化</span></span><br><span class="line"><span class="keyword">const</span> newObj = <span class="keyword">new</span> <span class="title class_">Fn2</span>(<span class="string">&#x27;函式&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newObj.<span class="title function_">protoFn</span>()); <span class="comment">// window</span></span><br></pre></td></tr></table></figure>

![截圖](https://ithelp.ithome.com.tw/upload/images/20221011/20119743agmUs6yGMv.png)
</code></pre>
</li>
<li><p>正確寫法，把 <code>Fn2.prototype.protoFn</code> 使用傳統函式來建構，可見 <code>this</code> 指向為第一行的 <code>Fn2</code>。</p>
<pre><code><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Fn2</span> = <span class="keyword">function</span> (<span class="params">a</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Fn2</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">protoFn</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 實體化</span></span><br><span class="line"><span class="keyword">const</span> newObj = <span class="keyword">new</span> <span class="title class_">Fn2</span>(<span class="string">&#x27;函式&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newObj.<span class="title function_">protoFn</span>());</span><br></pre></td></tr></table></figure>

![截圖](https://ithelp.ithome.com.tw/upload/images/20221011/20119743hoJB77fPfs.png)
</code></pre>
</li>
</ul>
</li>
</ul>
<h2 id="❒-箭頭函式實戰用法"><a href="#❒-箭頭函式實戰用法" class="headerlink" title="❒ 箭頭函式實戰用法"></a>❒ <strong><strong>箭頭函式實戰用法</strong></strong></h2><h3 id="實戰-1-搭配陣列方法"><a href="#實戰-1-搭配陣列方法" class="headerlink" title="實戰 1.  搭配陣列方法"></a>實戰 1.  搭配陣列方法</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 陣列雙倍</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">15</span>, <span class="number">12</span>, <span class="number">63</span>, <span class="number">67</span>, <span class="number">1421</span>, <span class="number">124</span>, <span class="number">56</span>];</span><br><span class="line"><span class="keyword">const</span> arrDouble = arr.<span class="title function_">map</span>(<span class="function">(<span class="params">num</span>) =&gt;</span> num * <span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arrDouble);</span><br></pre></td></tr></table></figure>

<p><code>map</code> 很適合用在陣列裡所有的值都需要調整的時候，因為 <code>map</code> 會透過函式所回傳的值組成一個新的陣列。</p>
<h3 id="實戰-2-平均值-加總"><a href="#實戰-2-平均值-加總" class="headerlink" title="實戰 2. 平均值 加總"></a>實戰 2. 平均值 加總</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 傳統函式寫法</span></span><br><span class="line"><span class="keyword">const</span> average = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> nums = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="variable language_">arguments</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用 reduce 算1~5總和</span></span><br><span class="line">  <span class="keyword">const</span> total = nums.<span class="title function_">reduce</span>(<span class="keyword">function</span> (<span class="params">acc, curr</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> acc + curr</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(total);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 算平均值</span></span><br><span class="line">  <span class="keyword">return</span> total / nums.<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">average</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">10</span>));</span><br></pre></td></tr></table></figure>

<ul>
<li><code>average()</code> 此函式會將傳入的參數 ( <code>average(1, 2, 3, 4, 5)</code> ) 全部取出，我們使用 <code>arguments</code> 這個參數。由於 <code>arguments</code> 為類陣列沒有所有陣列的方法，所以 <code>Array.from</code> 使用將它轉為純陣列。</li>
</ul>
<p><strong>箭頭函式寫法</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">average</span> = (<span class="params">...num</span>) =&gt; num.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, curr</span>) =&gt;</span> acc + curr, <span class="number">0</span>) / num.<span class="property">length</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">average</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">10</span>));</span><br></pre></td></tr></table></figure>

<ul>
<li>因為箭頭函式沒有 <code>argument</code> 的方式，所以可使用其餘參數來解決無法取出沒有列出的參數問題。</li>
</ul>
<h3 id="實戰-3-物件內-this"><a href="#實戰-3-物件內-this" class="headerlink" title="實戰 3. 物件內 this"></a>實戰 3. 物件內 this</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 傳統函式</span></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;&#125;,</span><br><span class="line"> <span class="comment">// getData 方法可取得遠端資料</span></span><br><span class="line">  <span class="attr">getData</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 將this指向新變數vm</span></span><br><span class="line">    <span class="keyword">const</span> vm = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="comment">// 透過ajax取的遠端資料</span></span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;https://randomuser.me/api/&#x27;</span>,</span><br><span class="line">      <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">      <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">        <span class="comment">// vm.data指的是person.data</span></span><br><span class="line">        vm.<span class="property">data</span> = data.<span class="property">results</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person.data&#x27;</span>, person.<span class="property">data</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">person.<span class="title function_">getData</span>();</span><br></pre></td></tr></table></figure>

<ul>
<li>記得先載入 jQuery CDN  才可運作 <code>https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.1/jquery.min.js</code></li>
</ul>
<p><strong>調整成箭頭函式</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 箭頭函式寫法</span></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">getData</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 透過ajax取的遠端資料</span></span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;https://randomuser.me/api/&#x27;</span>,</span><br><span class="line">      <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">      <span class="attr">success</span>: <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">        <span class="comment">// vm.data指的是person.data</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">data</span> = data.<span class="property">results</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person.data&#x27;</span>, person.<span class="property">data</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">person.<span class="title function_">getData</span>();</span><br></pre></td></tr></table></figure>

<ul>
<li>箭頭函式沒有自己的 <code>this</code>，所以把 <code>success</code> 後方調整成箭頭函式後，裡面的 <code>this</code> 會指向外層作用域 <code>getData</code>，而基於 <code>getData</code> 是由 <code>person</code> 呼叫所以 <code>this</code> 會指向 <code>person</code>。<code>success</code> 內原本的 <code>vm</code> 可修改成 <code>this</code>，<code>const vm = this;</code> 可刪除。</li>
</ul>
<h2 id="參考資訊"><a href="#參考資訊" class="headerlink" title="參考資訊"></a>參考資訊</h2><ul>
<li>JavaScript 必修篇 - 前端修練全攻略</li>
<li>JavaScript 核心篇</li>
<li><a href="https://www.casper.tw/javascript/2017/12/18/javascript-constructor/">鐵人賽：JavaScript 建構式</a></li>
<li><a href="https://www.casper.tw/javascript/2017/06/29/es6-native-array/">JavaScript 陣列處理方法 [filter(), find(), forEach(), map(), every(), some(), reduce()]</a></li>
<li><a href="https://30secondsofknowledge.com/">30 SECONDS OF KNOWLEDGE</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>2022年iThome鐵人賽</tag>
        <tag>箭頭函式</tag>
      </tags>
  </entry>
  <entry>
    <title>Day24 | JS 關於物件的傳參考、淺層拷貝、深層拷貝</title>
    <url>/javascript/20230402/2820114571/</url>
    <content><![CDATA[<h2 id="❒-物件傳參考的特性"><a href="#❒-物件傳參考的特性" class="headerlink" title="❒ 物件傳參考的特性"></a>❒ 物件傳參考的特性</h2><h3 id="JavaScript-賦予一個值到變數上時會有兩個特性"><a href="#JavaScript-賦予一個值到變數上時會有兩個特性" class="headerlink" title="JavaScript 賦予一個值到變數上時會有兩個特性"></a>JavaScript 賦予一個值到變數上時會有兩個特性</h3><ol>
<li>傳值 ( Call by Reference )<ul>
<li>Boolean</li>
<li>Null</li>
<li>Undefined</li>
<li>Number</li>
<li>String</li>
<li>…</li>
</ul>
</li>
<li>傳參考 ( Call by Sharing )<ul>
<li>物件 ( 陣列、函式 )</li>
</ul>
</li>
</ol>
<h3 id="➊-傳值-Call-by-Reference"><a href="#➊-傳值-Call-by-Reference" class="headerlink" title="➊ 傳值 ( Call by Reference )"></a>➊ 傳值 ( Call by Reference )</h3><blockquote>
<p><strong>純值賦值是透過複製的方式</strong>，所以前者與後者各自獨立，當後者修改時不會影響前者。</p>
</blockquote>
<p>純值：為基本型別 ( number、string、boolean、null、undefined )。</p>
<p><strong>範例</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = <span class="string">&#x27;小明&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> person2 = person;</span><br><span class="line">person2 = <span class="string">&#x27;杰倫&#x27;</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>var person2 = person;</code> 為把 <code>person</code> 的值帶過去 <code>person2</code> 就為傳值，純值傳值是一種複製的方式。</li>
<li><code>person2</code> 接收了 <code>person</code> 的值後再另外賦予 <code>person2</code> 新的值就不會和 <code>person</code> 有關聯性。</li>
</ul>
<h3 id="➋-傳參考-Call-by-Sharing"><a href="#➋-傳參考-Call-by-Sharing" class="headerlink" title="➋ 傳參考 ( Call by Sharing )"></a>➋ 傳參考 ( Call by Sharing )</h3><blockquote>
<p><strong>物件賦值是透過傳參考的特性</strong>，所以前者與後者都<strong>共用</strong>同一個記憶體空間的參考路徑，後者修改時前者也會跟著修改。</p>
</blockquote>
<ul>
<li>「 物件、陣列、函式 」皆為傳參考特性，會先另外建立一個記憶體空間把值寫入。</li>
<li>❗ 注意：物件變數新增一個新的物件 <code>&#123;&#125;</code> 就會產生一個新的記憶體空間，就不會相互影響 ( 如下方範例 2. 3 )。</li>
</ul>
<p><strong>範例1. 物件傳參考</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line"> <span class="attr">money</span>: <span class="number">1000</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> person2 = person;</span><br><span class="line">person2.<span class="property">name</span> = <span class="string">&#x27;杰倫&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( person === person2 );</span><br></pre></td></tr></table></figure>

<p><strong>解析：</strong></p>
<ul>
<li><p>程式碼中我們宣告了一個 <code>person</code> ( <code>var person = &#123; name: &#39;小明&#39;, money: 1000,&#125;;</code> ) 表示在記憶體準備了一個參考路徑，這個參考位置包含了 <code>name</code> 和 <code>money</code>。( 如下右圖，0x01 是為了記憶自訂義名稱 )<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20221009/201197439fST2tPxSZ.png" alt="示意圖"></p>
</li>
<li><p>當定義 person 為一個物件時，person 帶入的會是 0x01 這個記憶體的參考路徑，並不是帶入一個完整的物件內容。當參考路徑指向此物件時  ( 傳參考 ) 就可透過這種方式來取得裡面的 <code>name</code> 與 <code>money</code> 屬性。所以 <code>person</code> 並不會把 <code>name</code> 與 <code>money</code> 存到它的記憶體空間，只會傳入一個參考。<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20221009/20119743R7zdOtJ4tO.png" alt="示意圖"></p>
</li>
<li><p><code>var person2 = person;</code> 時會把 <code>person</code> 原本的參考位置一樣傳到 <code>person2</code>，所以 <code>person</code> 和 <code>person2</code> 共用的是同一個參考路徑 ( 右邊格子 0x01 )，所以 <code>person2</code> 修改時也會一併修改到 <code>person</code>。</p>
<ul>
<li>這段程式碼只有產生一個參考路徑，這個參考路徑對應一個物件，所以只有產生一個物件，<code>person2</code> <code>person</code> 兩者皆共用同一物件。<br><img src="https://ithelp.ithome.com.tw/upload/images/20221009/201197439J6vMACbDQ.png" alt="示意圖"></li>
</ul>
</li>
<li><p>物件賦予值是以傳參考方式進行。</p>
</li>
<li><p>所以答案為 <code>true</code>。</p>
</li>
</ul>
<p><strong>範例 2. 物件傳參考</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line"> <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line"> <span class="attr">money</span>: <span class="number">1000</span>,</span><br><span class="line">&#125; </span><br><span class="line">****<span class="keyword">var</span> person2 = person;</span><br><span class="line">person2 = &#123; ... &#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( person === person2 );</span><br></pre></td></tr></table></figure>

<p><img src="https://ithelp.ithome.com.tw/upload/images/20221009/20119743hLIcmuKTz0.png" alt="示意圖"></p>
<p><strong>解析：</strong></p>
<ul>
<li>把 <code>person2</code> 指向一個新的空物件 <code>&#123; … &#125;</code>，它就會產生另一個參考路徑 0x02，這時產生另一個物件也就是產生另一個參考路徑，所以 <code>person</code> 與 <code>person2</code> 就不會有任何關聯，互不影響。</li>
<li>所以答案為 <code>false</code>。</li>
</ul>
<p><strong>範例 3. 物件傳參考</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line"> <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line">&#125; </span><br><span class="line">****<span class="keyword">var</span> person2 = person;</span><br><span class="line">person2 = &#123;</span><br><span class="line"> <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( person === person2 );</span><br></pre></td></tr></table></figure>

<ul>
<li><code>person2 = &#123; name: &#39;小明&#39; &#125;</code> 中就算 <code>person2</code> 與 <code>person</code> 內屬性與屬性值相同，但因分別為獨立的兩個物件兩個參考路徑，所以不會互相影響。</li>
<li>所以答案為 <code>false</code>。</li>
</ul>
<h2 id="❒-物件傳參考實作範例"><a href="#❒-物件傳參考實作範例" class="headerlink" title="❒ 物件傳參考實作範例"></a>❒ 物件傳參考實作範例</h2><p>❗ 注意：新增一個新的物件就會產生一個新的記憶體空間，前者與後者不會相互影響。</p>
<h3 id="實作-1"><a href="#實作-1" class="headerlink" title="實作 1"></a>實作 1</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> family = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;小明家&#x27;</span>,</span><br><span class="line">  <span class="attr">members</span>: &#123;</span><br><span class="line">    <span class="attr">father</span>: <span class="string">&#x27;老爸&#x27;</span>,</span><br><span class="line">    <span class="attr">mother</span>: <span class="string">&#x27;老媽&#x27;</span>,</span><br><span class="line">    <span class="attr">ming</span>: <span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> member = family.<span class="property">members</span>;</span><br><span class="line">member = &#123;</span><br><span class="line">  <span class="attr">ming</span>: <span class="string">&#x27;大明&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(family);</span><br></pre></td></tr></table></figure>

<p><strong>解析：</strong></p>
<ul>
<li><p>在 <code>var member = family.members;</code> 時，<code>member</code> 與 <code>family.members</code> 都還是同個參考路徑。<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20221009/20119743FyX81smW7U.png" alt="示意圖"></p>
</li>
<li><p><code>member</code> 賦予一個新的物件 <code>member = &#123; ming: &#39;大明&#39; &#125;</code> 開始，就拆成兩個參考路徑了，因為「 物件變數中看到新的 <code>&#123;&#125;</code> 就表示會產生一個新的記憶體空間 」。<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20221009/20119743VwasY6M2pO.png" alt="示意圖"></p>
</li>
<li><p>但是換成另種寫法 ：<code>member</code> 直接修改屬性而非產生 <code>&#123;&#125;</code> ，<code>member</code> 就會和 <code>family.members</code> 使用同一個參考路徑，而它們兩個也會相互影響。</p>
  <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> family = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;小明家&#x27;</span>,</span><br><span class="line">  <span class="attr">members</span>: &#123;</span><br><span class="line">    <span class="attr">father</span>: <span class="string">&#x27;老爸&#x27;</span>,</span><br><span class="line">    <span class="attr">mother</span>: <span class="string">&#x27;老媽&#x27;</span>,</span><br><span class="line">    <span class="attr">ming</span>: <span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> member = family.<span class="property">members</span>;</span><br><span class="line">member.<span class="property">ming</span> = <span class="string">&#x27;大明&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(family);</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="實作-2"><a href="#實作-2" class="headerlink" title="實作 2"></a>實作 2</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line"> <span class="attr">x</span>: <span class="number">1</span>,</span><br><span class="line">&#125;</span><br><span class="line">a.<span class="property">y</span> = a;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br></pre></td></tr></table></figure>

<p><strong>解析：</strong></p>
<ul>
<li><p>此寫法會造成無限循環，不斷指向自己。</p>
  <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="attr">x</span>: <span class="number">1</span>,</span><br><span class="line"> <span class="attr">y</span>: &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="number">1</span>, </span><br><span class="line">  <span class="attr">y</span>: &#123;</span><br><span class="line">   <span class="attr">x</span>: <span class="number">1</span>,</span><br><span class="line">   <span class="attr">y</span>: &#123;.... 無限循環&#125;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>a</code> 產生一個參考路徑 0x01 屬性為 <code>x</code> → <code>a</code> 指向 0x01 參考路徑 → <code>a</code> 新增一個 <code>y</code> 屬性且屬性值為 <code>a</code>，指回原參考路徑 0x01。從 <code>a</code> 裡面找 <code>y</code> 就會指回原參考路徑一直指向自己造成無限循環。<br><img src="https://ithelp.ithome.com.tw/upload/images/20221009/20119743HdIWoeXkRZ.png" alt="示意圖"></p>
</li>
</ul>
<h3 id="實作-3"><a href="#實作-3" class="headerlink" title="實作 3"></a>實作 3</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="number">1</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line">a.<span class="property">y</span> = a = &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="number">2</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">y</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a === b.<span class="property">y</span>);</span><br></pre></td></tr></table></figure>

<p><strong>拆解：</strong></p>
<ul>
<li><p><code>var b = a;</code> 這時變數 <code>b</code> 與 <code>a</code> 都還是同一個參考路徑 0x01。<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20221009/20119743GaKv9jlaZF.jpg" alt="物件傳參考拆解01"></p>
</li>
<li><p><code>a.y = a = &#123; x: 2 &#125;;</code></p>
<ul>
<li><code>a = &#123; x: 2 &#125;;</code> 為運算式，所以 <code>x: 2</code> 會賦予到 <code>y</code> 上，</li>
<li><code>a.y = a = &#123; x: 2 &#125;;</code> 這行是同時執行的沒有執行順序的問題，會等於 <code>a = a.y = &#123; x: 2 &#125;;</code> 。所以 <code>a.y</code> 的參考路徑會是原本的 <code>a</code> 參考路徑 0x01 而非 <code>a</code> 新的參考路徑 0x02。</li>
<li><code>a</code> 新增一個 <code>y</code> 屬性，其屬性值為 a ( 參考物件 0x01 ) → 屬性值 <code>a</code> 新增一個物件，只要新增物件就會新增一個參考路徑，這邊 <code>a</code> 新增物件的新參考路徑為 0x02 裡面有 <code>x</code> 屬性與屬性值 2 ( <code>a.y</code> 參考路徑由 0x01 變 0x02 )。<br><img src="https://ithelp.ithome.com.tw/upload/images/20221009/201197432QHHN1UDqL.jpg" alt="物件傳參考拆解02"></li>
</ul>
</li>
</ul>
<p><strong>答案：</strong></p>
<ul>
<li><code>console.log(a.y);</code> 印出 <code>undefined</code>。<ul>
<li>a 參考路徑變 0x02 而裡面並沒有 y 屬性，所以為 <code>undefined</code>。</li>
</ul>
</li>
<li><code>console.log(b);</code> 印出 <code>&#123; x:1, y: &#123; x:2 &#125; &#125;</code>。</li>
<li><code>console.log(a === b.y);</code> 印出 <code>true</code>。</li>
</ul>
<h3 id="實作-4"><a href="#實作-4" class="headerlink" title="實作 4"></a>實作 4</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123; <span class="attr">x</span>: <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line">a.<span class="property">x</span> = &#123; <span class="attr">x</span>: <span class="number">2</span> &#125;;</span><br><span class="line">a.<span class="property">y</span> = a = &#123; <span class="attr">y</span>: <span class="number">1</span>&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 結果？</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 結果？</span></span><br></pre></td></tr></table></figure>

<p><strong>解析：</strong><br><img src="https://ithelp.ithome.com.tw/upload/images/20221009/20119743Eak4i3ysnE.jpg" alt="物件傳參考範例四拆解"></p>
<ul>
<li>到 <code>var b = a;</code> 時，<code>a</code> 與 <code>b</code> 都還是同個參考路徑 0x01。</li>
<li><code>a.x = &#123; x: 2 &#125;;</code> ，<code>a.x</code> 被賦予新物件，當有新物件就會產生一個新的參考路徑，所以 0x01 的 <code>x</code> 屬性值參考路徑變成 0x02。</li>
<li><code>a.y = a = &#123; y: 1&#125;;</code> 為運算式所以它們會同時執行沒有順序問題，而 <code>a.y = a</code> 為最原始的 a 參考路徑 0x01，所以 0x01 多一個 <code>y</code> 屬性，<code>y</code> 的屬性值為新的參考路徑 0x03 ( 有新物件就會產生一個新的參考路徑 )。</li>
</ul>
<p><strong>答案：</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">//a</span></span><br><span class="line">&#123; <span class="attr">y</span>: <span class="number">1</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//b</span></span><br><span class="line"><span class="attr">x</span>: &#123;</span><br><span class="line"> <span class="attr">x</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="attr">y</span>: &#123;</span><br><span class="line"> <span class="attr">y</span>:<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="❒-淺層複製與深層複製"><a href="#❒-淺層複製與深層複製" class="headerlink" title="❒ 淺層複製與深層複製"></a>❒ 淺層複製與深層複製</h2><p>由於物件有傳參考的特性，所以當兩物件需要拆開處理，就會產生一些困擾，這時就可使用 for in、淺層複製、深層複製來解決這個問題。</p>
<h2 id="❒-淺層拷貝-shallow-Copy"><a href="#❒-淺層拷貝-shallow-Copy" class="headerlink" title="❒ 淺層拷貝 ( shallow Copy )"></a>❒ 淺層拷貝 ( shallow Copy )</h2><p><strong>缺點：</strong> <code>for in</code> 方式只能做到第一層的複製，第一層以上的都還是會有傳參考特性。</p>
<h3 id="➊-for-in"><a href="#➊-for-in" class="headerlink" title="➊  for in"></a>➊  for in</h3><p><strong>結構：</strong> <code>for ( var key in 原物件名稱 ) &#123;&#125;</code>，當中的 <code>key</code> 為原物件的屬性。</p>
<p><strong>範例 1.</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> family = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;小明家&#x27;</span>,</span><br><span class="line">  <span class="attr">members</span>: &#123;</span><br><span class="line">    <span class="attr">father</span>: <span class="string">&#x27;老爸&#x27;</span>,</span><br><span class="line">    <span class="attr">mom</span>: <span class="string">&#x27;老媽&#x27;</span>,</span><br><span class="line">    <span class="attr">ming</span>: <span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newFamily = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> family) &#123;</span><br><span class="line">  newFamily[key] = family[key];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 物件內第一層成功拷貝，family與newFamily各自獨立</span></span><br><span class="line">newFamily.<span class="property">name</span> = <span class="string">&#x27;大明家&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(family, newFamily);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 物件內第二層還是有傳參考特性，所以會一併修改到 family.members.ming </span></span><br><span class="line">newFamily.<span class="property">members</span>.<span class="property">ming</span> = <span class="string">&#x27;大明&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(family.<span class="property">members</span>.<span class="property">ming</span> === newFamily.<span class="property">members</span>.<span class="property">ming</span>); </span><br></pre></td></tr></table></figure>

<p><a href="https://codepen.io/echocarriet/pen/ZEoooNe">CodePen 範例</a></p>
<ul>
<li>因為淺層拷貝只能移除第一層的傳參考特性，所以 <code>console.log(family.members.ming === newFamily.members.ming);</code>  會為 <code>true</code>。</li>
</ul>
<h3 id="➋-使用-jQuery-方式"><a href="#➋-使用-jQuery-方式" class="headerlink" title="➋ 使用 jQuery 方式"></a>➋ 使用 jQuery 方式</h3><p>記得先載入 jQuery CDN</p>
<p><strong>結構：</strong> <code>jQuery.extent(&#123;&#125;, 原物件名稱)</code></p>
<p><strong>範例</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> family = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;小明家&#x27;</span>,</span><br><span class="line">  <span class="attr">members</span>: &#123;</span><br><span class="line">    <span class="attr">father</span>: <span class="string">&#x27;老爸&#x27;</span>,</span><br><span class="line">    <span class="attr">mom</span>: <span class="string">&#x27;老媽&#x27;</span>,</span><br><span class="line">    <span class="attr">ming</span>: <span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newFamily = jQuery.<span class="title function_">extend</span>(&#123;&#125;, family);</span><br><span class="line">newFamily.<span class="property">name</span> = <span class="string">&#x27;大明&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(family, newFamily);</span><br><span class="line">newFamily.<span class="property">members</span>.<span class="property">ming</span> = <span class="string">&#x27;大明&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(family.<span class="property">members</span>.<span class="property">ming</span> === newFamily.<span class="property">members</span>.<span class="property">ming</span>); </span><br></pre></td></tr></table></figure>

<ul>
<li>因為淺層拷貝只能移除第一層的傳參考特性，所以 <code>console.log(family.members.ming === newFamily.members.ming);</code>  會為 <code>true</code>。</li>
</ul>
<h3 id="➌-Object-assign-ES6-方式"><a href="#➌-Object-assign-ES6-方式" class="headerlink" title="➌  Object.assign ( ES6 方式 )"></a>➌  Object.assign ( ES6 方式 )</h3><p><strong>結構：</strong> <code>Object.assign(&#123;&#125;, 原物件名稱)</code></p>
<p><strong>範例</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> family = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;小明家&#x27;</span>,</span><br><span class="line">  <span class="attr">members</span>: &#123;</span><br><span class="line">    <span class="attr">father</span>: <span class="string">&#x27;老爸&#x27;</span>,</span><br><span class="line">    <span class="attr">mom</span>: <span class="string">&#x27;老媽&#x27;</span>,</span><br><span class="line">    <span class="attr">ming</span>: <span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newFamily = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, family);</span><br><span class="line">newFamily.<span class="property">name</span> = <span class="string">&#x27;大明&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(family, newFamily);</span><br><span class="line">newFamily.<span class="property">members</span>.<span class="property">ming</span> = <span class="string">&#x27;大明&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(family.<span class="property">members</span>.<span class="property">ming</span> === newFamily.<span class="property">members</span>.<span class="property">ming</span>); </span><br></pre></td></tr></table></figure>

<ul>
<li>因為淺層拷貝只能移除第一層的傳參考特性，所以 <code>console.log(family.members.ming === newFamily.members.ming);</code>  會為 <code>true</code>。</li>
</ul>
<h3 id="❹-…-展開的方式-筆者較常用此方式"><a href="#❹-…-展開的方式-筆者較常用此方式" class="headerlink" title="❹ … 展開的方式 ( 筆者較常用此方式 )"></a>❹ <code>…</code> 展開的方式 ( 筆者較常用此方式 )</h3><p><strong>結構：</strong> <code>&#123; ...原物件名稱 &#125;</code></p>
<p><strong>範例</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> family = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;小明家&#x27;</span>,</span><br><span class="line">  <span class="attr">members</span>: &#123;</span><br><span class="line">    <span class="attr">father</span>: <span class="string">&#x27;老爸&#x27;</span>,</span><br><span class="line">    <span class="attr">mom</span>: <span class="string">&#x27;老媽&#x27;</span>,</span><br><span class="line">    <span class="attr">ming</span>: <span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newFamily = &#123; ...family &#125;;</span><br><span class="line">newFamily.<span class="property">name</span> = <span class="string">&#x27;大明&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(family, newFamily);</span><br><span class="line">newFamily.<span class="property">members</span>.<span class="property">ming</span> = <span class="string">&#x27;大明&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(family.<span class="property">members</span>.<span class="property">ming</span> === newFamily.<span class="property">members</span>.<span class="property">ming</span>); </span><br></pre></td></tr></table></figure>

<ul>
<li>因為淺層拷貝只能移除第一層的傳參考特性，所以 <code>console.log(family.members.ming === newFamily.members.ming);</code>  會為 <code>true</code>。</li>
</ul>
<h2 id="❒-深層拷貝"><a href="#❒-深層拷貝" class="headerlink" title="❒ 深層拷貝"></a>❒ 深層拷貝</h2><p>不論物件裡面有幾層，都可透過深層拷貝的方式移除物件傳參考的特性。</p>
<p><strong>使用方式：</strong> 把原本物件轉為字串再轉回物件，這種方式可以移除傳參考的特性。</p>
<p><strong>結構：</strong></p>
<ul>
<li>使用 JSON 方式把原物件轉為字串 → <code>JSON.stringify(原物件名稱)</code></li>
<li>透過 <code>JSON.parse</code> 把字串再轉回物件 → <code>JSON.parse(JSON.stringify(原物件名稱))</code></li>
</ul>
<p><strong>範例</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> family = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;小明家&#x27;</span>,</span><br><span class="line">  <span class="attr">members</span>: &#123;</span><br><span class="line">    <span class="attr">father</span>: <span class="string">&#x27;老爸&#x27;</span>,</span><br><span class="line">    <span class="attr">mom</span>: <span class="string">&#x27;老媽&#x27;</span>,</span><br><span class="line">    <span class="attr">ming</span>: <span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> newFamily = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(family));</span><br><span class="line"></span><br><span class="line">newFamily.<span class="property">name</span> = <span class="string">&#x27;大明&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(family, newFamily);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 深層拷貝後，改了原物件第二層內的值也不會影響原物值，兩物件 family 與 newFamily各自獨立</span></span><br><span class="line">newFamily.<span class="property">members</span>.<span class="property">ming</span> = <span class="string">&#x27;大明&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(family.<span class="property">members</span>.<span class="property">ming</span> === newFamily.<span class="property">members</span>.<span class="property">ming</span>);</span><br></pre></td></tr></table></figure>

<p><a href="https://codepen.io/echocarriet/pen/QWrrxKK">CodePen 範例</a></p>
<ul>
<li>因為深層拷貝可以移除物件內所有層的傳參考特性，所以 <code>console.log(family.members.ming === newFamily.members.ming);</code>  會為 <code>false</code>。</li>
</ul>
<h3 id="淺層拷貝範例"><a href="#淺層拷貝範例" class="headerlink" title="淺層拷貝範例"></a>淺層拷貝範例</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">changeName</span>(<span class="params">data</span>) &#123;</span><br><span class="line">  data.<span class="property">name</span> = <span class="string">&#x27;杰倫家&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> family = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line">  <span class="attr">home</span>: <span class="string">&#x27;小明家&#x27;</span>,</span><br><span class="line">  <span class="attr">members</span>: &#123;</span><br><span class="line">    <span class="attr">father</span>: <span class="string">&#x27;老爸&#x27;</span>,</span><br><span class="line">    <span class="attr">mom</span>: <span class="string">&#x27;老媽&#x27;</span>,</span><br><span class="line">    <span class="attr">ming</span>: <span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> family2 = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, <span class="title function_">changeName</span>(family));</span><br><span class="line">family2.<span class="property">members</span>.<span class="property">jay</span> = <span class="string">&#x27;杰倫&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`family.name, <span class="subst">$&#123;family.name&#125;</span>`</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`family.members.jay, <span class="subst">$&#123;family.members.jay&#125;</span>`</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(family === family2);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(family.<span class="property">members</span> === family2.<span class="property">members</span>);</span><br></pre></td></tr></table></figure>

<p><img src="https://ithelp.ithome.com.tw/upload/images/20221009/20119743wZjO2fszKV.png" alt="示意圖"></p>
<ul>
<li>在 <code>Object.assign</code> 執行淺層拷貝時，先執行了 <code>changeName(data)</code>，物件是傳參考概念而函式也是物件所以也具有傳參考特性。</li>
<li><code>changeName(data)</code> 中 data 參數換成 family，<code>changeName(family)</code> 裡面執行了 <code>family.name = &#39;杰倫家&#39;;</code> 會一併修改到 <code>family</code> 的參考路徑中 <code>name</code> 的屬性值，所以 <code>family.name</code> 會印出 <code>杰倫家</code>。</li>
<li>因為淺層拷貝只會移除第一層的傳參考特性 ( 複製 0x01 第一層到 0x03 )，所以 <code>family2.members.jay = &#39;杰倫&#39;;</code> 中 <code>members</code> 內為第二層還是保有傳參考特性 ( 0x03 中的 members 參考路徑還是 0 )。</li>
</ul>
<p><strong>答案：</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`family.name, <span class="subst">$&#123;family.name&#125;</span>`</span>); <span class="comment">// 杰倫家</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`family.members.jay, <span class="subst">$&#123;family.members.jay&#125;</span>`</span>); <span class="comment">//杰倫</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(family === family2); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(family.<span class="property">members</span> === family2.<span class="property">members</span>);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h2 id="參考資訊"><a href="#參考資訊" class="headerlink" title="參考資訊"></a>參考資訊</h2><ul>
<li>六角學院 - JavaScript 核心篇</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>2022年iThome鐵人賽</tag>
        <tag>淺層拷貝</tag>
        <tag>深層拷貝</tag>
        <tag>傳參考</tag>
      </tags>
  </entry>
  <entry>
    <title>MacM1 更改終端機預設語言</title>
    <url>/tools/20230327/41934832/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>既上篇 <a href="https://echocarrie.com/tools/20230327/442102443/">MacM1 安裝 iTerm2</a>  安裝完 iTerm2 後終端機預設語言就變成中文，雖然閱讀速度瞬間升級，但認真害怕哪天就真的完全喪失基本英文閱讀力，記錄一下怎麼再把預設語言由中文改回英文吧！</p>
<h2 id="查看終端機目前語言"><a href="#查看終端機目前語言" class="headerlink" title="查看終端機目前語言"></a>查看終端機目前語言</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$LANG</span></span><br></pre></td></tr></table></figure>

<p>回傳 <code>zh_TW.UTF-8</code></p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2FMacM1%E6%9B%B4%E6%94%B9%E7%B5%82%E7%AB%AF%E6%A9%9F%E9%A0%90%E8%A8%AD%E8%AA%9E%E8%A8%80_01.png?alt=media&token=ff5fe20b-1fd5-49c5-8c3b-575b8dd8805c" alt="截圖"></p>
<h2 id="解決方式"><a href="#解決方式" class="headerlink" title="解決方式"></a>解決方式</h2><ol>
<li><p>終端機執行指令，開啟 <code>.zshrc</code> 檔案</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">open ~/.zshrc</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>.zshrc</code> 檔案內輸入下方內容</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export LC_ALL=en_US.UTF-8  </span><br><span class="line">export LANG=en_US.UTF-8</span><br></pre></td></tr></table></figure>
</li>
<li><p>重啟終端機或輸入下方指令</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="參考文章"><a href="#參考文章" class="headerlink" title="參考文章"></a>參考文章</h2><ul>
<li><a href="https://blog.csdn.net/xs18952904/article/details/97630389">macOS 更改 Terminal 语言</a></li>
<li><a href="https://developer.aliyun.com/article/836740">Mac终端使用oh-my-zsh中文乱码</a></li>
</ul>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>iTerm2</tag>
      </tags>
  </entry>
  <entry>
    <title>Day25 | JS 函式 This 的運作</title>
    <url>/javascript/20230402/2853334793/</url>
    <content><![CDATA[<h2 id="❒-大部分-this-的運作模式"><a href="#❒-大部分-this-的運作模式" class="headerlink" title="❒ 大部分 this 的運作模式"></a>❒ 大部分 this 的運作模式</h2><p>先判斷程式碼是傳統函式或箭頭函式</p>
<ul>
<li><strong>傳統函式中的 <code>this</code> 只與調用方式有關，與怎麼定義 <code>this</code> 無關</strong> 。<ul>
<li>呼叫函式時，前面有任何物件 <code>this</code> 就會指向它，如果 <code>this</code> 前沒有任何物件會指向全域。( 下方會有範例 )</li>
<li><code>setTimeout</code> 為 callback function 是 simple call 的一種形式，在傳統函式寫法下 <code>this</code> 會指向全域，為了避免 <code>setTimeout</code> 的 <code>this</code> 指向全域可使用「 箭頭函式 」或是「 指向其他變數 」。( 最後範例 8 )</li>
</ul>
</li>
<li><strong>箭頭函式沒有自己的 <code>this</code>，會看外層函式的 <code>this</code> 指向。</strong></li>
<li>宣告方式不同 ( <code>var</code>、<code>const</code>、<code>let</code> ) ，<code>this</code> 也會不同，要留意。</li>
</ul>
<h2 id="❒-1-一個函式中包含多少參數"><a href="#❒-1-一個函式中包含多少參數" class="headerlink" title="❒  #1 一個函式中包含多少參數"></a>❒  #1 一個函式中包含多少參數</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&#x27;全域&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">params</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(params, <span class="variable language_">this</span>, <span class="variable language_">window</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">  <span class="keyword">debugger</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<p><img src="https://ithelp.ithome.com.tw/upload/images/20221009/20119743Zd6JDu1ymN.png" alt="執行 debugger ，開發者工具會跳到 Sources 區域"><br>&#x2F;&#x2F; 執行 debugger ，開發者工具會跳到 Sources 區域 ▲</p>
<p><code>console.log(params, this, window, arguments);</code> → 中為運行函數本身就可以執行的參數內容</p>
<ul>
<li><code>params</code> 為外部傳入的參數。<ul>
<li>下方程式碼中預設參數只接收一個所以顯示 1。</li>
</ul>
</li>
<li><code>this</code> 目前是指向 <code>windows</code> ，但實際在運作時可能會有很多種不同的指向，此指向會影響在使用框架時指到哪，如果想要指向特定的元件但卻指向錯誤，就會出錯。</li>
<li><code>window</code> 瀏覽器本身就存在的全域變數。</li>
<li><code>arguments</code> 傳統函式會帶入的參數，為類陣列會帶入所有傳入的參數內容。<ul>
<li>程式中 <code>fn(1, 2, 3);</code>  有三個參數 <code>arguments</code> 會列出所有參數值。</li>
</ul>
</li>
</ul>
<h2 id="❒-2-this-的指向為何"><a href="#❒-2-this-的指向為何" class="headerlink" title="❒  #2 this 的指向為何"></a>❒  #2 this 的指向為何</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line">  <span class="attr">fn</span>: <span class="keyword">function</span>(<span class="params">params</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(params, <span class="variable language_">this</span>, <span class="variable language_">window</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">    <span class="comment">// debugger;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">fn</span>(<span class="number">1</span> , <span class="number">2</span> , <span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<p><code>fn:</code> 的函式程式碼與 #1 範例相同，但卻只有 <code>this</code> 有所不同。</p>
<ul>
<li>1 為外部傳入的參數</li>
<li><code>&#123;name: &quot;小明&quot;, fn: ƒ&#125;</code> 為 <code>this</code>。<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20221009/20119743k9JGgLKF99.png" alt="開發者工具截圖"></li>
</ul>
<h2 id="❒-3-注意：this-的指向相當複雜，大部分情境只需要了解其中一種即可-95"><a href="#❒-3-注意：this-的指向相當複雜，大部分情境只需要了解其中一種即可-95" class="headerlink" title="❒  #3 注意：this 的指向相當複雜，大部分情境只需要了解其中一種即可(95%)"></a>❒  #3 注意：this 的指向相當複雜，大部分情境只需要了解其中一種即可(95%)</h2><blockquote>
<p>傳統函式中的 <code>this</code> 只與調用方式有關，與怎麼定義 <code>this</code> 無關 。</p>
</blockquote>
<p>大部分情境只須了解其中一種，請看下方 #4 this 的各種運用變化 | this 的判斷方式</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用 const 與 let 結果會有所不同，所以變數someone 請使用 var 來設定全域變數。</span></span><br><span class="line"><span class="keyword">var</span> someone = <span class="string">&#x27;全域&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">callSomeone</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">someone</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">callSomeone</span>();  <span class="comment">//這種呼叫方式稱 simple call</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// output 全域。</span></span><br><span class="line"><span class="comment">// 如下方所述呼叫函式 callSomeone(); 時前方沒有任何物件，所以指向全域。</span></span><br></pre></td></tr></table></figure>

<h2 id="❒-4-this-的各種運用變化-this-的判斷方式"><a href="#❒-4-this-的各種運用變化-this-的判斷方式" class="headerlink" title="❒  #4 this 的各種運用變化 | this 的判斷方式"></a>❒  #4 this 的各種運用變化 | this 的判斷方式</h2><p><strong><code>this</code> 的判斷 : ( 此判斷方式以傳統函式為主，箭頭函式的判斷法請看 #5 <code>this</code> 陷阱 )</strong></p>
<ul>
<li>呼叫函式時，前面有任何物件 <code>this</code> 就會指向它  ( 例 : #4 )；</li>
<li>呼叫函式時，如果前方沒任何物件就會指向全域 ( 例 : #3 的 simple call )。</li>
</ul>
<h3 id="範例-1"><a href="#範例-1" class="headerlink" title="範例 1"></a>範例 1</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> someone = <span class="string">&#x27;全域&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">callSomeone</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">someone</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">someone</span>: <span class="string">&#x27;物件&#x27;</span>,</span><br><span class="line">  <span class="title function_">callSomeone</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">someone</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">callSomeone</span>();   </span><br><span class="line"></span><br><span class="line"><span class="comment">// output 物件。入上述判斷callSomeone()前方有物件 obj所以指向&#x27;物件&#x27;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://ithelp.ithome.com.tw/upload/images/20221009/20119743ZCrYyO886K.png" alt="呼叫函式時，前面有任何物件 this 就會指向它"><br>&#x2F;&#x2F; 呼叫函式時，前面有任何物件 this 就會指向它 ▲</p>
<h3 id="範例-2"><a href="#範例-2" class="headerlink" title="範例 2"></a>範例 2</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> someone = <span class="string">&#x27;全域&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">callSomeone</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">someone</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line"> someone : <span class="string">&#x27;物件2&#x27;</span>,</span><br><span class="line"> callSomeone   <span class="comment">//ES6 縮寫 ，原始為 callSomeone : callSomeone()</span></span><br><span class="line">&#125;</span><br><span class="line">obj2.<span class="title function_">callSOmeone</span>();   </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">//output 物件2</span></span><br></pre></td></tr></table></figure>

<ul>
<li>變數 obj2 裡的 <code>callSomeone</code> 指向 <code>function callSomeone()</code>。</li>
<li>呼叫函式時，前面有任何物件 <code>this</code> 就會指向它，所以 <code>this</code> 指向變數 obj2。</li>
</ul>
<h3 id="範例-3"><a href="#範例-3" class="headerlink" title="範例 3"></a>範例 3</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> someone = <span class="string">&#x27;全域&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">callSomeone</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">someone</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> wrapObj = &#123;</span><br><span class="line">  <span class="attr">someone</span>: <span class="string">&#x27;外層物件&#x27;</span>,</span><br><span class="line">  callSomeone,</span><br><span class="line">  <span class="attr">innerObj</span>: &#123;</span><br><span class="line">    <span class="attr">someone</span>: <span class="string">&#x27;內層物件&#x27;</span>,</span><br><span class="line">    callSomeone,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">wrapObj.<span class="title function_">callSomeone</span>();</span><br><span class="line">wrapObj.<span class="property">innerObj</span>.<span class="title function_">callSomeone</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>下方程式碼中，外層與內層的物件 <code>callSomeone</code> 皆使用函式 <code>callSomeone()</code>。</li>
<li>呼叫函式時，前面有任何物件 <code>this</code> 就會指向它。<ul>
<li><code>wrapObj.callSomeone();</code> → 所以 <code>this</code> 指向 <code>wrapObj</code>，輸出 <code>外層物件</code>。</li>
<li><code>wrapObj.innerObj.callSomeone();</code> → 所以 <code>this</code> 指向 <code>innerObj</code>，輸出 <code>內層物件</code>。</li>
</ul>
</li>
</ul>
<h3 id="範例-4"><a href="#範例-4" class="headerlink" title="範例 4"></a>範例 4</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> someone = <span class="string">&#x27;全域&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">callSomeone</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">someone</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj3 = &#123;</span><br><span class="line"> <span class="attr">someone</span>: <span class="string">`物件 3`</span>,</span><br><span class="line"> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">callSomeone</span>();    <span class="comment">//通常不會這樣去取用 this</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj3.<span class="title function_">fn</span>();</span><br></pre></td></tr></table></figure>

<ul>
<li><code>this</code> 與怎麼定義無關，只和調用方式有關，調用這個 <code>fn()</code> 內的 <code>callSomeone()</code> 函式時前方沒有看到任何物件，就屬於 simple call 會指向全域。<ul>
<li><code>obj3.fn();</code> → output 全域</li>
<li>‼️ 注意 : 通常會於物件下的方式調用 this，不會使用 simple call 方式去取得 <code>this</code>，結果可能會不如預期，這邊解說範例用。<br><img src="https://ithelp.ithome.com.tw/upload/images/20221009/20119743945158YBcK.png" alt="https://ithelp.ithome.com.tw/upload/images/20221009/20119743945158YBcK.png"></li>
</ul>
</li>
</ul>
<h3 id="範例-5"><a href="#範例-5" class="headerlink" title="範例 5"></a>範例 5</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> someone = <span class="string">&#x27;全域&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">callSomeone</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">someone</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj4 = &#123;</span><br><span class="line">  <span class="attr">someone</span>: <span class="string">&#x27;物件 4&#x27;</span>,</span><br><span class="line">  <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//callback  function</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">someone</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj4.<span class="title function_">fn</span>();</span><br></pre></td></tr></table></figure>

<ul>
<li>callback  function 大部分屬於 simple call 形式，所以 <code>this</code> 大多會指向全域，少數會重新定義。<br>所以 callback  function 也盡可能不要調用 <code>this</code>。<a href="https://developer.mozilla.org/zh-TW/docs/Glossary/Callback_function">MDN - 回呼函式（callback function）</a><ul>
<li><code>obj4.fn();</code> → output 全域</li>
</ul>
</li>
</ul>
<h3 id="範例-6-請問以下-this-的結果是甚麼"><a href="#範例-6-請問以下-this-的結果是甚麼" class="headerlink" title="範例 6. 請問以下 this 的結果是甚麼 ?"></a>範例 6. 請問以下 this 的結果是甚麼 ?</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">myName</span>: <span class="string">&#x27;hexschool&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getName</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">myName</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">getName</span>();</span><br></pre></td></tr></table></figure>

<ul>
<li><code>getName: function ()</code> 為傳統函式，傳統函式的 this 都會看前方呼叫它的是誰。</li>
<li><code>obj.getName();</code> 結果為 hexschool。</li>
</ul>
<h3 id="範例-7-請問以下-this-的結果是甚麼"><a href="#範例-7-請問以下-this-的結果是甚麼" class="headerlink" title="範例 7. 請問以下 this 的結果是甚麼 ?"></a>範例 7. 請問以下 this 的結果是甚麼 ?</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">myName</span>: <span class="string">&#x27;hexschool&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getName</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">myName</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">getName</span>();</span><br></pre></td></tr></table></figure>

<ul>
<li>箭頭函式沒有自己的 <code>this</code>。它會看外層函式作用域中的 <code>this</code> 指向，如果外層沒有函式則會指向全域。<br>這邊全域沒東西，所以結果如下。</li>
<li><code>obj.getName();</code> 結果為 <code>TypeError: Cannot read property &#39;myName&#39; of undefined</code>。</li>
</ul>
<h3 id="範例-8"><a href="#範例-8" class="headerlink" title="範例 8"></a>範例 8</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myName = <span class="string">&#x27;小明&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">myName</span>: <span class="string">&#x27;小美&#x27;</span>,</span><br><span class="line">    <span class="attr">x</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> myName = <span class="string">&#x27;小王&#x27;</span>;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">myName</span>);</span><br><span class="line">        &#125;, <span class="number">0</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">y</span>: <span class="string">&#x27;2&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">x</span>();</span><br></pre></td></tr></table></figure>

<ul>
<li><code>setTimeout(function ()&#123;&#125;)</code> 為 callback function ( 大部分屬於 simple call 形式 )，會指向全域。<br>但要注意，如果 callback function 這邊改為箭頭函式指向就會改變。</li>
<li><code>obj.getName();</code> 結果為 小明。</li>
</ul>
<h2 id="參考資訊"><a href="#參考資訊" class="headerlink" title="參考資訊"></a>參考資訊</h2><ul>
<li>Vue 3 實戰影音課程 2021</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>2022年iThome鐵人賽</tag>
        <tag>this</tag>
      </tags>
  </entry>
  <entry>
    <title>Day27 | JS DOM</title>
    <url>/javascript/20230402/3606025531/</url>
    <content><![CDATA[<h2 id="❒-DOM-Document-Object-Model"><a href="#❒-DOM-Document-Object-Model" class="headerlink" title="❒ DOM ( Document Object Model )"></a>❒ DOM ( Document Object Model )</h2><p><strong>DOM 結點樹</strong>  <a href="https://zh.wikipedia.org/wiki/%E6%96%87%E6%A1%A3%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B#/media/File:DOM-model">維基百科</a></p>
<ul>
<li><p>方便 js 選取</p>
</li>
<li><p>方便 css 渲染到對應標籤</p>
</li>
<li><p>當解析完一個網頁內容 ( 開啟一個網頁 )，會生成一個 DOM 也就是網站的節點樹 ( dom tree )  如下，Document  為最根目錄的地方，所以要先從根目錄開始選取才能選到裡面的標籤 ( 例如 h1 、a )。<br>簡述 :  網頁一打開，會生成出一個 document。<br><img src="https://ithelp.ithome.com.tw/upload/images/20221012/20119743rDMoKM5GAm.png" alt="DOM 結點樹"></p>
</li>
</ul>
<h3 id="瞭解-document-重要性-以-HTML-解說"><a href="#瞭解-document-重要性-以-HTML-解說" class="headerlink" title="瞭解 document 重要性 ( 以 HTML 解說 )"></a>瞭解 document 重要性 ( 以 HTML 解說 )</h3><ul>
<li>網頁在解析瀏覽器時，會先產生 Document ，Document  內就會依序解析裡面有些甚麼元素。</li>
<li>可從 JS 內改 HTML 內的文字，例如 <code>document.getElementById().textContent</code> ，就是從 Document 依序往內找到 Text 更改裡面的文字。<br><img src="https://ithelp.ithome.com.tw/upload/images/20221012/20119743QpwHYFgaet.png" alt="網頁一打開，會生成出一個 document。"></li>
</ul>
<h3 id="DOM-環境配置"><a href="#DOM-環境配置" class="headerlink" title="DOM 環境配置"></a>DOM 環境配置</h3><p>出處 : JavaScript 工程師養成直播班 - 2021 春季班 影音</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js檔案位置&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>把 <code>&lt;script src=&quot;js檔案位置&quot;&gt;&lt;/script&gt;</code> 放置到 <code>&lt;/body&gt;</code> 結尾前。</li>
<li>為什麼要放 <code>&lt;body&gt;</code> 內而非 <code>&lt;head&gt;</code> → 網頁打開，會從上往下執行，<code>&lt;body&gt;</code> 內的標籤轉化為 DOM 節點後，再依序往下執行 js 檔案才能夠解析到這些 DOM 節點。( 產生之後才能夠讀取 )</li>
</ul>
<h3 id="document-body"><a href="#document-body" class="headerlink" title="document.body"></a>document.body</h3><ul>
<li>Document 介面代表所有在瀏覽器中載入的網頁，也是作為網頁內容 DOM Tree（包含 <body>、<table> 與其它的元素）的進入點。</li>
<li><code>Document.body</code> 主要是「回傳目前文件的 <code>&lt;body&gt;</code> 節點，如元素不存在則回傳 <code>null</code> 」，因此只有 <code>body</code> 能使用。</li>
</ul>
<h3 id="其他常見選取-DOM-節點的方法，建議使用："><a href="#其他常見選取-DOM-節點的方法，建議使用：" class="headerlink" title="其他常見選取 DOM 節點的方法，建議使用："></a><strong>其他常見選取 DOM 節點的方法，建議使用：</strong></h3><ol>
<li><p>根據傳入的值，找到 DOM 中 ID 為 ‘xxx’ 的元素 → <code>document.getElementById(&#39;xxx&#39;);</code>。</p>
</li>
<li><p>針對給定的 Selector ( 選擇器 ) 條件，回傳第一個或所有符合條件的 NodeList ( 節點列表 )。</p>
 <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;xxx&#x27;</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;xxx&#x27;</span>);</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="❒-querySelector-與-getElementById-選擇單一元素"><a href="#❒-querySelector-與-getElementById-選擇單一元素" class="headerlink" title="❒ querySelector 與 getElementById  選擇單一元素"></a>❒ querySelector 與 getElementById  選擇單一元素</h2><h3 id="範例-1-使用變數縮短程式碼，使用-getElementById"><a href="#範例-1-使用變數縮短程式碼，使用-getElementById" class="headerlink" title="範例 1. 使用變數縮短程式碼，使用 getElementById"></a>範例 1. 使用變數<strong>縮短程式碼，使用</strong> getElementById</h3><ul>
<li><code>getElementById</code> 只可用來選取 ID ( 加井字號 <code>#</code> ) 的語法。</li>
<li><a href="https://codepen.io/echocarriet/pen/rNxKJQN">CodePen範例</a></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;textId&quot;</span> <span class="attr">class</span>=<span class="string">&quot;textClass&quot;</span>&gt;</span> text <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 程式碼太長</span></span><br><span class="line"><span class="comment">// document.getElementById(&#x27;textId&#x27;).textContent = &#x27;123&#x27;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用變數縮短程式碼</span></span><br><span class="line"><span class="keyword">const</span> element = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;textId&#x27;</span>);</span><br><span class="line">element.<span class="property">textContent</span> = <span class="string">&#x27;13579&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="範例-2-使用-querySelector"><a href="#範例-2-使用-querySelector" class="headerlink" title="範例 2. 使用 querySelector"></a>範例 2. 使用 querySelector</h3><ul>
<li><code>querySelector()</code>  可以用來選取 ID ( 加井字號 <code>#</code> ) 或 CLASS ( 加點 <code>.</code> ) 的語法。</li>
<li><a href="https://codepen.io/echocarriet/pen/eYJKVqm">CodePen範例</a></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;textId&quot;</span> <span class="attr">class</span>=<span class="string">&quot;textClass&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">em</span>&gt;</span>text<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.textClass em&#x27;</span>)</span><br><span class="line">element.<span class="property">textContent</span> = <span class="string">&#x27;2468&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="getElementById-與-querySelector-差異"><a href="#getElementById-與-querySelector-差異" class="headerlink" title="getElementById() 與 querySelector() 差異 ?"></a><code>getElementById()</code> 與 <code>querySelector()</code> 差異 ?</h3><ul>
<li>兩者相同點 : 選取 HTML 元素。</li>
<li>相異點<ul>
<li><code>getElementById()</code> 選取元素侷限於  ID</li>
<li><code>querySelector()</code> 選取元素包含 HTML 標籤、 ID 元素 、 CLASS 元素 。</li>
</ul>
</li>
</ul>
<h2 id="❒-querySelectorAll-可重覆選取多個元素"><a href="#❒-querySelectorAll-可重覆選取多個元素" class="headerlink" title="❒ querySelectorAll 可重覆選取多個元素"></a>❒ querySelectorAll 可重覆選取多個元素</h2><h3 id="querySelector-與-querySelectorAll-差異"><a href="#querySelector-與-querySelectorAll-差異" class="headerlink" title="querySelector() 與 querySelectorAll() 差異 ?"></a><code>querySelector()</code> 與 <code>querySelectorAll()</code> 差異 ?</h3><blockquote>
<p><code>querySelector()</code> 只會抓第一筆資料做更新<br><code>querySelectorAll()</code> 可選擇多筆資料做更新</p>
</blockquote>
<h3 id="範例-1-querySelector-只會抓第一筆資料做更新"><a href="#範例-1-querySelector-只會抓第一筆資料做更新" class="headerlink" title="範例 1. querySelector() 只會抓第一筆資料做更新"></a>範例 1. <code>querySelector()</code> 只會抓第一筆資料做更新</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;textId&quot;</span> <span class="attr">class</span>=<span class="string">&quot;textClass&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">em</span>&gt;</span>text<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;textId&quot;</span> <span class="attr">class</span>=<span class="string">&quot;textClass&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">em</span>&gt;</span>text<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> element = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.textClass em&#x27;</span>);</span><br><span class="line">element.<span class="property">textContent</span> =<span class="string">&#x27;123&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><strong>解析</strong></p>
<ul>
<li>因為<code>querySelector()</code> 只會抓第一筆資料做更新，所以只有第一筆有改到內容。<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20221012/20119743PfhxchsEGP.png" alt="開發者工具截圖"></li>
</ul>
<h3 id="範例-2-不知陣列數量使用-querySelectorAll-選擇多筆資料做更新"><a href="#範例-2-不知陣列數量使用-querySelectorAll-選擇多筆資料做更新" class="headerlink" title="範例 2. 不知陣列數量使用 querySelectorAll 選擇多筆資料做更新"></a>範例 2. 不知陣列數量使用 <code>querySelectorAll</code> 選擇多筆資料做更新</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;.textClass em&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// element 數量</span></span><br><span class="line"><span class="keyword">const</span> elementTotal = element.<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; elementTotal; i++) &#123;</span><br><span class="line">  <span class="comment">//不要把陣列內的數值寫死，所以寫i，讓他去跑小括號內的條件</span></span><br><span class="line">  element[i].<span class="property">textContent</span> = <span class="string">&quot;text一起做更改&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://codepen.io/echocarriet/pen/GRoGxrX">CodePen 範例</a></p>
<ul>
<li><code>querySelectorAll</code> 可選擇多筆資料做更新，指定的東西會回傳陣列。<ul>
<li>不知陣列數量 : 寫 for loop ( 迴圈 ) 。<ul>
<li>用 <code>length</code> 查數量，再帶入迴圈中</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="範例-3-知到陣列數量使用-querySelectorAll-選擇多筆資料做更新"><a href="#範例-3-知到陣列數量使用-querySelectorAll-選擇多筆資料做更新" class="headerlink" title="範例 3. 知到陣列數量使用 querySelectorAll 選擇多筆資料做更新"></a>範例 3. 知到陣列數量使用 <code>querySelectorAll</code> 選擇多筆資料做更新</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;textClass&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">em</span>&gt;</span>text<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;textClass&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">em</span>&gt;</span>text<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.textClass em&#x27;</span>)</span><br><span class="line">element[<span class="number">0</span>].<span class="property">textContent</span> = <span class="number">123</span>;</span><br><span class="line">element[<span class="number">1</span>].<span class="property">textContent</span> = <span class="number">123</span>;</span><br></pre></td></tr></table></figure>

<p><a href="https://codepen.io/echocarriet/pen/VwedXvr">CodePen 範例</a></p>
<ul>
<li>知道陣列數量 : 依序在 Array 中帶值進去 。<ul>
<li><code>querySelectorAll</code> 指定的東西會回傳陣列。</li>
<li>明確知道 <code>.textClass em</code> 數量，就可以依序帶值進去<br><img src="https://ithelp.ithome.com.tw/upload/images/20221012/20119743D5nlnSYZTS.png" alt="console.log(element); 回傳陣列 ( NodeList 為節點列表 ) ▲"></li>
</ul>
</li>
</ul>
<h2 id="❒-setAttribute-增加、修改標籤屬性"><a href="#❒-setAttribute-增加、修改標籤屬性" class="headerlink" title="❒ setAttribute 增加、修改標籤屬性"></a>❒ setAttribute 增加、修改標籤屬性</h2><p><strong>結構：</strong> <code>setAttribute( &#39;要更改的屬性&#39; , &#39;更改的屬性值&#39; )</code></p>
<h3 id="範例-1-透過-JS-動態新增-HTML-中-lt-a-gt-標籤的連結"><a href="#範例-1-透過-JS-動態新增-HTML-中-lt-a-gt-標籤的連結" class="headerlink" title="範例 1. 透過 JS 動態新增 HTML 中 &lt;a&gt; 標籤的連結"></a>範例 1. <strong>透過 JS 動態新增 HTML 中 <code>&lt;a&gt;</code> 標籤的連結</strong></h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;textClass&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>title<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.textClass a&#x27;</span>);</span><br><span class="line">element.<span class="title function_">setAttribute</span>(<span class="string">&#x27;href&#x27;</span>,<span class="string">&#x27;https://google.com&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p> ****<a href="https://codepen.io/echocarriet/pen/VwedxbN">CodePen範例</a></p>
<h3 id="範例-2-透過-JS-動態增加屬性調整文字顏色，把文字由黑變紅"><a href="#範例-2-透過-JS-動態增加屬性調整文字顏色，把文字由黑變紅" class="headerlink" title="範例 2.  透過 JS 動態增加屬性調整文字顏色，把文字由黑變紅"></a>範例 2.  透過 JS 動態增加屬性調整文字顏色，把文字由黑變紅</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;textHere&quot;</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;textHere&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//動態改變 textHere 屬性</span></span><br><span class="line">element.<span class="title function_">setAttribute</span>(<span class="string">&#x27;ID&#x27;</span>,<span class="string">&#x27;textRed&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><a href="https://codepen.io/echocarriet/pen/wvMXjPW">CodePen 範例</a></p>
<ul>
<li>新增一個紅色文字 id 於 css 中，並使用 <code>setAttribute</code> 把此屬性新增於 <code>element</code> 上，Hello 文字由黑變紅。</li>
<li>可由開發者工具看到 HTML 內由 JS 動態新增了 <code>id=&quot;strID&quot;</code><br>  <img src="https://ithelp.ithome.com.tw/upload/images/20221012/20119743pWwI35oRkw.png" alt="開發者工具截圖"></li>
</ul>
<h2 id="❒-從HTML-取出值的辦法-撈出屬性、結構、文字"><a href="#❒-從HTML-取出值的辦法-撈出屬性、結構、文字" class="headerlink" title="❒ 從HTML 取出值的辦法 ( 撈出屬性、結構、文字 )"></a>❒ 從HTML 取出值的辦法 ( 撈出屬性、結構、文字 )</h2><blockquote>
<p><code>getAttribute</code> → 取出 HTML 中的屬性<br><code>innerHTML</code> → 取出 HTML 中的結構<br><code>textContent</code> → 取出 HTML 中的文字</p>
</blockquote>
<h3 id="範例-1-撈出-HTML-中-h2-標籤內的-a-連結網址"><a href="#範例-1-撈出-HTML-中-h2-標籤內的-a-連結網址" class="headerlink" title="範例 1. 撈出 HTML 中 h2 標籤內的 a 連結網址"></a>範例 1. 撈出 HTML 中 h2 標籤內的 a 連結網址</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;textTitle&quot;</span>&gt;</span>TITLE<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;textLink&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://google.com&quot;</span>&gt;</span>LINK<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;textTex&quot;</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法 1.</span></span><br><span class="line"><span class="keyword">const</span> element = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.textLink a&#x27;</span>).<span class="title function_">getAttribute</span>(<span class="string">&#x27;href&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(element);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法 2</span></span><br><span class="line"><span class="keyword">const</span> element = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.textLink a&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(element.<span class="title function_">getAttribute</span>(<span class="string">&#x27;href&#x27;</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>使用 <code>getAttribute(&#39;屬性&#39;)</code> 方式可以撈出 a 標籤內的連結。</li>
</ul>
<h3 id="範例-2-取出-textLink-的-HTML-結構"><a href="#範例-2-取出-textLink-的-HTML-結構" class="headerlink" title="範例 2. 取出 .textLink 的 HTML 結構"></a>範例 2. <strong>取出 <code>.textLink</code> 的 HTML 結構</strong></h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;textLink&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://google.com&quot;</span>&gt;</span>LINK<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方式一</span></span><br><span class="line"><span class="keyword">const</span> element = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.textLink&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(element.<span class="property">innerHTML</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//會撈出 h2 內的所有結構</span></span><br><span class="line"><span class="comment">//&lt;a href=&quot;https://google.com&quot;&gt;LINK&lt;/a&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式二 :先賦予在變數上</span></span><br><span class="line"><span class="keyword">const</span> element = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.textLink&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> content = element.<span class="property">innerHTML</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(content);</span><br></pre></td></tr></table></figure>

<ul>
<li>使用 <code>innerHTML</code> 取出 <code>h2</code> 標籤內的 <code>a</code> 結構。</li>
</ul>
<h3 id="範例-3-撈出-HTML-中-h1-標籤中的文字"><a href="#範例-3-撈出-HTML-中-h1-標籤中的文字" class="headerlink" title="範例 3. 撈出 HTML 中 h1 標籤中的文字"></a>範例 3. 撈出 HTML 中 h1 標籤中的文字</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;textTitle&quot;</span>&gt;</span>TITLE<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;textLink&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://google.com&quot;</span>&gt;</span>LINK<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;textTex&quot;</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.textTitle&#x27;</span>).<span class="property">textContent</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(element);</span><br></pre></td></tr></table></figure>

<ul>
<li><code>textContent</code> : 只會抓節點內的 『 文字 』 資訊。</li>
</ul>
<h2 id="❒-表單取值與更改值方式-value"><a href="#❒-表單取值與更改值方式-value" class="headerlink" title="❒ 表單取值與更改值方式 value"></a>❒ 表單取值與更改值方式 value</h2><p>出處 : avaScript 工程師養成直播班 - 2021 春季班 影音</p>
<h3 id="範例-1-取出-input-表單中-“-你好嗎-“-的文字"><a href="#範例-1-取出-input-表單中-“-你好嗎-“-的文字" class="headerlink" title="範例 1. 取出 input 表單中 “ 你好嗎 ? “ 的文字"></a>範例 1. 取出 input 表單中 “ 你好嗎 ? “ 的文字</h3><p><img src="https://ithelp.ithome.com.tw/upload/images/20221012/20119743GzD1IqXBjn.png" alt="表單示意圖"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;txt&quot;</span> <span class="attr">value</span>=<span class="string">&quot;你好嗎?&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> txt =<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.txt&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//文字寫在 value 上，直接用 txt 選取 value</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(txt.<span class="property">value</span>);  <span class="comment">// 你好嗎</span></span><br></pre></td></tr></table></figure>

<h3 id="範例-2-更改-input-表單中-“-你好嗎-“-的文字"><a href="#範例-2-更改-input-表單中-“-你好嗎-“-的文字" class="headerlink" title="範例 2. 更改 input 表單中 “ 你好嗎 ? “ 的文字"></a>範例 2. 更改 input 表單中 “ 你好嗎 ? “ 的文字</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;txt&quot;</span> <span class="attr">value</span>=<span class="string">&quot;你好嗎?&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 修改 list.value 的作用也不是給 select 賦予 value 值，而是更改它所指向的 option</span></span><br><span class="line"><span class="keyword">const</span> txt = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.txt&#x27;</span>);</span><br><span class="line">txt.<span class="property">value</span> = <span class="string">&quot;Hello !&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(txt.<span class="property">value</span>);  <span class="comment">// Hello</span></span><br></pre></td></tr></table></figure>

<h3 id="範例-3-取出-input-下拉選單表單中的文字"><a href="#範例-3-取出-input-下拉選單表單中的文字" class="headerlink" title="範例 3. 取出 input 下拉選單表單中的文字"></a>範例 3. 取出 input 下拉選單表單中的文字</h3><p><img src="https://ithelp.ithome.com.tw/upload/images/20221012/20119743F7beqeDMd3.png" alt="下拉選單示意圖"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;高雄市&quot;</span>&gt;</span>高雄市<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;台北市&quot;</span>&gt;</span>台北市<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> list =<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.list&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(list.<span class="property">value</span>);</span><br></pre></td></tr></table></figure>

<h3 id="範例-4-設定-input-下拉選單顯示的-option-文字"><a href="#範例-4-設定-input-下拉選單顯示的-option-文字" class="headerlink" title="範例 4. 設定 input 下拉選單顯示的 option 文字"></a>範例 4. 設定 input 下拉選單顯示的 option 文字</h3><p>下拉式選單的文字釘在台北市上。<br><img src="https://ithelp.ithome.com.tw/upload/images/20221012/20119743tfxcnzzvkq.png" alt="下拉選單示意圖"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;高雄市&quot;</span>&gt;</span>高雄市<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;台北市&quot;</span>&gt;</span>台北市<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 修改 list.value 的作用也不是給 select 賦予 value 值，而是更改它所指向的 option，因此 console.log(list.value); 一次只會出現一個值。</span></span><br><span class="line"><span class="keyword">const</span> list =<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.list&#x27;</span>);</span><br><span class="line">list.<span class="property">value</span> = <span class="string">&quot;台北市&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(list.<span class="property">value</span>);</span><br></pre></td></tr></table></figure>

<p><strong>為什麼 <code>console.log(list.value);</code> 只讀取到高雄市 ?</strong></p>
<ul>
<li><p><code>list</code> DOM 是選取到 <code>select</code> 這個標籤，<code>select</code> 本身是沒有 <code>value</code> 值的，它實際上只是回傳它所選取到的那個 <code>option</code> 的 <code>value</code>，並不是直接指向 <code>option</code>。<br>修改 <code>list.value</code> 的作用也不是給 <code>select</code> 賦予 <code>value</code> 值，而是更改它所指向的 <code>option</code>，因此 <code>console.log(list.value);</code> 一次只會出現一個值。</p>
  <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 可看出 select 本身沒有 value 屬性，但可以回傳它所選取到的那個 option 的 value</span></span><br><span class="line"><span class="keyword">const</span> list =<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.list&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(list.<span class="title function_">getAttribute</span>(<span class="string">&#x27;value&#x27;</span>)); <span class="comment">//回傳 null</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="❒-插入-HTML-標籤的兩種方法"><a href="#❒-插入-HTML-標籤的兩種方法" class="headerlink" title="❒ 插入 HTML 標籤的兩種方法"></a>❒ 插入 HTML 標籤的兩種方法</h2><h3 id="用-JavaScript-操控-HTML-的方法"><a href="#用-JavaScript-操控-HTML-的方法" class="headerlink" title="用 JavaScript 操控 HTML 的方法"></a>用 JavaScript 操控 HTML 的方法</h3><ol>
<li><code>innerHTML</code><ol>
<li>方法 : 組完字串後，傳進語法進行渲染。</li>
<li>優點 : 效能快。</li>
<li>缺點 : 資安風險，要確保來源沒問題 。</li>
<li>特性 : 會在指定的區域把原來的內容清空，放入新的值。</li>
</ol>
</li>
<li><code>createElement(&#39;&#39;)</code><ol>
<li>方法 : 以 DOM 節點來處理。</li>
<li>優點 : 安全性高。</li>
<li>缺點 : 效能差 。</li>
<li>特性 : 會保留原本內容，新增的值會依序動態加在原內容後方。</li>
</ol>
</li>
</ol>
<h3 id="➊-innerHTML"><a href="#➊-innerHTML" class="headerlink" title="➊ innerHTML"></a>➊ innerHTML</h3><blockquote>
<p><code>innerHTML</code> 有個特性，會在指定的區域把原來的內容清空，放入新的值。</p>
</blockquote>
<p><strong>範例 0. 在 main 標籤中使用 innerHTML</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span>TITLE<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> main = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.main&#x27;</span>);</span><br><span class="line">main.<span class="property">innerHTML</span> = <span class="string">&#x27;&lt;h1&gt;TITLE&lt;/h1&gt;&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><a href="https://codepen.io/echocarriet/pen/jOWKKqx">CodePen範例</a></p>
<ul>
<li>原本的 <code>TITLE</code> 被清空，以 <code>&lt;h1&gt;TITLE&lt;/h1&gt;</code> 取代。<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20221012/20119743UXJ4MHyvwg.png" alt="截圖"></li>
</ul>
<p><strong>範例 1. 在 <code>&lt;div id=&quot;main&quot;&gt;&lt;/div&gt;</code> 內塞 H1 標籤</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方法1</span></span><br><span class="line"><span class="comment">//&#x27;&lt;h1&gt;TITLE&lt;/h1&gt;&#x27; 也可以寫入class</span></span><br><span class="line"><span class="keyword">const</span> element = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;main&#x27;</span>);</span><br><span class="line">element.<span class="property">innerHTML</span> = <span class="string">&#x27;&lt;h1&gt;TITLE&lt;/h1&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方法2</span></span><br><span class="line"><span class="keyword">const</span> element = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;main&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> titleElement = <span class="string">&#x27;&lt;h1&gt;TITLE&lt;/h1&gt;&#x27;</span>;</span><br><span class="line">element.<span class="property">innerHTML</span> = titleElement ;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 試試 element.innerHTML = titleElement + titleElement; 會跑兩次唷!</span></span><br></pre></td></tr></table></figure>

<p><img src="https://ithelp.ithome.com.tw/upload/images/20221012/201197431PWuU3v4AN.png" alt="開發者工具截圖"><br>&#x2F;&#x2F; 從開發者工具可見，#main 內新增了 h1 標籤 ▲</p>
<p>➤ <strong>ES6 之前的寫法</strong></p>
<p><code>&quot;&lt;h1 class=&quot;blue&quot;&gt;123&lt;/h1&gt;&quot;</code>  - - - 錯誤</p>
<p><code>&#39;&lt;h1 class=&quot;blue&quot;&gt;123&lt;/h1&gt;&#39;</code>  - - - 正確</p>
<p>外與內的單引號和雙引號需不同，否則解釋器會因無法分辨開頭結尾而報錯誤。</p>
<p>➤ <strong>ES6 樣板字面值寫法 ( 使用反引號 &#96;&#96;&#96;&#96; tab 上方的按鍵 )</strong></p>
<p><code>&lt;h1 class=&quot;blue&quot;&gt;123&lt;/h1&gt;</code><br>字串使用反引號 &#96;&#96;&#96;&#96; 就是 ES6 的樣板字面值寫法，樣板字面值寫法的好處是可以用 <code>$&#123; &#125;</code> 直接帶入變數，不需使用 <code>+</code> 將每個字串及變數相加。</p>
<h3 id="ES6-樣板字面值運用"><a href="#ES6-樣板字面值運用" class="headerlink" title="ES6 樣板字面值運用"></a><strong>ES6 樣板字面值運用</strong></h3><p>內容太龐大，可以使用變數以組字串方式帶入 innerHTML，這邊使用 <code>ul</code> <code>li</code> 為範例。</p>
<p><strong>範例 1. 把 li 內容帶入 ul 中   <a href="https://codepen.io/echocarriet/pen/KKVeevG">Codepen範例</a> ( ES6 之前寫法 )</strong></p>
<p><strong>HTML :</strong>  <code>&lt;ul class=&quot;list&quot;&gt;&lt;/ul&gt;</code></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.list&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;卡斯柏&#x27;</span></span><br><span class="line"><span class="keyword">let</span> webSite = <span class="string">&#x27;https://www.google.com&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意內外雙單引號用法&amp; 變數帶入時前後以引號和加號包覆</span></span><br><span class="line"><span class="comment">//先在li外面用引號包起，再把裡面要帶入變數的用不同的引號包起，記得前後要有加號。</span></span><br><span class="line">element.<span class="property">innerHTML</span> = <span class="string">&#x27;&lt;li&gt;&lt;a href = &quot;&#x27;</span>+webSite+<span class="string">&#x27;&quot;&gt;&#x27;</span>+name+<span class="string">&#x27;&lt;/a&gt;&lt;/li&gt;&#x27;</span> ;</span><br></pre></td></tr></table></figure>

<p><img src="https://ithelp.ithome.com.tw/upload/images/20221012/20119743jKNALdZ1lh.jpg" alt="截圖"></p>
<p><strong>範例 1-1. 把 li 內容帶入 ul 中 ( ES6 樣板字面值寫法 )</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.list&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;卡斯柏&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> webSite = <span class="string">&#x27;https://www.google.com&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用樣板字面值寫法 - 不須擔心雙引號與單引號錯誤使用</span></span><br><span class="line">element.<span class="property">innerHTML</span> =<span class="string">`&lt;li&gt;&lt;a href=&#x27;<span class="subst">$&#123;webSite&#125;</span>&#x27;&gt;<span class="subst">$&#123;name&#125;</span>&lt;/a&gt;&lt;/li&gt;`</span>;</span><br></pre></td></tr></table></figure>

<p><strong>另外也可賦予字串變數，日後如果要新增很多個 li ，可以於 innerHTML 使用組字串的方式，如下 :</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.list&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;卡斯柏&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> webSite = <span class="string">&#x27;https://www.google.com&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> content = <span class="string">`&lt;li&gt;&lt;a href=&#x27;<span class="subst">$&#123;webSite&#125;</span>&#x27;&gt;<span class="subst">$&#123;name&#125;</span>&lt;/a&gt;&lt;/li&gt;`</span>;</span><br><span class="line"></span><br><span class="line">element.<span class="property">innerHTML</span> = content + content;</span><br></pre></td></tr></table></figure>

<h3 id="➋-innerHTML-搭配-for-loop-運用"><a href="#➋-innerHTML-搭配-for-loop-運用" class="headerlink" title="➋ innerHTML 搭配 for loop 運用"></a>➋ innerHTML 搭配 for loop 運用</h3><p>從 Array 中撈出資料，顯示在網頁上。</p>
<p><strong>範例 1. 列出每個農場農夫的名字。  <a href="https://codepen.io/echocarriet/pen/gOPKjzq">CODEPEN</a></strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">//農場陣列資訊</span></span><br><span class="line"><span class="keyword">const</span> farms = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">farmer</span>: <span class="string">&#x27;卡斯伯&#x27;</span>,</span><br><span class="line">    <span class="attr">dogs</span>: [<span class="string">&#x27;詹姆士&#x27;</span>, <span class="string">&#x27;龐德&#x27;</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">farmer</span>: <span class="string">&#x27;查理&#x27;</span>,</span><br><span class="line">    <span class="attr">dogs</span>: [<span class="string">&#x27;皮皮&#x27;</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<p><strong>防止資料被蓋掉</strong></p>
<p><code>innerHTML</code> 特性 : 新帶入的值會把舊的值蓋過，所以查理會蓋過卡斯伯。迴圈內每把變數 <code>farmersTotal</code> 帶入跑一次迴圈，組好字串帶入又會把先前資料蓋過。</p>
<ul>
<li>先寫一個  <code>let farmersName = &#39;&#39;;</code> 空值的全域變數，來做累加字串。</li>
<li><code>let farmersName = &#39;&#39;;</code> 本來是空字串，在迴圈內 <code>farmersName += farmersAllName;</code> 依序加入變數 farmersAllTotal 的內容 ( <code>&lt;li&gt;$&#123;farms[i].farmer&#125;&lt;/li&gt;;</code> )，就會有第一筆、第二筆依序跑出陣列中所有資料。</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 錯誤寫法</span></span><br><span class="line"><span class="keyword">const</span> element = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.list&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> farmsLength=farms.<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">let</span> i=<span class="number">0</span>; i&lt;farmsLength; i++)&#123;</span><br><span class="line">    <span class="keyword">let</span> farmersAllName = <span class="string">`&lt;li&gt;<span class="subst">$&#123;farms[i].farmer&#125;</span>&lt;/li&gt;`</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// innerHTML 有新值會把舊值蓋掉的特性，所以每跑迴圈一次就會蓋掉之前的資料。網頁都只會顯示查理</span></span><br><span class="line">    element.<span class="property">innerHTML</span> = farmersAllName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 正確：for 迴圈寫法</span></span><br><span class="line"><span class="keyword">const</span> element = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.list&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> farmsLength=farms.<span class="property">length</span>;</span><br><span class="line"><span class="keyword">let</span> farmersName=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;farmsLength; i++)&#123;</span><br><span class="line">  <span class="keyword">let</span> farmersAllName = <span class="string">`&lt;li&gt;<span class="subst">$&#123;farms[i].farmer&#125;</span>&lt;/li&gt;`</span>;</span><br><span class="line">  farmersName+=farmersAllName;</span><br><span class="line">&#125;</span><br><span class="line">element.<span class="property">innerHTML</span>=farmersName;</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// forEach 寫法</span></span><br><span class="line"><span class="keyword">const</span> element = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.list&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> farmersName = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">farms.<span class="title function_">forEach</span>(<span class="function">(<span class="params">i</span>) =&gt;</span> &#123;</span><br><span class="line">  farmersName += <span class="string">`&lt;li&gt;<span class="subst">$&#123;i.farmer&#125;</span>&lt;/li&gt;`</span>;</span><br><span class="line">&#125;)</span><br><span class="line">list.<span class="property">innerHTML</span> = farmersName;</span><br></pre></td></tr></table></figure>

<h2 id="❒-createElement-搭配-appendChild-寫法"><a href="#❒-createElement-搭配-appendChild-寫法" class="headerlink" title="❒ createElement 搭配 appendChild 寫法"></a>❒ createElement 搭配 appendChild 寫法</h2><blockquote>
<p><code>createElement(&#39;&#39;)</code> 會保留原本內容，新增的值會依序動態加在原內容後方。 <a href="https://codepen.io/echocarriet/pen/PoZaMYr">CODEPEN</a><br><code>appendChild()</code> 在節點增加最後一個子節點。</p>
</blockquote>
<ul>
<li>下方範例可見，網頁中的 TITLE 並沒有被清空，新增的值 123 依序的排在 TITLE 後方。</li>
</ul>
<p><strong>拆解步驟</strong></p>
<ol>
<li>HTML 內新增一個節點。  <code>const str = document.createElement(&#39;em&#39;);</code></li>
<li>新增節點內容 ( 動態新增文字內容 ) 。  <code>str.textContent = &#39;123&#39;;</code></li>
<li>因為前方未設定節點位置，所以這邊把節點掛在 H1 ( <code>.title</code> ) 內。 <code>document.querySelector(&#39;.title&#39;).appendChild(str);</code></li>
</ol>
<p>使用 <code>appendChild()</code> 會動態掛在 HTML 裡面元素 <code>&lt;em&gt;TITLE&lt;/em&gt;</code> 的最後面位置。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">em</span>&gt;</span>TITLE<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//新增一個節點 (新增 p 元素)</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;p&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//動態增加內容 → 變數str 放置123文字內容。</span></span><br><span class="line">str.<span class="property">textContent</span> = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//新增子節點 → 在 .title 的位置掛上子節點，子節點內放入上方新增的 p段落與文字內容 123。</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.title&#x27;</span>).<span class="title function_">appendChild</span>(str);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>範例 1. 在 HTML 內動態新增文字 567 ，並設定紅色。 <a href="https://codepen.io/echocarriet/pen/Yzwvmyd">codepen</a></strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.textRed</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">em</span>&gt;</span>TITLE<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">//-------方法一</span></span><br><span class="line"><span class="comment">//取出容器</span></span><br><span class="line"><span class="keyword">var</span> space = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.title&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//新增p元素</span></span><br><span class="line"><span class="keyword">var</span> element = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;p&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//新增文字</span></span><br><span class="line">element.<span class="property">textContent</span> = <span class="string">&#x27;567&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//新增屬性</span></span><br><span class="line">element.<span class="title function_">setAttribute</span>(<span class="string">&#x27;class&#x27;</span>,<span class="string">&#x27;textRed&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//把 element(元素、文字、屬性都在裡面) 丟到容器內</span></span><br><span class="line">space.<span class="title function_">appendChild</span>(element);</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">//-------方法二</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//新增節點標籤</span></span><br><span class="line"><span class="keyword">let</span> element = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;p&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//新增節點內容 &amp; 新增 class</span></span><br><span class="line">element.<span class="property">textContent</span> = <span class="string">&#x27;567&#x27;</span>;</span><br><span class="line">element.<span class="title function_">setAttribute</span>(<span class="string">&#x27;class&#x27;</span>,<span class="string">&#x27;textRed&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//設定節點位置 (在.title後方掛上子節點，加入上方新增的標籤與內容 )</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.title&#x27;</span>).<span class="title function_">appendChild</span>(element);</span><br></pre></td></tr></table></figure>

<h2 id="❒-createElement-與-for-loop-運用"><a href="#❒-createElement-與-for-loop-運用" class="headerlink" title="❒ createElement 與 for loop 運用"></a>❒ createElement 與 for loop 運用</h2><h3 id="三步驟"><a href="#三步驟" class="headerlink" title="三步驟"></a><strong>三步驟</strong></h3><ol>
<li>新增節點標籤</li>
<li>新增節點內容</li>
<li>設定節點位置</li>
</ol>
<p><strong>範例1. 列出每個農場農夫的名字。</strong>  </p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">//農場陣列資訊</span></span><br><span class="line"><span class="keyword">var</span> farms =[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">farmer</span>:<span class="string">&#x27;卡斯伯&#x27;</span>,</span><br><span class="line">        <span class="attr">dogs</span>:[<span class="string">&#x27;詹姆士&#x27;</span>,<span class="string">&#x27;龐德&#x27;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">farmer</span>:<span class="string">&#x27;查理&#x27;</span>,</span><br><span class="line">        <span class="attr">dogs</span>:[<span class="string">&#x27;皮皮&#x27;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<p><a href="https://codepen.io/echocarriet/pen/Yzwvmeo">CodePen 範例</a></p>
<h2 id="❒-XSS-跨網站指令碼注意事項（Cross-site-scripting）"><a href="#❒-XSS-跨網站指令碼注意事項（Cross-site-scripting）" class="headerlink" title="❒ XSS 跨網站指令碼注意事項（Cross-site scripting）"></a>❒ XSS 跨網站指令碼注意事項（Cross-site scripting）</h2><p><strong>XSS ( Cross-site scripting ) 跨網站指令攻擊</strong> : <code>innerHTML</code> 只是其中一個可以使用 XSS 的方法。刻意在 HTML 標籤或 JavaScript 埋一些惡意程式碼，做攻擊的動作。</p>
<p>不是讓使用者自己做操控 →</p>
<p>例如 : 留言板等表單輸入的東西，A 用戶留完 B 用戶看的到，但 A 用戶在裡面塞 <code>&lt;script src=&#39;病毒.js&#39;&gt;&lt;/script&gt;</code> ，雖然網頁表面看不到，但在開發者工具查看會發現已被植入病毒。</p>
<p>通常這些讓用戶自行輸入的留言板，會做一些排錯，過濾掉可疑的語法，都確認沒有錯了才會送入資料庫。<br><img src="https://ithelp.ithome.com.tw/upload/images/20221012/20119743RcqQzETpAW.png" alt="截圖"></p>
<p>可信任 → 政府提供的 open data 或自己建立的資料庫，例如 : 鄉鎮陣列資料庫 .. 等</p>
<h2 id="資料來源"><a href="#資料來源" class="headerlink" title="資料來源"></a>資料來源</h2><ul>
<li>JavaScript 入門篇 - 學徒的試煉</li>
<li>W3school - <a href="https://www.w3schools.com/js/js_htmldom.asp">JavaScript HTML DOM</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>2022年iThome鐵人賽</tag>
        <tag>DOM</tag>
      </tags>
  </entry>
  <entry>
    <title>Day28 | JS Event 事件</title>
    <url>/javascript/20230402/3727796361/</url>
    <content><![CDATA[<h2 id="❒-本篇會介紹到的部分"><a href="#❒-本篇會介紹到的部分" class="headerlink" title="❒ 本篇會介紹到的部分"></a>❒ 本篇會介紹到的部分</h2><p>addEventListener 監聽、Event Bubbling 事件冒泡、Event Capturing 事件捕捉、stopPropagation 終止冒泡事件、preventDefault 取消預設、e.target 搭配 nodeName 與 keyCode 、表單中 blur, focus, click 事件、keydown 事件、mousemove, mouseleave 事件、網頁座標 ( screen、page、client )。</p>
<h2 id="❒-各種事件綁定的差異"><a href="#❒-各種事件綁定的差異" class="headerlink" title="❒ 各種事件綁定的差異"></a>❒ 各種事件綁定的差異</h2><h3 id="➊-不推薦在-HTML-中執行-JS，此為很老式的寫法"><a href="#➊-不推薦在-HTML-中執行-JS，此為很老式的寫法" class="headerlink" title="➊ 不推薦在 HTML 中執行 JS，此為很老式的寫法"></a>➊ 不推薦在 HTML 中執行 JS，此為很老式的寫法</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;Hello&#x27;)&quot;</span> <span class="attr">value</span>=<span class="string">&quot;點擊&quot;</span> <span class="attr">class</span>=<span class="string">&#x27;btn&#x27;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在 HTML 中執行 JS ( 以 <code>onclick</code> 為例 )，不推薦的原因 :</p>
<ul>
<li>在 JS 中可以設定在某些條件下才做<code>綁定</code>執行 <code>onclick</code> ，不像 HTML 中 <code>onclick</code> 會一直執行。</li>
<li>可能在 <code>onclick</code> 中被插入惡意程式碼。</li>
</ul>
<h3 id="➋-監聽的推薦寫法"><a href="#➋-監聽的推薦寫法" class="headerlink" title="➋ 監聽的推薦寫法"></a>➋ 監聽的推薦寫法</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span> , <span class="keyword">function</span>(<span class="params"></span>)&#123; &#125;,<span class="literal">false</span>)  </span><br></pre></td></tr></table></figure>

<h2 id="❒-addEventListener-事件監聽"><a href="#❒-addEventListener-事件監聽" class="headerlink" title="❒ addEventListener - 事件監聽"></a>❒ addEventListener - 事件監聽</h2><h3 id="結構"><a href="#結構" class="headerlink" title="結構"></a>結構</h3><p><code>addEventListener( &#39;參數1&#39; ,參數2 ,參數3 );</code></p>
<ol>
<li><code>參數1</code> : 選擇事件，例如 <code>&quot;click&quot;</code> 亦可換為其他事件。滑鼠的各種事件可參閱 <a href="https://www.w3schools.com/jsref/dom_obj_event.asp">w3school - HTML DOM Events</a> 。</li>
<li><code>參數2</code> : <code>function(e)&#123;&#125;</code> ，函式內可加入 <code>e</code> ，會回傳 <code>event</code> 事件。</li>
<li><code>參數3</code> : <code>false</code>。<ol>
<li><code>true</code> : 從外層往內層找指定元素。</li>
<li><code>false</code>( 預設 ) : 指定元素往外層找，預設為 <code>false</code> ，所以如果沒寫就會是預設狀態。</li>
</ol>
</li>
</ol>
<p><a href="https://codepen.io/echocarriet/pen/zYjyawV">CodePen 範例</a></p>
<h3 id="範例-1-寫一個加法器，點選按鈕下方數字會做加總"><a href="#範例-1-寫一個加法器，點選按鈕下方數字會做加總" class="headerlink" title="範例 1. 寫一個加法器，點選按鈕下方數字會做加總"></a>範例 1. 寫一個加法器，點選按鈕下方數字會做加總</h3><p>出處 :  JavaScript 工程師養成直播班 - 2021 春季班影音</p>
<p><a href="https://codepen.io/echocarriet/pen/poNqdxj">CodePen 範例</a></p>
<p><strong>為什麼 <code>let count = 0;</code> 不能放在 <code>function(e)&#123;&#125;</code> 內 ?</strong></p>
<p>函式內的大括號 <code>&#123;&#125;</code> 執行完會釋放記憶體，如果不希望值因函式運算完而消失，就需要放在外層，函式內運算完就會往外送依序做加總。</p>
<h2 id="❒-如何觀看-DOM-有註冊事件監聽"><a href="#❒-如何觀看-DOM-有註冊事件監聽" class="headerlink" title="❒ 如何觀看 DOM 有註冊事件監聽"></a>❒ 如何觀看 DOM 有註冊事件監聽</h2><p>出處 :  JavaScript 工程師養成直播班 - 2021 春季班影音</p>
<h3 id="可搭配-chorme-開發者工具查看按鈕是否有註冊監聽事件"><a href="#可搭配-chorme-開發者工具查看按鈕是否有註冊監聽事件" class="headerlink" title="可搭配 chorme 開發者工具查看按鈕是否有註冊監聽事件"></a>可搭配 chorme 開發者工具查看按鈕是否有註冊監聽事件</h3><p><img src="https://ithelp.ithome.com.tw/upload/images/20221013/20119743dtlWQtuE8w.png" alt="開發者工具截圖"></p>
<ol>
<li>於監聽的按鈕點選滑鼠右鍵 &#x2F; 檢查</li>
<li>開發者工具 Elements &#x2F; Event Listeners 可看到目前的監聽事件們。</li>
</ol>
<h2 id="❒-event-物件-告訴你當下元素資訊"><a href="#❒-event-物件-告訴你當下元素資訊" class="headerlink" title="❒ event 物件 - 告訴你當下元素資訊"></a>❒ event 物件 - 告訴你當下元素資訊</h2><p>DOM events 事件，例如滑鼠的各種事件可參閱 <a href="https://www.w3schools.com/jsref/dom_obj_event.asp">w3school - HTML DOM Events</a> ，但現在不推薦在 HTML 使用 JS，因爲較老式用法有許多缺點下方會說到。</p>
<h3 id="範例-1-以按鈕為例，點擊按鈕跳出彈跳視窗-hello"><a href="#範例-1-以按鈕為例，點擊按鈕跳出彈跳視窗-hello" class="headerlink" title="範例 1. 以按鈕為例，點擊按鈕跳出彈跳視窗 hello"></a>範例 1. 以按鈕為例，點擊按鈕跳出彈跳視窗 hello</h3><p><a href="https://codepen.io/echocarriet/pen/xxjmzgK">CodePen 範例</a></p>
<h3 id="範例-2-點擊按鈕知道滑鼠的位置或出現此按鈕的詳細資訊-type-需透過甚麼方式呢"><a href="#範例-2-點擊按鈕知道滑鼠的位置或出現此按鈕的詳細資訊-type-需透過甚麼方式呢" class="headerlink" title="範例 2. 點擊按鈕知道滑鼠的位置或出現此按鈕的詳細資訊 ( type  ) 需透過甚麼方式呢 ?"></a>範例 2. 點擊按鈕知道滑鼠的位置或出現此按鈕的詳細資訊 ( type  ) 需透過甚麼方式呢 ?</h3><p><a href="https://codepen.io/echocarriet/pen/zYjyawV">CodePen 範例</a></p>
<ul>
<li>點擊按鈕知道滑鼠位置，應用在點擊某個 XY 軸位置，會出現資訊視窗。</li>
<li>MouseEvent 為滑鼠事件，會把當下點擊的那一瞬間的所有資訊都記錄在物件裡，可運用裡面的物件去做對應的事情，例如下方要讀取點擊按鈕的 X 軸座標位置 <code>clientX</code>，可從函式參數 <code>e</code> 去讀取裡面的屬性 <code>clientX</code> 。</li>
<li>執行監聽時，會在你命名的函式中帶入一個參數 <code>e</code> ( 參數名可自訂 )，所以點擊按鈕後會把所有物件 ( MouseEvent 為物件 object ) 資訊紀錄到這個參數內。<ul>
<li>開啟開發者工具 Console 可見 MouseEvent ( MouseEvent 為物件 object ) 顯示按鈕的詳細資訊。<br><img src="https://ithelp.ithome.com.tw/upload/images/20221013/20119743agRsJZiia2.png" alt="截圖"></li>
<li><a href="https://www.w3schools.com/jsref/obj_mouseevent.asp">W3school - HTML DOM MouseEvent</a> 相關方法</li>
</ul>
</li>
</ul>
<h2 id="❒-綁定事件的語法差異"><a href="#❒-綁定事件的語法差異" class="headerlink" title="❒ 綁定事件的語法差異"></a>❒ 綁定事件的語法差異</h2><h3 id="onclick-與-addEventListener-quot-click-quot-function-e-false-差異"><a href="#onclick-與-addEventListener-quot-click-quot-function-e-false-差異" class="headerlink" title="onclick 與 addEventListener( &quot;click&quot; , function(e){},false) 差異 ?"></a><code>onclick</code> 與 <code>addEventListener( &quot;click&quot; , function(e)&#123;&#125;,false)</code> 差異 ?</h3><p><a href="https://codepen.io/echocarriet/pen/ExPeYpB">CodePen 範例</a></p>
<ul>
<li><code>onclick</code> 不能同時綁定兩個事件。如果綁定兩個事件以上，只會讀取最後一個。</li>
<li><code>addEventListener( &quot;click&quot;, function(e)&#123;&#125;, false);</code> 可以同時綁定多個事件。</li>
</ul>
<h2 id="❒-Event-Bubbling-事件冒泡、Event-Capturing-事件捕捉的差異"><a href="#❒-Event-Bubbling-事件冒泡、Event-Capturing-事件捕捉的差異" class="headerlink" title="❒ Event Bubbling 事件冒泡、Event Capturing 事件捕捉的差異"></a>❒ Event Bubbling 事件冒泡、Event Capturing 事件捕捉的差異</h2><h3 id="addEventListener-中-true-與-false-差異？"><a href="#addEventListener-中-true-與-false-差異？" class="headerlink" title="addEventListener () 中 true 與 false 差異？"></a><code>addEventListener ()</code> 中 <code>true</code> 與 <code>false</code> 差異？</h3><ol>
<li><code>true</code> ( Event Capturing 事件捕捉 )<ol>
<li>從外層往內層找指定元素。</li>
</ol>
</li>
<li><code>false</code>( Event Bubbling 事件汽泡 )<ol>
<li>指定元素往外層找。</li>
<li>預設為 <code>false</code> ，所以如果沒寫就會是預設狀態。</li>
<li>較常使用 <code>false</code> ，點擊最近的東西來去觸發事件。</li>
</ol>
</li>
</ol>
<h3 id="範例-1-如果-body-與-box-為-false，點選-box-區域時會先執行哪個呢"><a href="#範例-1-如果-body-與-box-為-false，點選-box-區域時會先執行哪個呢" class="headerlink" title="範例 1. 如果 .body 與 .box 為 false，點選 box 區域時會先執行哪個呢 ?"></a>範例 1. 如果 <code>.body</code> 與 <code>.box</code> 為 false，點選 box 區域時會先執行哪個呢 ?</h3><p><a href="https://codepen.io/echocarriet/pen/zYrJxJW">CodePen 範例</a></p>
<ul>
<li><code>false</code> ( Event Bubbling 事件汽泡 ) : 指定元素往外找 。以範例來說，當下點的指定元素 <code>.box</code> 往外層找 <code>.body</code> → 先跳出 box 彈跳視窗再出現 body 彈跳視窗</li>
<li><code>true</code> ( Event Capturing 事件捕捉 ) : 從最外層往內找到指定元素。以範例來說，外層 <code>.body</code> 往內找到指定元素 <code>.box</code> → 先跳出 body 彈跳視窗再出現 box 彈跳視窗</li>
<li>所以較常使用 <code>false</code> ，點擊最近的東西來去觸發事件。<br><img src="https://ithelp.ithome.com.tw/upload/images/20221013/20119743L0Rt92U8o1.jpg" alt="示意圖"></li>
</ul>
<h3 id="範例-2-承範例-1-，如果-body-為-true-，-box-為-false，點選-box-區域時會先執行哪個呢"><a href="#範例-2-承範例-1-，如果-body-為-true-，-box-為-false，點選-box-區域時會先執行哪個呢" class="headerlink" title="範例 2. 承範例 1.，如果 body 為 true ， .box 為 false，點選 box 區域時會先執行哪個呢 ?"></a>範例 2. 承範例 1.，如果 <code>body</code> 為 true ， <code>.box</code> 為 false，點選 box 區域時會先執行哪個呢 ?</h3><p><a href="https://codepen.io/echocarriet/pen/WNrgvvj">CodePen 範例</a></p>
<ul>
<li><code>.box</code> 區域於 <code>body</code> 範圍內，而 <code>body</code> 的 <code>addEventListener</code> 是設定 <code>true</code> ( 從外層找到指定元素 )，所以會先跳 <code>body</code> 再跳 <code>.box</code>。</li>
</ul>
<h2 id="❒-stopPropagation-中止冒泡事件"><a href="#❒-stopPropagation-中止冒泡事件" class="headerlink" title="❒ stopPropagation - 中止冒泡事件"></a>❒ stopPropagation - 中止冒泡事件</h2><blockquote>
<p>防止監聽的元素互相衝突</p>
</blockquote>
<p>當點選到重疊的元素時，只希望執行一個元素。可使用 <code>stopPropagation</code> 當指定元素和上層元素有重疊時，會阻止指定元素往外層找。</p>
<h3 id="範例-1"><a href="#範例-1" class="headerlink" title="範例 1"></a>範例 1</h3><p><a href="https://codepen.io/echocarriet/pen/RwrYrbY">CodePen 範例</a></p>
<ul>
<li>如果未加上 <code>stopPropagation</code>，點擊 <code>.box</code> 會彈出 <code>box</code> 與 <code>body</code> 視窗 ( 事件冒泡由指定元素往外執行 )。</li>
<li><code>.box</code> 加上 <code>stopPropagation</code> 後終止冒泡事件，點擊 <code>.box</code> 後就只會彈出 <code>box</code> 的 alert 視窗。</li>
<li>如果外層沒有另外的事件會被觸發，那就不需要 <code>stopPropagation</code> 囉！</li>
</ul>
<h2 id="❒-preventDefault-取消預設觸發行為"><a href="#❒-preventDefault-取消預設觸發行為" class="headerlink" title="❒ preventDefault 取消預設觸發行為"></a>❒ preventDefault 取消預設觸發行為</h2><p>常使用的情境：</p>
<ol>
<li>a 連結。</li>
<li>submit 按鈕 ，先透過 JS 去查詢表單是否有誤，再透過 post 傳送。而非默認的 submit 後就直接傳送到後端做驗證。</li>
</ol>
<h3 id="範例-1-使用-preventDefault，取消-a-連結觸發"><a href="#範例-1-使用-preventDefault，取消-a-連結觸發" class="headerlink" title="範例 1. 使用 preventDefault，取消 a 連結觸發"></a>範例 1. 使用 preventDefault，取消 a 連結觸發</h3><p><a href="https://codepen.io/echocarriet/pen/mdVGxgK">CodePen 範例</a></p>
<ul>
<li>使用 <code>preventDefault</code> 取消預設觸發行為後，點擊 a 連結就不會轉跳到 google 頁面。</li>
</ul>
<h2 id="❒-e-target-了解目前所在元素位置"><a href="#❒-e-target-了解目前所在元素位置" class="headerlink" title="❒ e.target - 了解目前所在元素位置"></a>❒ e.target - 了解目前所在元素位置</h2><p><code>e.target</code> 可知道目前點擊的 DOM 範圍。</p>
<h3 id="範例-1-1"><a href="#範例-1-1" class="headerlink" title="範例 1"></a>範例 1</h3><p><a href="https://codepen.io/echocarriet/pen/zYjyMvq">CodePen 範例</a></p>
<ul>
<li>監聽最外層 ul 標籤，分別點擊 <code>li</code> 與 a 標籤，可於開發者工具看見這兩個 DOM 的範圍。</li>
<li>另外 <code>console.log (e);</code> 部分，開啟開發者工具也可以看到點擊元素的目前所在位置 <code>target : li</code> 。<br><img src="https://ithelp.ithome.com.tw/upload/images/20221013/201197434OfNfZXfRw.png" alt="開發者工具中 target : li"></li>
</ul>
<h2 id="❒-nodeName-是什麼"><a href="#❒-nodeName-是什麼" class="headerlink" title="❒ nodeName 是什麼"></a>❒ nodeName 是什麼</h2><p><code>nodeName</code> 為 DOM 元素的節點，可搭配 <code>e.target</code> 使用。</p>
<h2 id="❒-e-target-搭配-nodeName-節點，抓到你預期要做的事情"><a href="#❒-e-target-搭配-nodeName-節點，抓到你預期要做的事情" class="headerlink" title="❒ e.target 搭配 nodeName 節點，抓到你預期要做的事情"></a>❒ e.target 搭配 nodeName 節點，抓到你預期要做的事情</h2><p>出處 :  JavaScript 工程師養成直播班 - 2021 春季班影音</p>
<h3 id="範例-1-2"><a href="#範例-1-2" class="headerlink" title="範例 1"></a>範例 1</h3><p><a href="https://codepen.io/echocarriet/pen/YzLdRQa">CodePen 範例</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;點擊&quot;</span> <span class="attr">class</span>=<span class="string">&#x27;btn&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>標題 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>標題 2</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按鈕&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.btn&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> list = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.list&#x27;</span>);</span><br><span class="line"></span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>.<span class="property">innerHTML</span>); <span class="comment">//點擊 input 因為裡面沒有 HTML 結構，所以會顯示空值。</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>.<span class="property">nodeName</span>); <span class="comment">//INPUT</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下方為點擊 li 標題2 的按鈕(下圖一)</span></span><br><span class="line">list.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>.<span class="property">innerHTML</span>); <span class="comment">//點擊 input 因為裡面沒有 HTML 結構，所以會顯示空值。</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>.<span class="property">nodeName</span>); <span class="comment">//INPUT</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//點擊第二個 li 的標題2文字 (下圖二)</span></span><br><span class="line">list.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>.<span class="property">innerHTML</span>); <span class="comment">//顯示 → 標題 與 input 結構</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>.<span class="property">nodeName</span>); <span class="comment">//LI</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><img src="https://ithelp.ithome.com.tw/upload/images/20221013/201197437yQzrCRHdK.png" alt="點擊第二個 li 標題內的按鈕 button ( 圖一 )"><br><img src="https://ithelp.ithome.com.tw/upload/images/20221013/20119743Xw7S0sS9de.png" alt="點擊第二個 li 的標題文字 ( 圖二 )"></p>
<h3 id="範例-2-使用-nodeName-判斷是否有點擊到按鈕，正確點擊到顯示”你目前點到按鈕了“"><a href="#範例-2-使用-nodeName-判斷是否有點擊到按鈕，正確點擊到顯示”你目前點到按鈕了“" class="headerlink" title="範例 2. 使用 nodeName 判斷是否有點擊到按鈕，正確點擊到顯示”你目前點到按鈕了“"></a>範例 2. 使用 nodeName 判斷是否有點擊到按鈕，正確點擊到顯示”你目前點到按鈕了“</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;ul <span class="keyword">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>標題<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>標題</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按鈕&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p><a href="https://codepen.io/echocarriet/pen/YzLdRav">CodePen 範例</a></p>
<ul>
<li>先宣告變數，綁 <code>.list</code> 這個 DOM。所以 <code>ul.list &gt; li *2</code>  以內的範圍都會被綁定。</li>
<li>在 <code>ul.list &gt; li *2</code> 範圍內觸發 click，就會觸發函式。</li>
<li><code>e.target.nodeName</code> 會顯示 DOM 元素點擊到的節點為 <code>INPUT</code> 標籤。</li>
<li>使用判斷式判斷 <code>e.target.nodeName</code> 與點擊到的DOM 節點是否相同，是的話就觸發大括號 <code>&#123;&#125;</code> 內的程式碼。</li>
</ul>
<h2 id="❒-change-表單內容，更動內容時觸發"><a href="#❒-change-表單內容，更動內容時觸發" class="headerlink" title="❒ change - 表單內容，更動內容時觸發"></a>❒ change - 表單內容，更動內容時觸發</h2><h3 id="範例-1-選擇區域顯示每個區域的農夫名"><a href="#範例-1-選擇區域顯示每個區域的農夫名" class="headerlink" title="範例 1. 選擇區域顯示每個區域的農夫名"></a>範例 1. 選擇區域顯示每個區域的農夫名</h3><p><img src="https://ithelp.ithome.com.tw/upload/images/20221013/20119743RaC6WhcwIA.png" alt="表單示意圖"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;areaId&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span> <span class="attr">disabled</span>&gt;</span>請選取區域<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;苓雅區&quot;</span>&gt;</span>苓雅區<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;前鎮區&quot;</span>&gt;</span>前鎮區<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> country = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">farmer</span>: <span class="string">&#x27;查理&#x27;</span>,</span><br><span class="line">    <span class="attr">place</span>: <span class="string">&#x27;苓雅區&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">farmer</span>: <span class="string">&#x27;布朗&#x27;</span>,</span><br><span class="line">    <span class="attr">place</span>: <span class="string">&#x27;前鎮區&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">farmer</span>: <span class="string">&#x27;派翠克&#x27;</span>,</span><br><span class="line">    <span class="attr">place</span>: <span class="string">&#x27;苓雅區&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p><a href="https://codepen.io/echocarriet/pen/mdLvejz">CodePen 範例</a></p>
<ul>
<li>選單在 <code>change</code> 時會觸發後方函式。</li>
<li>透過 <code>forEach</code> 撈出變數 <code>country</code> 內的陣列資料，並使用判斷式篩選，讓選單的值與 <code>forEach</code> 撈出的 <code>place</code> 相同時，列出農夫名字。<ul>
<li><code>e.target.value</code> 可撈出選單中文字欄位內的值。</li>
</ul>
</li>
<li>因為要撈出某個區域的農夫，所以先寫一個空字串 <code>let str = &#39;&#39;;</code>，等跑完 <code>forEach</code> 再帶到 li 內 。<ul>
<li>innerHTML 特性 → 新帶入的值會把舊的值蓋過，為了防止資料被蓋掉寫一個空字串  <code>let str = &#39;&#39;;</code> ，來做累加字串。</li>
<li>最後再把 if 篩選完的資料賦予 <code>list.innerHTML</code> 。</li>
</ul>
</li>
</ul>
<p><strong>備註</strong></p>
<p><code>list.innerHTML = str;</code> 寫在 <code>forEach</code> 內與外雖然網頁皆顯示無誤，但對運行程式碼的效能考量不理想。</p>
<ul>
<li>寫在 <code>forEach</code> 內運行的次數會和陣列長度一樣。</li>
<li>寫在 <code>forEach</code> 外只會運行一次。</li>
</ul>
<h2 id="❒-表單中-blur-與-focus"><a href="#❒-表單中-blur-與-focus" class="headerlink" title="❒ 表單中 blur 與 focus"></a>❒ 表單中 blur 與 focus</h2><ul>
<li><code>focus</code> 所在焦點</li>
<li><code>blur</code> 離開焦點</li>
<li>當元素聚焦時，會觸發 <code>focus</code> 事件，當元素失去焦點時，會觸發 <code>blur</code> 事件。</li>
</ul>
<p>以表單為例，滑鼠點擊表單要輸入數字 ( 點擊了表單即觸發 <code>focus</code> 事件 )，但沒輸入就離開 ( 再點擊表單外的區域 )，就會觸發 <code>blur</code> 事件。</p>
<h3 id="範例-1-使用計算機計算出餐點金額，並搭配-blur-事件做欄位防呆機制"><a href="#範例-1-使用計算機計算出餐點金額，並搭配-blur-事件做欄位防呆機制" class="headerlink" title="範例 1. 使用計算機計算出餐點金額，並搭配 blur 事件做欄位防呆機制"></a>範例 1. 使用計算機計算出餐點金額，並搭配 blur 事件做欄位防呆機制</h3><p><img src="https://ithelp.ithome.com.tw/upload/images/20221013/20119743bJyGAvtjsu.png" alt="未填寫表格就點選計算中按鈕，會出現 NaN"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>六角西餐廳 - 顧客點餐系統<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">      服務生 : Hello,請問你想要點甚麼 ?</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">      顧客 : 給我</span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;hamburgerId&quot;</span>&gt;</span></span><br><span class="line">      個漢堡，再</span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cokeId&quot;</span>&gt;</span></span><br><span class="line">      杯可樂。</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">      服務生:</span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;startCountId&quot;</span>&gt;</span>計算<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      ，好的，總計是</span><br><span class="line">      <span class="tag">&lt;<span class="name">em</span> <span class="attr">class</span>=<span class="string">&quot;totalId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">      元</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">//歸戶</span></span><br><span class="line"><span class="keyword">const</span> hamNum = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.hamburgerId&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> cokeNum = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.cokeId&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> startCount = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.startCountId&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> total = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.totalId&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 漢堡與可樂價錢</span></span><br><span class="line"><span class="keyword">const</span> hamPrice = <span class="number">70</span>;</span><br><span class="line"><span class="keyword">const</span> cokePrice = <span class="number">50</span>;</span><br></pre></td></tr></table></figure>

<p><a href="https://codepen.io/echocarriet/pen/bGMzVXG">CodePen 範例</a></p>
<ul>
<li>用到 <code>isNaN</code> 判斷是否為數字<ul>
<li>JavaScript <code>isNaN</code> 函數用來判斷參數是否為特殊的非數字值 <code>NaN</code>，如果是就回傳 <code>true</code>，不是則回傳 <code>false</code>，要注意的是 <code>isNaN</code> 函數會將參數轉換成數字 ( number )，如果轉換成功就會回傳 <code>true</code>，失敗則回傳 <code>false</code>。</li>
<li>相關資訊：Wibibi - <a href="https://www.wibibi.com/info.php?tid=221">JavaScript isNaN 函數</a>、MDN - <a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/isNaN#content">isNaN()</a>。</li>
</ul>
</li>
</ul>
<h2 id="❒-return-和-return-false-的差異"><a href="#❒-return-和-return-false-的差異" class="headerlink" title="❒ return 和 return false 的差異"></a>❒ return 和 return false 的差異</h2><h3 id="Q1-isNaN-中使用到-return-false-，而-return-和-return-false-的差異為何呢-助教回覆"><a href="#Q1-isNaN-中使用到-return-false-，而-return-和-return-false-的差異為何呢-助教回覆" class="headerlink" title="Q1. isNaN 中使用到 return false ，而 return 和 return false 的差異為何呢 ? ( 助教回覆 )"></a>Q1. isNaN 中使用到 return false ，而 <code>return</code> 和 <code>return false</code> 的差異為何呢 ? ( 助教回覆 )</h3><p>Ans :<br><code>return</code> 在函式內使用，會回傳一個值，並終止函式往下執行。<br><code>return false</code> 通常用來阻止提交表單或是繼續執行下面的程式碼。簡單來說就是阻止執行預設的行為。</p>
<p>.</p>
<h3 id="Q2-return-false"><a href="#Q2-return-false" class="headerlink" title="Q2. return false;"></a>Q2. <code>return false;</code></h3><p><code>return false;</code> 下方 1 與 2 的事情它都會做：</p>
<ol>
<li>他會做 <code>event.preventDefault();</code>。</li>
<li>他會做 <code>event.stopPropagation();</code>。</li>
<li>停止 callback function 的執行並且立即 <code>return</code> 回來。</li>
</ol>
<p>出處 : <a href="https://yiyingloveart.blogspot.com/2013/08/eventpreventdefaultreturn-false.html">event.preventDefault()跟return false的差別是?</a></p>
<h2 id="❒-keyCode-點擊鍵盤，射發火箭"><a href="#❒-keyCode-點擊鍵盤，射發火箭" class="headerlink" title="❒ keyCode - 點擊鍵盤，射發火箭"></a>❒ keyCode - 點擊鍵盤，射發火箭</h2><p>鍵盤式移動的遊戲，或互動式網站可使 <code>keyCode</code></p>
<h3 id="範例-1-如何查詢鍵盤上每個按鍵的-keyCode"><a href="#範例-1-如何查詢鍵盤上每個按鍵的-keyCode" class="headerlink" title="範例 1. 如何查詢鍵盤上每個按鍵的 keyCode"></a>範例 1. 如何查詢鍵盤上每個按鍵的 keyCode</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> body = <span class="variable language_">document</span>.<span class="property">body</span>;</span><br><span class="line">body.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keydown&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">keyCode</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>監聽使用 <code>keydown</code> 指按下鍵盤的那個剎那，任何的鍵盤按鍵按下都可以取得對應的鍵盤代碼，也就是所謂的 <code>keyCode</code>。</li>
<li>輸入下面程式碼，開啟開發人員工具，於網頁上輸入鍵盤上任一按鍵，會回傳 <code>keyCode</code>。<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20221013/20119743zkoPgtncDv.jpg" alt="開發者工具中回傳的 keyCode"></li>
</ul>
<h3 id="範例-2-按下鍵盤任一按鍵，顯示-keyCode-在網頁上"><a href="#範例-2-按下鍵盤任一按鍵，顯示-keyCode-在網頁上" class="headerlink" title="範例 2. 按下鍵盤任一按鍵，顯示 keyCode 在網頁上"></a>範例 2. 按下鍵盤任一按鍵，顯示 keyCode 在網頁上</h3><p><a href="https://codepen.io/echocarriet/pen/Vwxgejq">CodePen 範例</a></p>
<ul>
<li>監聽整個網頁，當在這個頁面執行 keydown 時 (按下鍵盤任一鍵)，會觸發函式。</li>
<li>使用 <code>renderCode()</code> 把 <code>keyCode</code> 渲染在畫面上。</li>
</ul>
<h3 id="範例-3-火箭遊戲練習-按下數字分別發射火箭，按-1-發射第一個火箭，按-2-發射第二個火箭，按-3-發射第三個火箭"><a href="#範例-3-火箭遊戲練習-按下數字分別發射火箭，按-1-發射第一個火箭，按-2-發射第二個火箭，按-3-發射第三個火箭" class="headerlink" title="範例 3. 火箭遊戲練習 : 按下數字分別發射火箭，按 1 發射第一個火箭，按 2 發射第二個火箭，按 3 發射第三個火箭"></a>範例 3. 火箭遊戲練習 : 按下數字分別發射火箭，按 1 發射第一個火箭，按 2 發射第二個火箭，按 3 發射第三個火箭</h3><p><img src="https://ithelp.ithome.com.tw/upload/images/20221013/20119743nNPx5DiFoE.png" alt="範例示意圖"></p>
<p><a href="https://codepen.io/echocarriet/pen/vYLzQRe">CodePen 範例</a></p>
<ul>
<li>用 <code>keydown</code> 查出按鍵 1、2、3 的 <code>keyCode</code>。</li>
<li>監聽整個網頁，當有人按下鍵盤 ，執行函式內的程式碼。</li>
<li>因知道明確數字 ( 上方以查出鍵盤 1、2、3 的 keyCode  )，所以可以使用 <code>switch</code> 做控制判斷。</li>
</ul>
<h3 id="關於-Document-body"><a href="#關於-Document-body" class="headerlink" title="關於 Document.body"></a>關於 <code>Document.body</code></h3><ul>
<li>Document 介面代表所有在瀏覽器中載入的網頁，也是作為網頁內容 DOM Tree（包含 <code>&lt;body&gt;</code>、<code>&lt;table&gt;</code> 與其它的元素 ）的進入點。</li>
<li><code>Document.body</code> 主要是「 回傳目前文件的 <code>&lt;body&gt;</code> 節點，如元素不存在則回傳 <code>null</code> 」，因此只有 <code>body</code> 能使用。</li>
</ul>
<h2 id="❒-mousemove-當滑鼠滑入指定內容時觸發"><a href="#❒-mousemove-當滑鼠滑入指定內容時觸發" class="headerlink" title="❒ mousemove 當滑鼠滑入指定內容時觸發"></a>❒ mousemove 當滑鼠滑入指定內容時觸發</h2><p><code>mousemove</code> 滑鼠移動到指定元素後觸發。</p>
<p><code>mouseleave</code> 滑鼠離開指定元素後觸發。</p>
<h3 id="範例-1-滑鼠滑入方形區塊內，變圓形"><a href="#範例-1-滑鼠滑入方形區塊內，變圓形" class="headerlink" title="範例 1. 滑鼠滑入方形區塊內，變圓形"></a>範例 1. 滑鼠滑入方形區塊內，變圓形</h3><p><a href="https://codepen.io/echocarriet/pen/XWqOXgZ">CodePen 範例</a></p>
<ul>
<li>使用 <code>mousemove</code> 搭配 <code>setAttribute</code> 讓滑鼠進入 box 區域後，讓 box 由方形變圓形。</li>
</ul>
<h3 id="範例-2-延續範例1-滑鼠離開後再由圓形變回方形"><a href="#範例-2-延續範例1-滑鼠離開後再由圓形變回方形" class="headerlink" title="範例 2. 延續範例1. 滑鼠離開後再由圓形變回方形"></a>範例 2. 延續範例1. 滑鼠離開後再由圓形變回方形</h3><p><a href="https://codepen.io/echocarriet/pen/wvMRaev">CodePen 範例</a></p>
<ul>
<li>使用 <code>mousemove</code> 搭配 <code>setAttribute</code> 讓滑鼠進入 box 區域後，讓 box 由方形變圓形。</li>
<li>為了讓整個過程順暢點，再加入 <code>mouseleave</code> 讓滑鼠離開 box 區域後再變回方形。<ul>
<li>使用 <code>classList.remove</code> 刪除圓形 <code>boxRadius</code>，再使用  <code>classList.add</code> 新增回原本方形 <code>box</code></li>
</ul>
</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 刪除單個</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myDIV&quot;</span>).<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&quot;mystyle&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 刪除多個</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myDIV&quot;</span>).<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&quot;mystyle&quot;</span>, <span class="string">&quot;anotherClass&quot;</span>, <span class="string">&quot;thirdClass&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="範例-3-使用-animation-與-JS-的-mousemove-做小遊戲"><a href="#範例-3-使用-animation-與-JS-的-mousemove-做小遊戲" class="headerlink" title="範例 3. 使用 animation 與 JS 的 mousemove 做小遊戲"></a>範例 3. 使用 <code>animation</code> 與 JS 的 <code>mousemove</code> 做小遊戲</h3><ul>
<li><code>animation</code> 屬性的應用可參閱 「 Day8 | Animation、Transition、Transform 動畫效果 」</li>
<li>範例<ul>
<li><a href="https://jsbin.com/venuqoreqi/edit?html,css,js,console,output">老師範例</a></li>
<li>自我練習 <a href="https://codepen.io/echocarriet/pen/GRozNMP">CodePen 範例</a></li>
</ul>
</li>
</ul>
<h3 id="關於-classList"><a href="#關於-classList" class="headerlink" title="關於 classList"></a>關於 <code>classList</code></h3><p>DOM 裡每個節點都有一個 <code>classList</code> 物件，可以使用來新增、刪除、修改節點上的 CSS 。</p>
<ul>
<li>刪除 <code>remove</code></li>
<li>新增 <code>add</code></li>
<li>切換 <code>toggle</code></li>
</ul>
<h2 id="❒-網頁座標-了解-screen、page、client-箇中差異"><a href="#❒-網頁座標-了解-screen、page、client-箇中差異" class="headerlink" title="❒ 網頁座標 - 了解 screen、page、client 箇中差異"></a>❒ 網頁座標 - 了解 screen、page、client 箇中差異</h2><p>可先開啟 <a href="https://codepen.io/echocarriet/pen/bGEzBZd">CodePen 範例</a> 搭配下方解說</p>
<h3 id="screen"><a href="#screen" class="headerlink" title="screen"></a>screen</h3><p>螢幕 ( 手機、平板 、電腦等裝置 ) 解析度的座標點</p>
<h3 id="page"><a href="#page" class="headerlink" title="page"></a>page</h3><ul>
<li>以整個網頁寬高為主</li>
<li>如果頁面太長出現卷軸，Y 軸也會跟著持續增加。<ul>
<li><a href="https://codepen.io/echocarriet/pen/bGEzBZd">範例中</a> 當右邊卷軸往下滑動，<code>pageY</code> 座標點數字會持續增加，而 <code>clientY</code> 只會顯是當下瀏覽器高度的座標點。</li>
</ul>
</li>
</ul>
<h3 id="client"><a href="#client" class="headerlink" title="client"></a>client</h3><ul>
<li>瀏覽器窗口的座標點</li>
<li>如果瀏覽器頁面太長出現卷軸，Y軸也只會出現當下視窗高度的座標點<ul>
<li><a href="https://codepen.io/echocarriet/pen/bGEzBZd">範例中</a> 當右邊卷軸往下滑動，<code>pageY</code> 座標點數字會持續增加，而 <code>clientY</code> 只會顯是當下瀏覽器高度的座標點。</li>
</ul>
</li>
</ul>
<h3 id="範例-1-3"><a href="#範例-1-3" class="headerlink" title="範例 1"></a>範例 1</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">showPosition</span>(<span class="params">e</span>)&#123;</span><br><span class="line">  screenX.<span class="property">textContent</span> = e.<span class="property">screenX</span>;</span><br><span class="line">  screenY.<span class="property">textContent</span> = e.<span class="property">screenY</span>;</span><br><span class="line">  pageX.<span class="property">textContent</span> = e.<span class="property">pageX</span>;</span><br><span class="line">  pageY.<span class="property">textContent</span> = e.<span class="property">pageY</span>;</span><br><span class="line">  clientX.<span class="property">textContent</span> = e.<span class="property">clientX</span>;</span><br><span class="line">  clientY.<span class="property">textContent</span> = e.<span class="property">clientY</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://codepen.io/echocarriet/pen/bGEzBZd">CodePen 範例</a></p>
<p><strong>解說</strong></p>
<ul>
<li>程式碼中的 <code>e</code> 為 <code>showPosition</code> 函式中的參數，可顯示出  <code>showPosition</code> 函式的所有資訊。<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20221013/20119743p20Noyyuyu.png" alt="console.log(e)可顯示函示的所有資訊"></li>
<li>event 內有很多方法，如下示意圖 <code>console.log(e)</code> 顯示的函式資訊。<ul>
<li>以其中的方法之一的 <code>screenX</code> 為例 → <code>e.screenX</code>  ( 亦可換 <code>screenX</code> 、<code>screenY</code>、<code>target</code> .. 等  ) 搭配 <code>textContent</code> ，可把 <code>screen X</code> 座標資訊顯示在網頁上。</li>
</ul>
</li>
</ul>
<h3 id="範例-2-網頁座標-圖案取代鼠標-clientXY"><a href="#範例-2-網頁座標-圖案取代鼠標-clientXY" class="headerlink" title="範例 2. 網頁座標 ( 圖案取代鼠標 - clientXY )"></a>範例 2. 網頁座標 ( 圖案取代鼠標 - clientXY )</h3><p><img src="https://ithelp.ithome.com.tw/upload/images/20221013/20119743vUCGm9McZ2.png" alt="範例示意圖"></p>
<p><a href="https://codepen.io/echocarriet/pen/zYrewJd">CodePen 範例</a></p>
<p><strong>CSS</strong></p>
<ul>
<li>避免原來的滑鼠指標 &amp; 圖案取代的滑鼠指標 同時出現，於  body CSS 中使用 <code>cursor:none;</code></li>
<li><code>.mouseImg</code> 使用 fixed 可以不會因為旁邊的捲軸滾動而影響到位置 → <a href="https://imgur.com/bFwriaR">如圖</a> ，但使用 <code>absolute</code> 就會因為卷軸滾動而讓 icon 移動到上方 <a href="https://imgur.com/CUdErrC">如圖</a> 。</li>
</ul>
<p><strong>JS</strong></p>
<p>如何讓圖案取代的鼠標 &amp; 原來的鼠標同步 ?</p>
<ul>
<li>透過 DOM API 來操作 HTML 元素的 CSS 樣式 (style)。<ul>
<li>可參閱  <a href="https://www.fooish.com/javascript/dom/css.html">JavaScript DOM CSS ( 修改 CSS 樣式 )</a> 。</li>
</ul>
</li>
<li>因 client XY  會顯示滑鼠於瀏覽器窗口的座標點，所以使用它來運算。<ul>
<li>讓滑鼠運算窗口的位置</li>
</ul>
</li>
</ul>
<h2 id="❒-事件監聽優化篇-從父元素來監聽子元素內容"><a href="#❒-事件監聽優化篇-從父元素來監聽子元素內容" class="headerlink" title="❒ 事件監聽優化篇 - 從父元素來監聽子元素內容"></a>❒ 事件監聽優化篇 - 從父元素來監聽子元素內容</h2><h3 id="範例-1-父元素內有很多子元素，querySelector-只會讓第一個子元素會獲得監聽"><a href="#範例-1-父元素內有很多子元素，querySelector-只會讓第一個子元素會獲得監聽" class="headerlink" title="範例 1. 父元素內有很多子元素，querySelector() 只會讓第一個子元素會獲得監聽"></a>範例 1. 父元素內有很多子元素，<code>querySelector()</code> 只會讓第一個子元素會獲得監聽</h3><p><a href="https://codepen.io/echocarriet/pen/XWjBjpq">CodePen 範例</a></p>
<ul>
<li>滑鼠點選湯姆， console.log 出現湯姆，但點選捷克時，並不會顯示捷克。因為 <code>querySelector()</code> 的特性<strong>只會抓第一筆資料做更新</strong>。</li>
</ul>
<h3 id="範例-2-透過-noedName-確定點擊的東西是不是我要的節點"><a href="#範例-2-透過-noedName-確定點擊的東西是不是我要的節點" class="headerlink" title="範例 2. 透過 noedName 確定點擊的東西是不是我要的節點"></a>範例 2. 透過 noedName 確定點擊的東西是不是我要的節點</h3><p><img src="https://ithelp.ithome.com.tw/upload/images/20221013/20119743JGCt54dTji.png" alt="點選湯姆區域，Console 顯示節點為 LI"></p>
<p><a href="https://codepen.io/echocarriet/pen/mdrjrWd">CodePen 範例</a></p>
<ul>
<li>監聽 ul 區域，搭配 <code>e.target.nodeName</code> 點擊區域內項目可確定是否有點擊到需要的節點。</li>
</ul>
<h3 id="範例-3-不想點擊到-ul-範圍出現所有-li-內容，希望點擊-li-才觸發事件該怎麼做"><a href="#範例-3-不想點擊到-ul-範圍出現所有-li-內容，希望點擊-li-才觸發事件該怎麼做" class="headerlink" title="範例 3. 不想點擊到 ul 範圍出現所有 li 內容，希望點擊 li 才觸發事件該怎麼做"></a>範例 3. 不想點擊到 ul 範圍出現所有 li 內容，希望點擊 li 才觸發事件該怎麼做</h3><p><a href="https://codepen.io/echocarriet/pen/RwrvmaQ">CodePen 範例</a></p>
<p><strong>使用情境：</strong></p>
<ul>
<li>以 <code>ul&gt;li</code> 為例：<ul>
<li>如果子元素有很多個，希望每個都獲得監聽，可直接監聽父元素 <code>ul</code>，每個子元素 <code>li</code> 皆可獲得監聽。</li>
<li>好處為可以透過 event  顯示出父元素內的所有資訊，但缺點就會像下方示意圖，點擊了 ul 範圍出現所有 li 內容。<br><img src="https://ithelp.ithome.com.tw/upload/images/20221013/20119743PEfU5MeMH5.png" alt="上述做法，單點 li 不會有問題，但點選 ul .list 範圍處會出現所有 li 名稱"></li>
<li>只想要點選 li ，Console 顯示 li 的值 ( 湯姆、捷克 )，點選其他元素 Console 皆不顯示，可加入判斷式 if。</li>
</ul>
</li>
</ul>
<p><strong>解析：</strong></p>
<ul>
<li>加入判斷式 if。</li>
<li>透過 <code>nodeName</code> 方式查詢到 li 們的節點為 LI  把它帶入判斷式 if 中 → <code>if( e.target.nodeName !== &#39;LI&#39; )&#123;return&#125;</code> 點擊到的節點不等於 li 回傳 return<ul>
<li>retuen 可當回傳值外亦可當中斷點。 當中 retuen 也可不寫讓它是空值，這樣後方程式碼就會停止運作 ( 後方的<code>console.log()</code> 就不執行 ) 。</li>
<li>以 <code>console.log(e.target.nodeName);</code> 點選 li 內的湯姆與捷克， Console 出現的節點為 LI 所以判斷式內寫 <code>!== &#39;LI&#39;</code></li>
<li>最後，除了 li 內的值會顯示外，點選其他元素 Console 皆不會顯示。</li>
</ul>
</li>
</ul>
<h3 id="範例-2-點選左方-box-內的文字，文字會顯示於右方-box-內"><a href="#範例-2-點選左方-box-內的文字，文字會顯示於右方-box-內" class="headerlink" title="範例 2. 點選左方 box 內的文字，文字會顯示於右方 box 內"></a>範例 2. 點選左方 box 內的文字，文字會顯示於右方 box 內</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;boxList&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>01. coco<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>02. coxima<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;box2List&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><a href="https://codepen.io/echocarriet/pen/XWqOXGP">CodePen 範例</a></p>
<ul>
<li>於全域設定一個空陣列 <code>box2Data</code>，點擊 <code>.boxList&gt;li</code> 的文字可以 push 到空陣列中，再渲染到 <code>.box2List</code> 內。</li>
</ul>
<h2 id="資料來源"><a href="#資料來源" class="headerlink" title="資料來源"></a>資料來源</h2><ul>
<li>JavaScript 入門篇 - 學徒的試煉</li>
<li>Wibibi - <a href="https://www.wibibi.com/info.php?tid=221">JavaScript isNaN 函數</a></li>
<li>MDN - <a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/isNaN#content">isNaN()</a></li>
<li>animation 應用可參閱 - <a href="https://www.notion.so/CSS-Animation-keyframes-Animation-transiton-7388dc3b136b4627910e364325c6c035">CSS | Animation 與 keyframes 、 Animation 與 transiton差異</a></li>
<li>JS基礎篇 - <a href="https://codertw.com/%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC/27430/">HTML DOM classList 屬性</a></li>
<li><a href="https://www.fooish.com/javascript/dom/css.html">JavaScript DOM CSS ( 修改 CSS 樣式 )</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>2022年iThome鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>Day3 | Form 表單</title>
    <url>/html-css/20230327/3395657913/</url>
    <content><![CDATA[<h2 id="❒-Form-表單"><a href="#❒-Form-表單" class="headerlink" title="❒ Form 表單"></a>❒ Form 表單</h2><ul>
<li><code>&lt;form&gt;</code> 標籤是 HTML 中用來裝表單的容器， <code>&lt;form action=&quot;#&quot;&gt;..&lt;/form&gt;</code> 中的 action 用來指定一個位址 ( URL )，這個位址是告訴瀏覽器當使用者按送出表單後，要將表格的內容送去哪邊。所以建議於表單外層使用 <code>&lt;form&gt;</code> 標籤做包覆。</li>
<li>避免將一個 label 標籤與多個控制元件相關聯， label 與 select 要分別設定，一個 <code>label</code> 標籤對應一個 <code>select</code>。<ul>
<li><p>相關討論：<a href="https://stackoverflow.com/a/12166681">stackoverflow 的相關討論</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;year&quot;</span>&gt;</span>年份<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;year&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;year&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2019&quot;</span>&gt;</span>2019<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2020&quot;</span>&gt;</span>2020<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;month&quot;</span>&gt;</span>月份<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;month&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;month&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;4&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span>        </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="❒-常見的-HTML-表單元素"><a href="#❒-常見的-HTML-表單元素" class="headerlink" title="❒ 常見的 HTML 表單元素"></a>❒ 常見的 HTML 表單元素</h2><ul>
<li><code>&lt;label&gt;</code> 標籤<ul>
<li><code>&lt;label&gt;</code> 標籤的 for 屬性會對應 <code>&lt;input&gt;</code> 標籤的 id 屬性。</li>
</ul>
</li>
<li><code>&lt;input&gt;</code> 標籤： 輸入欄位，可搭配 <code>type</code> 屬性顯示不同方法。<ul>
<li>詳細資訊可參考 <a href="https://www.w3schools.com/html/html_form_input_types.asp">w3school - HTML Input Types</a>。</li>
</ul>
</li>
<li><code>&lt;textarea&gt;</code> 標籤：多行段落文字輸入欄位。</li>
<li><code>&lt;select&gt;</code> 標籤搭配 <code>&lt;option&gt;</code> 標籤：下拉式選單。</li>
<li><code>&lt;datalist&gt;</code> 標籤：下拉選項外也附帶文字輸入篩選功能。</li>
</ul>
<h2 id="❒-常見的-HTML-表單元素屬性"><a href="#❒-常見的-HTML-表單元素屬性" class="headerlink" title="❒ 常見的 HTML 表單元素屬性"></a>❒ 常見的 HTML 表單元素屬性</h2><ul>
<li><code>name</code> 屬性：name 中資料會顯示在網址上，提交表單後可從網址上的傳送值得知填的資訊取出對應欄位值。<ul>
<li><code>type</code> 屬性中，同組 <code>radio</code> 與 <code>checkbox</code> 屬性的 <code>name</code> 須設定同名，才能表示是同組。<a href="https://codepen.io/echocarriet/pen/abGNgdy">CodePen 範例</a></li>
</ul>
</li>
<li><code>disabled</code> 屬性：禁止使用該表單元素。</li>
<li><code>value</code> 屬性：表單元素的初始值。</li>
<li><code>placeholder</code> 屬性：用法 <code>&lt;input placeholder=&quot;想顯示的文字&quot;&gt;</code> ，用戶輸入值前 <code>placeholder</code> 屬性中的文字會顯示於欄位上。<ul>
<li><code>placeholder</code> 屬性適用於以下輸入類型：文本、搜索、url、電話、電子郵件和密碼。</li>
</ul>
</li>
<li><code>for</code> 屬性與 <code>id</code> 屬性：<ul>
<li><code>&lt;label&gt;</code> 標籤的 <code>for</code> 屬性會對應 <code>&lt;input&gt;</code> 標籤的 <code>id</code> 屬性。</li>
<li><code>&lt;label&gt;</code> 標籤的 <code>for</code> 屬性會對應 <code>&lt;select&gt;</code> 標籤的 <code>id</code> 屬性。</li>
</ul>
</li>
</ul>
<h2 id="❒-datalist-與-option-標籤差異"><a href="#❒-datalist-與-option-標籤差異" class="headerlink" title="❒ datalist 與 option 標籤差異"></a>❒ datalist 與 option 標籤差異</h2><p><a href="https://codepen.io/echocarriet/pen/qBYZLzO">CodePen 範例</a></p>
<h3 id="▷-使用時機"><a href="#▷-使用時機" class="headerlink" title="▷ 使用時機"></a>▷ 使用時機</h3><p><code>datalist</code> 標籤適用於選項很多的選單，除了下拉選項外也附帶文字輸入篩選功能，輸入關鍵字會跳出對應的選項。<code>select</code> 標籤需要手動選取選單內的選項。</p>
<h3 id="▷-datalist-架構"><a href="#▷-datalist-架構" class="headerlink" title="▷ datalist 架構"></a>▷ datalist 架構</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;ice-cream-choice&quot;</span>&gt;</span>Choose a flavor:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">list</span>=<span class="string">&quot;ice-cream-flavors&quot;</span> <span class="attr">id</span>=<span class="string">&quot;ice-cream-choice&quot;</span> <span class="attr">name</span>=<span class="string">&quot;ice-cream-choice&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">&quot;ice-cream-flavors&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Chocolate&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Coconut&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Mint&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Strawberry&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Vanilla&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>「 <code>label</code> 標籤的 for 屬性 」對應「 <code>input</code> 標籤的 id 屬性 」。</li>
<li>架構為 <code>input</code> 加上 <code>datalist</code> 標籤，「 <code>input</code> 標籤的 list 屬性 」對應 「 <code>datalist</code> 標籤的 id 屬性 」。</li>
<li><code>datalist</code> 內的 <code>&lt;option&gt;</code> 標籤與 <code>select</code> 標籤不同的是，<code>datalist</code> 內的 <code>&lt;option&gt;</code> 標籤不需要 <code>&lt;/option&gt;</code> 結尾。</li>
<li>input 標籤的 name 屬性<ul>
<li>如果網頁內的資料傳遞是使用實際頁面非 API ( SSR )，<code>select</code> 標籤就需要加上 name 屬性，後端工程師可由此知道此資訊名稱。基本上 name 是給後端看的， id 是前端操作用的。一般 name 屬性會與 id 屬性命名相同。</li>
<li><code>name</code> 中資料會顯示在網址上，提交表單後可從網址上的傳送值得知填的資訊。提交表單後，文字欄位會以 <code>name</code> 中的值當欄位名稱 。</li>
</ul>
</li>
</ul>
<h3 id="▷-select-架構"><a href="#▷-select-架構" class="headerlink" title="▷ select 架構"></a>▷ select 架構</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;city-select&quot;</span>&gt;</span>Choose a City:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;CitySelect&quot;</span> <span class="attr">id</span>=<span class="string">&quot;city-select&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">selected</span> <span class="attr">disabled</span>&gt;</span>--請選取區域--<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Kaohsiung&quot;</span>&gt;</span>高雄市<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Tainan&quot;</span>&gt;</span>台南市<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Taichung&quot;</span>&gt;</span>台中市<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>「<code>label</code> 標籤的 for 屬性」對應「 <code>input</code> 標籤的 id 屬性」。</li>
<li><code>select</code> 內的 <code>&lt;option&gt;</code> 標籤與 <code>datalist</code> 標籤不同的是，<code>select</code>  標籤內的 <code>&lt;option&gt;</code> 需要 <code>&lt;/option&gt;</code> 結尾。</li>
</ul>
<h2 id="❒-參考資訊"><a href="#❒-參考資訊" class="headerlink" title="❒ 參考資訊"></a>❒ 參考資訊</h2><ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/datalist">MDN - <code>&lt;datalist&gt;</code>: The HTML Data List element</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/select">MDN - <code>&lt;select&gt;</code></a></li>
<li><a href="https://www.w3schools.com/html/html_form_input_types.asp">w3school - HTML Input Types</a></li>
<li><a href="https://www.w3schools.com/tags/att_input_placeholder.asp">w3school - HTML <code>&lt;input&gt;</code> placeholder Attribute</a></li>
</ul>
]]></content>
      <categories>
        <category>HTML&amp;CSS</category>
      </categories>
      <tags>
        <tag>2022年iThome鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>Day30 | JS 的 axios 套件與 HTTP 狀態碼</title>
    <url>/javascript/20230402/2074748114/</url>
    <content><![CDATA[<h2 id="❒-甚麼是-AJAX"><a href="#❒-甚麼是-AJAX" class="headerlink" title="❒ 甚麼是 AJAX"></a>❒ 甚麼是 AJAX</h2><p>AJAX 是「 Asynchronous JavaScript and XML 」（ 非同步的 JavaScript 與 XML 技術 ）的縮寫，簡單說就是網頁不用重新整理，就能即時地透過瀏覽器去跟伺服器溝通，撈出資料。</p>
<p>使用者在不換頁的情況下，還是擁有很好的使用者體驗，點選其他頁面只更新局部資料，不須每次都等網頁整理完載入其他周邊資訊，才可以看到想要的資料。</p>
<p>點選其他頁面，不須等整個頁面重新載入，只會重新載入有變更的區域。</p>
<h2 id="❒-什麼是網路請求？"><a href="#❒-什麼是網路請求？" class="headerlink" title="❒ 什麼是網路請求？"></a>❒ 什麼是網路請求？</h2><p>在網頁上 ( 例如 chrome ) 輸入網址，按下 Enter 這個動作等同於我傳送了一個網路請求。<br>我透過 chrome 發出一個網路請求，此請求為想要取得 ( get ) 一個網頁上的資訊。<br>要 get 一個網址，就會幫你找這個網址有沒有對應的伺服器，有的話就會連到對應的伺服器 ( 網址頁面 ) 去。<br><img src="https://ithelp.ithome.com.tw/upload/images/20221015/20119743No0ajep8kd.png" alt="利用網址按Enter 發出網路請求的過程"></p>
<h3 id="從網頁架構瞭解網頁請求"><a href="#從網頁架構瞭解網頁請求" class="headerlink" title="從網頁架構瞭解網頁請求"></a>從網頁架構瞭解網頁請求</h3><p><img src="https://ithelp.ithome.com.tw/upload/images/20221015/20119743CcnvnIZPVZ.png" alt="從網頁架構瞭解網頁請求"></p>
<ul>
<li>可從 chrome 開發者工具的 Network 查詢裡面有幾個網路請求。剛開始開啟 Network 裡面沒資料，可按重新整理。</li>
<li>以目前檔案內有 index.html 與 all.js ，載入的先後順序為 index.html 載入完會開始由上至下逐行解析 html 裡面的結構，最後顯示在網頁上。<br>Network 可見有三個網路請求 → index.html 、圖片、all.js。 這些網路請求是有先後順序如下圖，非一次一起出現。<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20221015/20119743QdEkEXsioQ.png" alt="chrome 開發者工具的 Network 截圖"></li>
</ul>
<h2 id="❒-關於-request-請求、response-回傳"><a href="#❒-關於-request-請求、response-回傳" class="headerlink" title="❒ 關於 request 請求、response 回傳"></a>❒ 關於 request 請求、response 回傳</h2><h3 id="request-請求"><a href="#request-請求" class="headerlink" title="request 請求"></a>request 請求</h3><p>在傳送資料時，不是只 get 傳送一個網址伺服器就會回傳資料，會有一連串驗證，驗證資料沒問題，伺服器才會回傳資料給瀏覽器。</p>
<ul>
<li>Request Headers 使用者是看不到的，裡面的資訊主要是讓對方伺服器知道自己是甚麼身分 ( 表明 request 是誰、要傳送甚麼資料給對方伺服器、是甚麼瀏覽器 )，類似 html 中 <code>&lt;head&gt;&lt;/head&gt;</code> 內的資料 。<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20221015/20119743NQqNsVNb9m.png" alt="不論是 request ( 請求 ) 或是 response ( 回傳 ) 都會有 Headers 的資料"></li>
<li>想透過網頁請求發一些資訊給伺服器，告知我要登陸了並給予帳號密碼，伺服器驗證後覺得可行，再回傳資料給網頁。</li>
</ul>
<h3 id="response-回傳"><a href="#response-回傳" class="headerlink" title="response 回傳"></a>response 回傳</h3><ul>
<li>發 request 與網址給伺服器，伺服器驗證覺得沒問題  → 伺服器透過 response 把資料回傳到網頁。</li>
<li>response 回傳的內容有 :<ul>
<li>Response Headers : 它不會顯示在網頁上，只是讓瀏覽器知道 Response Headers 有甚麼內容。Response Headers &#x2F; Content-Type 可看到資料是甚麼格式 。<br><img src="https://ithelp.ithome.com.tw/upload/images/20221015/20119743eP6hPLFGPK.png" alt="截圖"></li>
<li>Response Data : 實際真正回傳的字串內容。( Network &#x2F; 左方點選檔案 &#x2F; 右方點選 Response )</li>
</ul>
</li>
</ul>
<h3 id="為什麼-Response-Data-回傳的是字串內容，我們卻看的到網頁畫面的呈現"><a href="#為什麼-Response-Data-回傳的是字串內容，我們卻看的到網頁畫面的呈現" class="headerlink" title="為什麼 Response Data 回傳的是字串內容，我們卻看的到網頁畫面的呈現 ?"></a>為什麼 Response Data 回傳的是字串內容，我們卻看的到網頁畫面的呈現 ?</h3><p>Response Data 回傳的字串內容 ( Network &#x2F; Response )，把它解析為 Content-Type 內的網頁格式 ( Network &#x2F; Headers → Content-Type : text&#x2F;html )，此時它就會用網頁格式做渲染讓我們看到畫面呈現。<br><img src="https://ithelp.ithome.com.tw/upload/images/20221015/20119743AOdlFRlt7E.png" alt="Response 會回傳的資訊"></p>
<h3 id="request-請求-amp-response-回傳-統整"><a href="#request-請求-amp-response-回傳-統整" class="headerlink" title="request 請求 &amp; response 回傳 | 統整"></a>request 請求 &amp; response 回傳 | 統整</h3><ul>
<li>不論是 request ( 請求 ) 或是 response ( 回傳 ) 都會有 Headers 的資料。</li>
<li>透過瀏覽器或其他方式都可以發出網路請求給伺服器，伺服器回傳會使用 response ，回傳會有 Response Headers 與 Response 本身的資料內容 Response Data。<br>Response Data 中的 data 會被編譯為檔案、HTML、圖片 .. 等其他格式，會從 Response Headers 的 Content-Type 得知而進行編譯。</li>
</ul>
<h2 id="❒-各種發出網路請求的-JS-寫法種類"><a href="#❒-各種發出網路請求的-JS-寫法種類" class="headerlink" title="❒ 各種發出網路請求的 JS 寫法種類"></a>❒ 各種發出網路請求的 JS 寫法種類</h2><h3 id="➊-JS-原生寫法"><a href="#➊-JS-原生寫法" class="headerlink" title="➊ JS 原生寫法"></a>➊ JS 原生寫法</h3><ul>
<li><p><code>XMLHttpRequest</code> : 最資深，每個網頁瀏覽器都有。</p>
  <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 結構</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reqListener</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">responseText</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> oReq = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">oReq.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, reqListener);</span><br><span class="line">oReq.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://example.org/example.text&#x27;</span>);</span><br><span class="line">oReq.<span class="title function_">send</span>();</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>fetch</code> : 較新的語法，在有些瀏覽器的運用上要留意是否有支援。</p>
  <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 結構</span></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;http://example.com/movies.json&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> response.<span class="title function_">json</span>();</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">myJson</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(myJson);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="➋-套件-axios"><a href="#➋-套件-axios" class="headerlink" title="➋ 套件 axios ?"></a>➋ 套件 axios ?</h3><ul>
<li>需額外載入 JS。</li>
<li>底層是使用 <code>XMLHttpRequest</code> 規則做出。</li>
<li>精簡了 <code>XMLHttpRequest</code> 的程式碼，方便寫出簡潔的網路請求。</li>
<li>axios 寫法：<ul>
<li><p>對 <code>get(&#39;URL&#39;)</code> 內的網址發出網路請求，成功後會跑 <code>then</code> 然後直行裡面的函式把資料回傳。</p>
<pre><code><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 結構</span></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;URL&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">status</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">statusText</span>); <span class="comment">// 狀態碼</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">headers</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">config</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
</li>
</ul>
<h2 id="❒-axios-套件"><a href="#❒-axios-套件" class="headerlink" title="❒ axios 套件"></a>❒ axios 套件</h2><h3 id="➊-環境安裝"><a href="#➊-環境安裝" class="headerlink" title="➊ 環境安裝"></a>➊ 環境安裝</h3><ul>
<li><p>a<strong>xios repository :</strong> <a href="https://github.com/axios/axios">https://github.com/axios/axios</a></p>
</li>
<li><p><strong>安裝方式 :</strong> axios 有多種安裝方式，可參考<a href="https://github.com/axios/axios#installing">文件</a>，本文章使用 CDN 方式。</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1.建議先載入套件的 js 檔案 ↓ --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 2.自己寫的 js 檔案 ↓ --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/all.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="➋-檢查是否有載入成功"><a href="#➋-檢查是否有載入成功" class="headerlink" title="➋ 檢查是否有載入成功"></a>➋ 檢查是否有載入成功</h3><p><strong>方式一</strong></p>
<p>開啟 chrome 開發者工具 &#x2F; Network 可見 axios.min.js 與 all.js 的狀態 Status 皆為 200 → 如果顯示 404 表沒載入成功。</p>
<p>註： all.js 狀態碼 304 為已經有載入過，不會在跟伺服器要資料，會使用暫存的檔案。( 下方會有 HTTP 狀態碼解說 )<br><img src="https://ithelp.ithome.com.tw/upload/images/20221015/20119743tUmHaEDAGC.png" alt="截圖"></p>
<p><strong>方式二</strong></p>
<p>於自己的 js 檔案輸入 <code>console.log(axios);</code> ，會回傳 axios 的相關資料。<br><img src="https://ithelp.ithome.com.tw/upload/images/20221015/20119743i874m5to6B.png" alt="截圖"></p>
<h3 id="➌-使用-axios-串接外部資料"><a href="#➌-使用-axios-串接外部資料" class="headerlink" title="➌ 使用 axios 串接外部資料"></a>➌ 使用 axios 串接外部資料</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ------- axios 結構</span></span><br><span class="line"><span class="comment">// URL 可自行更換為想獲取資料的API網址</span></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;URL&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 成功回傳</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>); <span class="comment">//為上方JSON格式的資料，統整 response物件中，於裡面撈出</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">status</span>); <span class="comment">// HTTP 狀態碼</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 失敗回傳</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<p><strong>範例 1. 使用 axios 讀取網址內的 JSON 資料</strong></p>
<p>API 網址：<a href="https://hexschool.github.io/ajaxHomework/data.json">https://hexschool.github.io/ajaxHomework/data.json</a></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;https://hexschool.github.io/ajaxHomework/data.json&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response); </span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>撈取 API 網址成功後回傳 <code>then</code> 中的 <code>response</code> 資料，<code>response</code> 下的 <code>data</code> 內可見<code>王小名</code>資訊。<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20221015/20119743bO7yqdSCWU.png" alt="截圖"></p>
</li>
<li><p>試試故意把 URL 刪掉一個字讓網址錯誤，就會回傳 <code>catch</code> 中的 <code>err</code> 錯誤資訊。<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20221015/20119743josWnWkQWQ.png" alt="截圖"></p>
</li>
</ul>
<p><strong>範例 2. 使用 axios 讀取網址內的 JSON 資料，渲染在網頁上</strong></p>
<p>API 網址 : <a href="https://hexschool.github.io/ajaxHomework/data.json">https://hexschool.github.io/ajaxHomework/data.json</a></p>
<p><a href="https://codepen.io/echocarriet/pen/oNdVGbO">CodePen 範例</a></p>
<h2 id="❒-axios-非同步觀念"><a href="#❒-axios-非同步觀念" class="headerlink" title="❒ axios 非同步觀念"></a>❒ axios 非同步觀念</h2><p><img src="https://ithelp.ithome.com.tw/upload/images/20221015/20119743Ma5ttqTROp.png" alt="截圖"></p>
<ul>
<li>先印出 <code>console.log(ary);</code> → 空陣列，等待伺服器準備好資料回傳後就直接執行函式內的程式碼</li>
<li>發網路請求給伺服器，等待伺服器回傳資料需要一些時間，還未等到資料回傳時 ( response 函式未執行，伺服器回傳資料後就會執行 response 的函式 )，程式碼就繼續往下運作，導致 <code>console.log(ary);</code> 會是空陣列。</li>
</ul>
<h3 id="為什麼不等到-axios-資料執行完再往下跑-console-log-ary"><a href="#為什麼不等到-axios-資料執行完再往下跑-console-log-ary" class="headerlink" title="為什麼不等到 axios 資料執行完再往下跑 console.log(ary); ?"></a>為什麼不等到 axios 資料執行完再往下跑 <code>console.log(ary);</code> ?</h3><p>如果 axios 內的資料很大，在等待下載的這段時間其他程式都不執行，網頁畫面會空白一片使用者體驗不好。所以都會先發出網路請求 <code>get</code> 再等待伺服器回傳資料的這段時間就繼續往下執行程式。<br>在繼續往下跑的這段時間，伺服器回傳資料後就會直接顯示出來。</p>
<p>如下，第一次 <code>console.log(ary);</code> 顯示空值 ( 伺服器還未回傳資料 )，第二次 <code>console.log(ary);</code> 就會顯示 resopnse 資料了 ( 伺服器回傳資料成功，執行 response 的函式 )。<br><img src="https://ithelp.ithome.com.tw/upload/images/20221015/20119743IBIVLJq8ng.png" alt="截圖"></p>
<h3 id="透過函式設計處理非同步"><a href="#透過函式設計處理非同步" class="headerlink" title="透過函式設計處理非同步"></a>透過函式設計處理非同步</h3><p><img src="https://ithelp.ithome.com.tw/upload/images/20221015/20119743EGUlR0jv4C.png" alt="截圖"></p>
<ul>
<li>執行順序 : 3 → 1 → 2</li>
<li>透過函式設計處理非同步可使用函式方式包裝，確保伺服器有正確回傳資料後，再執行函式，就有保障。</li>
<li>東西都是被函式包裝起來，當資料寫入 ( 發出網路請求，伺服器回傳資料 ) 就可直接執行函式。</li>
<li>line10 <code>renderData()</code> 如果移至全域是<strong>不會</strong>得到 <code>response.data</code> 回傳的結果。</li>
</ul>
<h2 id="❒-因-axios-非同步特性，建議透過函式處理非同步"><a href="#❒-因-axios-非同步特性，建議透過函式處理非同步" class="headerlink" title="❒ 因 axios 非同步特性，建議透過函式處理非同步"></a>❒ 因 axios 非同步特性，建議透過函式處理非同步</h2><p><img src="https://ithelp.ithome.com.tw/upload/images/20221015/20119743d7BdFm5UL3.png" alt="截圖"></p>
<ul>
<li>執行順序 : 3 → 1 → 2</li>
<li>任何指令都先寫成一個函式，像是渲染畫面用的 <code>renderData()</code>。等伺服器回傳資料 response 後，觸發 then 的函式，再把資料 response  寫到 line4 空陣列中，再往下執行，也能確保資料有吃到 ( line 9 ) 再來做後續的行為 ( 渲染畫面 <code>renderData()</code> )。</li>
</ul>
<p><strong>步驟解析 :</strong></p>
<ol>
<li>宣告一個變數 ary 為空陣列。</li>
<li>使用 <code>get</code> 發出一個網路請求給伺服器，伺服器還在審核資料未回傳時， <code>then</code> 的函式是不會被觸發的 ( 會被丟到一個暫存區，等到伺服器跑好才會被執行 ) → 繼續往下跑去註冊 <code>randerData()</code> 函式到 chrome 的 JS 裡面 ( 這時伺服器還再跑未回傳 ) → 繼續往下執行 line 18 <code>console.log(ary);</code> 為空陣列 ( 印出 )。<br>這時還有個待處理的狀態 line 6 ~ line11，等到伺服器跑好了回傳 response，line 6 ~ line11 的函式就會開始執行，並且把伺服器回傳的 response 結果帶到 line7 的參數 response 上。開始往下執行剛剛待處理的狀態 :<ul>
<li>line8 → 印出 資料回傳了</li>
<li>line9 →  arr 資料寫到 line4 空陣列中。</li>
<li>line10 → 執行 <code>randerData() ;</code> → 跑 line13 印出變數 <code>ary</code> 內的資料。</li>
<li>line15 ~ line16 → 前方資料處理完後，把文字顯示在 html 上。</li>
</ul>
</li>
<li><strong>總結 :</strong><br>在非同步執行後 ( line6 )，寫一個函式 ( line10 ) 去執行後續，但在這之前需先管理資料狀態 <code>ary=response.data;</code> ( line9 ) 把資料狀態賦予回去外層變數 <code>let ary =[];</code> 空陣列中。<br>以上可確保值都有吃到，再進行後續行為。</li>
</ol>
<p><strong>使用函式處理上方範例 2. 的程式碼：使用 axios 讀取網址內的 JSON 資料，渲染在網頁上</strong></p>
<p>API 網址 : <a href="https://hexschool.github.io/ajaxHomework/data.json">https://hexschool.github.io/ajaxHomework/data.json</a></p>
<p><a href="https://codepen.io/echocarriet/pen/XWqGejB">CodePen 範例</a></p>
<h2 id="❒-HTTP-狀態碼"><a href="#❒-HTTP-狀態碼" class="headerlink" title="❒ HTTP 狀態碼"></a>❒ HTTP 狀態碼</h2><p>HTTP 狀態碼可以讓我們了解 HTTP 請求是否已經被完成或是出了什麼問題，下方整理了 AJAX 較常使用到的狀態碼訊息：</p>
<ol>
<li><strong>成功回應 ( Successful responses, 200 ~ 299 )</strong><ul>
<li>200 OK：請求成功。</li>
<li>這區間的狀態碼表示伺服器有成功接收到用戶端要求。以 AJAX 的串接為例，如果回傳的 <strong>status 為 200</strong>，則代表有成功接收到資料。</li>
</ul>
</li>
<li><strong>重定向 300 ~ 399</strong><ul>
<li>304 Not Modified ：已經有載入過，不會在跟伺服器要資料，會使用暫存的檔案。</li>
</ul>
</li>
<li><strong>用戶端錯誤 ( Client errors, 400 ~ 499 )</strong> 這區間的狀態碼表示有錯誤發生，且錯誤來自於「用戶端」。以 AJAX 的串接為例，<ul>
<li>回傳的 <strong>status 為 400</strong>，表示遠端伺服器接收到無效語法、無法理解請求，因此需要檢查程式碼有無寫錯的地方。</li>
<li>回傳的 <strong>status 為 403</strong>, 表示禁止使用，這代表用戶端沒有訪問權限，因此沒辦法成功串接資料。</li>
<li>回傳的 <strong>status 404</strong>，伺服器找不到請求的資源 ( 找不到檔案 ) 。</li>
</ul>
</li>
<li><strong>伺服器端錯誤 ( Server errors, 500 ~ 599 )</strong> 如果發生狀態碼為 <strong>5xx</strong> 的錯誤，則表示錯誤發生跟「遠端伺服器」有關，此時就需要跟後端工程師進行協調了。<ul>
<li><strong>500 Internal Server Error</strong> ：伺服器端發生未知或無法處理的錯誤 ( 接後端資訊時，可能會遇到 )。</li>
</ul>
</li>
</ol>
<h2 id="參考資訊"><a href="#參考資訊" class="headerlink" title="參考資訊"></a>參考資訊</h2><ul>
<li>六角學院</li>
<li><a href="https://developer.mozilla.org/zh-TW/docs/Web/HTTP/Status">MDN - HTTP 狀態碼</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>2022年iThome鐵人賽</tag>
        <tag>axios</tag>
        <tag>HTTP狀態碼</tag>
        <tag>AJAX</tag>
      </tags>
  </entry>
  <entry>
    <title>Day4 | 淺談 Flex 排版外層屬性</title>
    <url>/html-css/20230327/3023895147/</url>
    <content><![CDATA[<h2 id="❒-Flex-的外層與內層屬性"><a href="#❒-Flex-的外層與內層屬性" class="headerlink" title="❒ Flex 的外層與內層屬性"></a>❒ Flex 的外層與內層屬性</h2><p><img src="https://ithelp.ithome.com.tw/upload/images/20220919/20119743tHXBnC7LKU.png" alt="// 左方為外層屬性，右方為內層屬性。  圖片出處 : 六角學院 ▲"></p>
<ul>
<li>外層 ( 外層 )<ul>
<li>外層會用到的屬性：<ul>
<li><code>display</code>、<code>flex-flow</code> ( <code>flex-direction</code> 與 <code>flex-wrap</code> 的組合 )、<code>flex-direction</code>、<code>flex-wrap</code>、<code>justify-content</code>、<code>align-items</code>。</li>
</ul>
</li>
<li>如果想要區塊元素作並排，可於父層使用 <code>display:flex;</code> 。</li>
<li>flex 都是設定在父層上，讓子層元素有 flex 的效果。</li>
</ul>
</li>
<li>內層 ( 子層 )<ul>
<li>內層會用到的屬性：<ul>
<li><code>flex-grow</code>、<code>flex-shrink</code>、<code>flex-basis</code>、<code>order</code>、<code>align-self</code>。</li>
</ul>
</li>
<li>子元素們會依照比例做伸縮調整，不會超出父層寬度。  ( <a href="https://codepen.io/echocarriet/pen/BajgNZw">CodePen 範例</a> )</li>
<li>子元素會自動延伸與同層內最高元素的高度。 ( <a href="https://codepen.io/echocarriet/pen/jOWjbPR">CodePen 範例</a> )<ul>
<li>範例中 <code>.box 2</code> 沒有設定高度，但它會自動延伸與子元素中高度最高的 <code>.box3</code> 同高。</li>
</ul>
</li>
</ul>
</li>
<li>Flex 與 Float 差異在於不用做清除浮動，父層還是抓的到子層的高度。</li>
</ul>
<h2 id="❒-不要談-XY-軸，談資料流向"><a href="#❒-不要談-XY-軸，談資料流向" class="headerlink" title="❒ 不要談 XY 軸，談資料流向"></a>❒ 不要談 XY 軸，談資料流向</h2><blockquote>
<p><strong>先判斷主軸方向再進行主軸與次軸設定</strong></p>
</blockquote>
<p><img src="https://ithelp.ithome.com.tw/upload/images/20220919/2011974308Ic34K7NV.jpg" alt="// flex 資料流向"></p>
<ul>
<li>資料流走直向主軸就是直，資料流走橫向主軸就是橫的</li>
<li>資料流向 &#x3D; 主軸；交叉軸 &#x3D; 次軸</li>
<li>以上方圖示為例，資料流向 ( 主軸 ) 橫向，交叉軸 ( 次軸 ) 就會是直向。如果資料流向 ( 主軸 ) 為直向，交叉軸 ( 次軸 ) 就會變橫向。</li>
<li>資料流向 ( 主軸 ) 橫向預設為橫向 <code>row</code>。</li>
</ul>
<h2 id="❒-外層屬性"><a href="#❒-外層屬性" class="headerlink" title="❒ 外層屬性"></a>❒ 外層屬性</h2><blockquote>
<p><strong>先判斷「 主軸方向 <code>flex-direction</code> 」，再進行「 主軸 <code>flex-wrap</code>、<code>justify-content</code> 」與「 次軸 <code>align-items</code> 」設定。</strong></p>
</blockquote>
<h3 id="▷-flex-direction-方向"><a href="#▷-flex-direction-方向" class="headerlink" title="▷ flex-direction 方向"></a>▷ flex-direction 方向</h3><p><strong>屬性值：</strong></p>
<ul>
<li><code>row</code> ( 預設 ) ，左至右。</li>
<li><code>column</code>，上至下。</li>
<li><code>row-reverse</code>  左至右反向。</li>
<li><code>column-reverse</code>  上至下反向。</li>
</ul>
<h3 id="▷-flex-wrap-換行"><a href="#▷-flex-wrap-換行" class="headerlink" title="▷ flex-wrap 換行"></a>▷ <code>flex-wrap</code> 換行</h3><p><strong>屬性值：</strong></p>
<ul>
<li><code>nowrap</code>  ( 預設 )，不換行。</li>
<li><code>wrap</code>，換行。</li>
<li><code>wrapwrap-reverse</code>，依主軸決定直或橫的反向換行。</li>
</ul>
<h3 id="▷-flex-flow"><a href="#▷-flex-flow" class="headerlink" title="▷ flex-flow"></a>▷ flex-flow</h3><ul>
<li><code>flex-flow</code> 為 <code>flex-direction</code> 與 <code>flex-wrap</code> 縮寫，依序寫入 <code>flex-direction</code> 與 <code>flex-wrap</code>。 例如： <code>flex-flow:row wrap;</code>。</li>
</ul>
<h3 id="▷-justify-content-主軸對齊方式"><a href="#▷-justify-content-主軸對齊方式" class="headerlink" title="▷ justify-content 主軸對齊方式"></a>▷ <code>justify-content</code> 主軸對齊方式</h3><blockquote>
<p><strong>主軸對齊使用 <code>justify-content</code> ，次軸對齊使用 <code>align-items</code> 。</strong><br><img src="https://ithelp.ithome.com.tw/upload/images/20220919/20119743ftCyxP7Cav.png" alt="// 圖片來源 : 六角學院 ▲"></p>
</blockquote>
<p><strong>屬性值：</strong></p>
<ul>
<li><code>flex-start</code> : 對齊主軸起點</li>
<li><code>flex-end</code> : 對齊主軸終點</li>
<li><code>center</code> : 對齊主軸水平線</li>
<li><code>space-between</code> : 平均分配每個元素，首元素與末元素會分別對齊主軸起點與終點。</li>
<li><code>space-around</code>：與 <code>space-around</code> 很像，但中間留白與左右邊線距離不一樣 。</li>
<li><code>space-evenly</code> : 與 <code>space-around</code> 很像，但中間留白與左右邊線距離一樣 。</li>
</ul>
<h3 id="▷-align-items-次軸對齊方式"><a href="#▷-align-items-次軸對齊方式" class="headerlink" title="▷ align-items 次軸對齊方式"></a>▷ align-items 次軸對齊方式</h3><blockquote>
<p><strong>主軸對齊使用 <code>justify-content</code> ，次軸對齊使用 <code>align-items</code> 。</strong></p>
</blockquote>
<p><img src="https://ithelp.ithome.com.tw/upload/images/20220919/20119743xtbsAYFE1x.png" alt="// 圖片來源 : 六角學院 ▲"></p>
<ul>
<li><code>flex-start</code></li>
<li><code>flex-end</code></li>
<li><code>center</code></li>
<li><code>strech</code> : 延伸 100% 交錯軸。( 預設 )</li>
<li><code>baseline</code> : 讓並排元素的文字照<a href="https://zh.wikipedia.org/wiki/%E5%9F%BA%E7%B7%9A">基線</a>做對齊。</li>
</ul>
<h3 id="▷-align-content-次軸對齊方式，但須多行才有效"><a href="#▷-align-content-次軸對齊方式，但須多行才有效" class="headerlink" title="▷ align-content 次軸對齊方式，但須多行才有效"></a>▷ align-content 次軸對齊方式，但須多行才有效</h3><ul>
<li><code>align-content</code> 決定行之間的間隔，而 <code>align-items</code> 決定元素整體在容器的什麼位置。</li>
<li>只有一行時 <code>align-content</code>  是無效的。</li>
</ul>
<h2 id="❒-Flex-模擬器與遊戲"><a href="#❒-Flex-模擬器與遊戲" class="headerlink" title="❒ Flex 模擬器與遊戲"></a>❒ Flex 模擬器與遊戲</h2><p>關於 Flex 屬性運用，可搭配下方模擬器與遊戲：</p>
<ul>
<li><a href="https://codepen.io/peiqun/pen/WYzzYX">Flex 六角線上模擬器</a></li>
<li><a href="https://hexschool.github.io/flexbox-pirate/index.html#/">Flex pirate 新手關卡</a></li>
<li><a href="https://flexboxfroggy.com/#zh-tw">Flex 青蛙</a></li>
</ul>
<h2 id="❒-使用-Flex-遇到的一些問題統整"><a href="#❒-使用-Flex-遇到的一些問題統整" class="headerlink" title="❒ 使用 Flex 遇到的一些問題統整"></a>❒ 使用 Flex 遇到的一些問題統整</h2><h3 id="❶-flex-中圖片變型的原因"><a href="#❶-flex-中圖片變型的原因" class="headerlink" title="❶ flex 中圖片變型的原因"></a>❶ flex 中圖片變型的原因</h3><p><a href="https://codepen.io/echocarriet/pen/GRqQKXd">Codepen 範例</a></p>
<p>區塊設定 <code>flex</code>， 而 <code>align-items</code> 預設會是 <code>stretch</code>，會自動延伸與同層內最高元素<br>的高度 ，如果遇到隔壁排內容比圖片還多，圖片會因此產生變形。<br>可加上 <code>align-items: center</code> 就可讓圖片恢復原比例。</p>
<h3 id="❷-align-items-baseline-是做什麼的"><a href="#❷-align-items-baseline-是做什麼的" class="headerlink" title="❷ align-items:baseline; 是做什麼的 ?"></a>❷ align-items:baseline; 是做什麼的 ?</h3><p>此出處於六角學院課程中問與答。</p>
<ul>
<li><p>Baseline 是英文或其他西方文字會有的文字基線，讓英文字母能夠依照此基準線對齊，可以參考此<a href="https://zh.wikipedia.org/wiki/%E5%9F%BA%E7%B7%9A">連結</a>。<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20220919/20119743UBIcdXYsZY.png" alt="// 示意圖">  </p>
</li>
<li><p><code>align-items: baseline</code> 就是讓並排的元素的交錯軸依照 baseline 對齊，因此可以看到若有元素中有文字內容看起來就會是下圖二這樣。<br> <img src="https://ithelp.ithome.com.tw/upload/images/20220919/201197438zIUS8ESqL.png" alt="// align-items - CSS Reference"></p>
<p>  ▲ 來源：<a href="https://cssreference.io/property/align-items/">align-items - CSS Reference</a> ▲</p>
</li>
</ul>
<h3 id="❸-如何辨別「-align-items-baseline-」與「-align-items-flex-start-」"><a href="#❸-如何辨別「-align-items-baseline-」與「-align-items-flex-start-」" class="headerlink" title="❸ 如何辨別「 align-items:baseline; 」與「 align-items:flex-start; 」 ?"></a>❸ 如何辨別「 align-items:baseline; 」與「 align-items:flex-start; 」 ?</h3><p><strong>父層使用 row &amp; <code>align-items:baseline;</code>   ( <a href="https://codepen.io/echocarriet/pen/oNdLYZY">CodePen 範例</a> ) :</strong></p>
<ul>
<li><code>font-size</code> 相同 :  範例 ❶ 中看起來和 <code>align-items:flex-start;</code> 很像，都是靠上對齊。</li>
<li><code>font-size</code> 不同 :<ul>
<li>使用 <code>baseline</code>：和範例 ❶ 相比，範例 ❷ 中就會比較明顯看到，<code>.box</code> 們依內容文字基準線對齊。 boxC 高度是最高的，其他 <code>.box</code> 會用自己的 baseline 去對齊最高的 boxC 。</li>
<li>使用 <code>flex-start</code>：和範例 ❷ 相比，範例❸ 中可見對齊基準依次軸的起點位置。</li>
</ul>
</li>
</ul>
<p><img src="https://ithelp.ithome.com.tw/upload/images/20220919/20119743cOgZuwLbGN.jpg" alt="// font-size 不同使用 baseline 與 flex-start 差異"></p>
<hr>
<p>下篇繼續關於 Flex 內層屬性，<code>flex-grow</code>、<code>flex-shrink</code>、<code>flex-basis</code>、<code>order</code>、<code>align-self</code>。</p>
<h2 id="❒-參考資訊"><a href="#❒-參考資訊" class="headerlink" title="❒ 參考資訊"></a>❒ 參考資訊</h2><ul>
<li>六角學院 : 使用 HTML、CSS 開發一個網站</li>
<li><a href="https://codepen.io/peiqun/pen/WYzzYX">Flex 六角線上模擬器</a></li>
<li><a href="https://youtu.be/_nCBQ6AIzDU">Css coke - 玩轉 CSS Flex</a></li>
<li>Flex 遊戲<ul>
<li><a href="https://hexschool.github.io/flexbox-pirate/index.html#/">Flex pirate 新手關卡</a></li>
<li><a href="https://flexboxfroggy.com/#zh-tw">Flex 青蛙</a></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>HTML&amp;CSS</category>
      </categories>
      <tags>
        <tag>2022年iThome鐵人賽</tag>
        <tag>flex</tag>
      </tags>
  </entry>
  <entry>
    <title>Day5 | 淺談 Flex 排版內層屬性</title>
    <url>/html-css/20230327/1352471116/</url>
    <content><![CDATA[<p>上篇「 淺談 Flex 排版外層屬性 」說到 flex 的外層屬性們，這篇來說說 flex 的內層屬性。<br><img src="https://ithelp.ithome.com.tw/upload/images/20220920/20119743oYMFcW1bHU.png" alt="// 左方為外層屬性，右方為內層屬性。  圖片出處 : 六角學院 ▲"></p>
<h2 id="❒-Flex-內層屬性"><a href="#❒-Flex-內層屬性" class="headerlink" title="❒ Flex 內層屬性"></a>❒ Flex 內層屬性</h2><h3 id="▷-flex"><a href="#▷-flex" class="headerlink" title="▷ flex"></a>▷ flex</h3><p><code>flex</code> 為 <code>flex-grow</code>、<code>flex-shrink</code>、<code>flex-basis</code> 的縮寫。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">flex</span>: flex-grow flex-shrink flex-basis;</span><br></pre></td></tr></table></figure>

<h3 id="▷-flex-grow-伸展比"><a href="#▷-flex-grow-伸展比" class="headerlink" title="▷ flex-grow 伸展比"></a>▷ flex-grow 伸展比</h3><p>子元素依比例伸展分配剩餘空間，在「 父元素空間充足時會有影響 」，預設為 0。</p>
<ul>
<li><code>flex-grow: 0;</code> 預設，不會將空間分配給子元素。</li>
<li><code>flex-grow: 1;</code> 子元素會依比例進行伸展。</li>
<li><a href="https://codepen.io/echocarriet/pen/dyGBJEB">CodePen 範例</a></li>
</ul>
<h3 id="▷-flex-shrink-收縮比"><a href="#▷-flex-shrink-收縮比" class="headerlink" title="▷ flex-shrink 收縮比"></a>▷ flex-shrink 收縮比</h3><p>子元素的<strong>壓縮</strong>比例分配 ， 在「 父完素空間不足時會有影響 」，預設為 1。</p>
<ul>
<li><code>flex-shrink: 0;</code> 不會被壓縮。</li>
<li><code>flex-shrink: 1;</code> 預設，會被壓縮。</li>
<li><a href="https://codepen.io/echocarriet/pen/VweJrdQ">CodePen 範例</a></li>
</ul>
<h3 id="▷-flex-basis-預設大小"><a href="#▷-flex-basis-預設大小" class="headerlink" title="▷ flex-basis 預設大小"></a>▷ flex-basis 預設大小</h3><p>子元素預設被分配到的空間，預設為 auto。<br><a href="https://codepen.io/echocarriet/pen/VweJrdQ">CodePen 範例</a></p>
<h3 id="▷-order-排序"><a href="#▷-order-排序" class="headerlink" title="▷ order 排序"></a>▷ order 排序</h3><p>可改變子元素的排列順序，整數或負數皆可，數字越小排序越前。<br><a href="https://codepen.io/echocarriet/pen/rNvLZoo">Codepen 範例</a></p>
<h3 id="▷-align-self-單一個物件的次軸對齊"><a href="#▷-align-self-單一個物件的次軸對齊" class="headerlink" title="▷ align-self 單一個物件的次軸對齊"></a>▷ align-self 單一個物件的次軸對齊</h3><p>可調整子元素在次軸的對齊位置 ( 向 <code>align-items</code> )，如果已在父層下 <code>align-items</code>，但要對子層其中一個子元素調整對齊位置，可在那個子元素下 <code>align-self</code> 。<br><a href="https://codepen.io/echocarriet/pen/NWMrOWy">CodePen 範例</a></p>
<p><strong>屬性值：</strong></p>
<ul>
<li><code>auto | flex-start | flex-end | center | baseline | stretch</code></li>
</ul>
<h2 id="❒-Flex-運算"><a href="#❒-Flex-運算" class="headerlink" title="❒ Flex 運算"></a>❒ Flex 運算</h2><h3 id="01-父層寬度為-800px，子元素們寬度各為-300px-600px-100px，寬度依照比例來算會是多少呢"><a href="#01-父層寬度為-800px，子元素們寬度各為-300px-600px-100px，寬度依照比例來算會是多少呢" class="headerlink" title="01. 父層寬度為 800px，子元素們寬度各為 300px,600px,100px，寬度依照比例來算會是多少呢 ?"></a>01. 父層寬度為 800px，子元素們寬度各為 300px,600px,100px，寬度依照比例來算會是多少呢 ?</h3><p><strong>依照比例來算 :</strong></p>
<ul>
<li><code>.box1</code> : 800 px * ( 300 px &#x2F;1000 px ) &#x3D; 240 px</li>
<li><code>.box2</code> : 800 px * ( 600 px &#x2F;1000 px ) &#x3D; 480 px</li>
<li><code>.box3</code> : 800 px * ( 100 px &#x2F;1000 px ) &#x3D; 80 px<br><a href="https://codepen.io/echocarriet/pen/BajgNZw">CodePen 範例</a></li>
</ul>
<h2 id="❒-資料來源"><a href="#❒-資料來源" class="headerlink" title="❒ 資料來源"></a>❒ 資料來源</h2><ul>
<li><a href="https://ithelp.ithome.com.tw/articles/10208741">Flex 空間分配 flex-grow &#x2F; flex-shrink &#x2F; flex-basis</a></li>
<li>六角文章 - <a href="https://w3c.hexschool.com/flexbox/9883b0fb">flex-basis、flex-grow、flex-shrink 屬性介紹</a></li>
<li><a href="https://w3c.hexschool.com/flexbox/c3847835">align-self 屬性介紹</a></li>
<li><a href="https://www.casper.tw/css/2017/07/21/css-flex/#align-self">圖解：CSS Flex 屬性一點也不難 &#x2F; align-self</a></li>
<li>Flex 遊戲<ul>
<li><a href="https://hexschool.github.io/flexbox-pirate/index.html#/">Flex pirate 新手關卡</a></li>
<li><a href="https://flexboxfroggy.com/#zh-tw">Flex 青蛙</a></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>HTML&amp;CSS</category>
      </categories>
      <tags>
        <tag>2022年iThome鐵人賽</tag>
        <tag>flex</tag>
      </tags>
  </entry>
  <entry>
    <title>Day29 | localStorage 瀏覽器資料儲存</title>
    <url>/javascript/20230402/3423653197/</url>
    <content><![CDATA[<h2 id="❒-什麼是-localStorage"><a href="#❒-什麼是-localStorage" class="headerlink" title="❒ 什麼是 localStorage ?"></a>❒ 什麼是 localStorage ?</h2><ul>
<li>瀏覽器裡面的資料，可從 chrome 開發者工具 &#x2F; Application 中的 Storage 查看。<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20221014/20119743yEOG4sHrli.png" alt="Chrome 開發者工具 Application 中的 Storage 截圖"></li>
</ul>
<h2 id="❒-setItem、getItem-基本操作"><a href="#❒-setItem、getItem-基本操作" class="headerlink" title="❒  setItem、getItem 基本操作"></a>❒  setItem、getItem 基本操作</h2><p><code>setItem</code> : 可把值帶入 Local Storage 的 <code>Key</code> 與 <code>Value</code> 內。</p>
<p><code>getItem</code> : 可把 Local Storage 內的 <code>Key</code> 與 <code>Value</code> 值取出來。</p>
<h3 id="➊-Chrome-開發者工具查看-localStorage"><a href="#➊-Chrome-開發者工具查看-localStorage" class="headerlink" title="➊ Chrome 開發者工具查看 localStorage"></a>➊ Chrome 開發者工具查看 localStorage</h3><p><img src="https://ithelp.ithome.com.tw/upload/images/20221014/20119743LcvIxNEQ8i.png" alt="開發者工具localStorage位置"></p>
<h3 id="➋-如何在-Local-Storage-中帶入-Key-與-Value-的值"><a href="#➋-如何在-Local-Storage-中帶入-Key-與-Value-的值" class="headerlink" title="➋ 如何在 Local Storage 中帶入 Key 與 Value 的值 ?"></a>➋ 如何在 Local Storage 中帶入 Key 與 Value 的值 ?</h3><p> <strong>語法：</strong> <code>localStorage.setItem(&#39;key值&#39; , &#39;value值&#39;);</code></p>
<ul>
<li><p>使用 <code>setItem</code> 可以分別把第一個值帶入 <code>Key</code> 裡，第二個值會帶入 <code>Value</code> 中。</p>
</li>
<li><p>下方範例，另外寫變數帶入 <code>localStorage.setItem(&#39;值1&#39; , 值2 );</code> 內。</p>
  <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str =<span class="string">&#x27;tom&#x27;</span>;</span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;myName&#x27;</span> , str);</span><br></pre></td></tr></table></figure>

<p>  <img src="https://ithelp.ithome.com.tw/upload/images/20221014/20119743l0vo4j6wkd.png" alt="Local Storage 中Key與Value 值"></p>
</li>
</ul>
<h3 id="➌-如何在-Local-Storage-中撈出-value-值"><a href="#➌-如何在-Local-Storage-中撈出-value-值" class="headerlink" title="➌ 如何在 Local Storage 中撈出 value 值 ?"></a>➌ 如何在 Local Storage 中撈出 value 值 ?</h3><p> <strong>語法：</strong> <code>localStorage.getItem(&#39;key值&#39;);</code></p>
<ul>
<li><p>當中的值為 Local Storage 中的 <code>Key</code> ，填入後可撈出 <code>Value</code> 。</p>
  <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str =<span class="string">&#x27;tom&#x27;</span>;</span><br><span class="line"><span class="comment">//使用setItem把 key &amp; value 值帶入</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;myName&#x27;</span> , str); </span><br><span class="line"></span><br><span class="line"><span class="comment">//這邊於前方加入 console.log 包裹，方便查看撈出的值是否為 tom</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;myName&#x27;</span>)); </span><br></pre></td></tr></table></figure>

<p>  <img src="https://ithelp.ithome.com.tw/upload/images/20221014/20119743s2mJUdplPk.png" alt="開發者工具截圖"></p>
</li>
</ul>
<h3 id="範例-1"><a href="#範例-1" class="headerlink" title="範例 1"></a>範例 1</h3><ol>
<li>輸入文字到 <code>.texClass</code> 文字框內</li>
<li>點擊按鈕會把文字帶入到開發者工具 Local Storage 的 value 內。</li>
<li>按下點擊呼叫名字的按鈕，會出現上方輸入文字框內的文字。</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>請輸入你的名字<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;texClass&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btnClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;點擊&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btnCall&quot;</span> <span class="attr">value</span>=<span class="string">&quot;點擊呼叫名字&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> texClass = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.texClass&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> btnClass = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.btnClass&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> btnCall = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.btnCall&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//監聽 click</span></span><br><span class="line">btnClass.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, showName);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showName</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> nameVal = texClass.<span class="property">value</span>;</span><br><span class="line">  <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;myName&#x27;</span>, nameVal); <span class="comment">//key為myName, value為input輸入的文字</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//監聽 btnCall</span></span><br><span class="line">btnCall.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="comment">//上方帶入key為myName這個值，這邊使用key為myNamekey的值撈出它的 value</span></span><br><span class="line">  <span class="keyword">const</span> texname = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;myName&#x27;</span>);</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;我的名字為&#x27;</span> + texname);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="❒-透過-JSON-parse、JSON-stringify-來編譯資料"><a href="#❒-透過-JSON-parse、JSON-stringify-來編譯資料" class="headerlink" title="❒ 透過 JSON.parse、JSON.stringify 來編譯資料"></a>❒ 透過 JSON.parse、JSON.stringify 來編譯資料</h2><h3 id="➊-localstorage-只會保存-string-資料，所以需學下方兩點"><a href="#➊-localstorage-只會保存-string-資料，所以需學下方兩點" class="headerlink" title="➊ localstorage 只會保存 string 資料，所以需學下方兩點"></a>➊ localstorage 只會保存 string 資料，所以需學下方兩點</h3><ol>
<li>將 array 轉為 string → <code>JSON.stringify()</code><ul>
<li><code>localStorage.setItem(&quot;值1&quot;,JSON.stringify(值2));</code></li>
<li><strong>Local Storage 只能存放字串，所以要利用 <code>JSON.stringify</code> 把陣列轉成字串。</strong></li>
<li>當我們要存資料到 Local Storage 時，不論是 JSON 或 object 都須轉為 string 。</li>
</ul>
</li>
<li>將 string 轉為 array → <code>JSON.parse()</code><ul>
<li><code>JSON.parse(localStorage.getItem(&quot;值&quot;));</code></li>
<li><strong>Local Storage 取出的字串，使用 <code>JSON.parse</code> 把字串解析成陣列可讀取的資料。</strong></li>
<li>從資料庫或是 Local Storage 撈出資料基本上都會是 string 格式，需要把它變 JSON 格式就須搭配 <code>JSON.parse()</code>，這樣我們才可透過 array 格式取出資料內的值。</li>
</ul>
</li>
<li>可參考 To do list 範例 <a href="https://codepen.io/echocarriet/pen/WNOZmyy">Codepen</a>。</li>
</ol>
<h3 id="➋-將-array-轉為-string-amp-string-轉為-array"><a href="#➋-將-array-轉為-string-amp-string-轉為-array" class="headerlink" title="➋ 將 array 轉為 string &amp; string 轉為 array"></a>➋ 將 array 轉為 string &amp; string 轉為 array</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// array 轉為 string </span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;key名稱&quot;</span>,<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(value值));</span><br><span class="line"></span><br><span class="line"><span class="comment">// string 轉為 array</span></span><br><span class="line"><span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;key名稱&quot;</span>));</span><br></pre></td></tr></table></figure>

<h3 id="範例-1-為什麼要把-array-轉為-string"><a href="#範例-1-為什麼要把-array-轉為-string" class="headerlink" title="範例 1. 為什麼要把 array 轉為 string"></a>範例 1. 為什麼要把 array 轉為 string</h3><p>① <strong>直接把 array 帶入 Local Storage 發現陣列資料以字串方式呈現</strong></p>
<ul>
<li><p>使用 Local Storage 會自動把 array 轉為 string 的內容，如果想把變數 farm 的陣列顯示在 value 上，這時就需要把陣列字串化 ( array → string ) 才能顯示在 value 上。</p>
  <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> farm = [</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attr">farmer</span>:<span class="string">&#x27;傑森&#x27;</span></span><br><span class="line"> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 沒把陣列轉字串，value 只出現 [object Object]</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;farmItem&#x27;</span>,farm);  </span><br></pre></td></tr></table></figure>

<p>  <img src="https://ithelp.ithome.com.tw/upload/images/20221014/20119743fhhNS7oO2I.png" alt="開發者工具截圖"></p>
</li>
</ul>
<p>② <strong>試著把陣列資料撈出並查詢是哪種型別</strong></p>
<ul>
<li><p>最後使用撈出 farm 陣列中第一筆資料，發現 <code>undefined</code> ，這時可以使用  <code>console.log(typeof(getData));</code> 查詢 getData 的型別，發現是 string 而非 array。</p>
  <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> farm = [</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attr">farmer</span>:<span class="string">&#x27;傑森&#x27;</span></span><br><span class="line"> &#125;</span><br><span class="line">];</span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;farmItem&#x27;</span>, farm); <span class="comment">//把值帶入 Local Storage的Key與Value 內。</span></span><br><span class="line"><span class="keyword">const</span> getData = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;farmItem&#x27;</span>); <span class="comment">//取出key名為farmItem的value值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(getData[<span class="number">0</span>].<span class="property">farmer</span>); <span class="comment">//撈出陣列中第一筆農夫資料，發現undefined</span></span><br></pre></td></tr></table></figure>

<p>  <img src="https://ithelp.ithome.com.tw/upload/images/20221014/20119743BVPEHOFezI.png" alt="開發者工具截圖"></p>
</li>
</ul>
<p>③ <strong>把陣列字串化，即可把 key 與 value 值帶入 Local Storage 內</strong></p>
<p>Local Storage 只能存放字串，所以要利用 <code>JSON.stringify</code> 把陣列轉成字串。</p>
<ul>
<li><p>把 <code>farm</code> 的陣列資料使用 <code>JSON.stringify</code> 編譯過後，開發者工具中的 Console 從 <code>undefined</code> 變 <code>[&#123;&quot;farmer&quot;:&quot;傑森&quot;&#125;]</code> ，這時就可使用 <code>setItem</code> 帶入 key 與 value 的值。從開發者工具的 Application 觀看 value 值也從 <code>[object ,Object]</code> 變 <code>[&#123;&quot;farmer&quot;:&quot;傑森&quot;&#125;]</code> ，陣列字串化成功 !</p>
  <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> farm = [</span><br><span class="line">    &#123;<span class="attr">farmer</span>:<span class="string">&#x27;傑森&#x27;</span>&#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> farmString = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(farm); <span class="comment">//把array字串化</span></span><br><span class="line"><span class="comment">//console.log(farmString);</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;farmItem&#x27;</span>,farmString);</span><br></pre></td></tr></table></figure>

<p>  <img src="https://ithelp.ithome.com.tw/upload/images/20221014/20119743R2m5MQ7XaJ.png" alt="截圖"><br>  <img src="https://ithelp.ithome.com.tw/upload/images/20221014/20119743Ja8iK56270.png" alt="截圖"></p>
</li>
</ul>
<p>④ <strong>撈出 Local Storage 的 value 值</strong></p>
<p>使用 <code>JSON.parse</code> 把字串解析成陣列可讀取的資料。</p>
<ul>
<li><p>先使用 <code>getItem</code> 取出 key 的值，再使用 <code>JSON.parse</code> 把字串解析成陣列可讀的資料 → 物件 ( JSON 格式 )，就可以正常的顯示 farm 陣列中的資料。</p>
</li>
<li><p><code>console.log(typeof(getDataArr));</code> 查詢從 string 變 object ，為 JSON 格式。這樣就可以正常讀取 var farm 陣列中的資料，這邊用 <code>console.log(getDataArr[0].farmer);</code> 查詢第一筆農夫的資料，成功 !</p>
  <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> farm = [</span><br><span class="line">    &#123;<span class="attr">farmer</span>:<span class="string">&#x27;傑森&#x27;</span>&#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> farmString = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(farm); <span class="comment">//把array字串化</span></span><br><span class="line"><span class="comment">//console.log(farmString);</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;farmItem&#x27;</span>,farmString); <span class="comment">//把值帶入key與value</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getData = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;farmItem&#x27;</span>); <span class="comment">//取出 key名為farmItem的value值</span></span><br><span class="line"><span class="keyword">const</span> getDataArr = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(getData); <span class="comment">//把getData從字串變陣列</span></span><br><span class="line"><span class="comment">//console.log(typeof(getDataArr)); 查詢var getData型別</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(getDataArr[<span class="number">0</span>].<span class="property">farmer</span>); </span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="❒-data-透過-dataset-讀取自訂資料"><a href="#❒-data-透過-dataset-讀取自訂資料" class="headerlink" title="❒ data-* 透過 dataset 讀取自訂資料"></a>❒ <code>data-*</code> 透過 dataset 讀取自訂資料</h2><ul>
<li><code>data-*</code> 中 <code>*</code> 號可換成自訂名稱，寫於 HTML 中，<ul>
<li>監聽時，可使用 <code>e.target.dataset.*</code> 讀取資料。</li>
</ul>
</li>
<li>自訂標籤可以與資料做綁定。</li>
<li>以 ul li 清單標籤舉例，可以於 li 內設定 <code>data-*</code> ，並在資料庫做設定說第幾筆資料要做刪除或其他動作。</li>
</ul>
<h3 id="範例-1-1"><a href="#範例-1-1" class="headerlink" title="範例 1"></a>範例 1</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-num</span>=<span class="string">&quot;0&quot;</span> <span class="attr">data-dog</span>=<span class="string">&quot;3&quot;</span> <span class="attr">class</span>=<span class="string">&quot;listli&quot;</span>&gt;</span>卡斯伯<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>程式碼中綁定了 <code>data-num</code> 與 <code>data-dog</code> ，可於開發者工具讀取者些 <code>data-*</code> 資料 → <code>document.querySelector(&#39;.list li&#39;).dataset;</code></p>
</li>
<li><p>也可以查詢單個 <code>data-*</code> 資料，以查詢卡斯伯有幾隻狗為例 → <code>document.querySelector(&#39;.list li&#39;).dataset.dog;</code><br>  <img src="https://ithelp.ithome.com.tw/upload/images/20221014/20119743wJqBR2zSsw.png" alt="截圖"></p>
  <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> list = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.list li&#x27;</span>);</span><br><span class="line">list.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, showTex);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showTex</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> num = e.<span class="property">target</span>.<span class="property">dataset</span>.<span class="property">num</span>;</span><br><span class="line">  <span class="keyword">const</span> dog = e.<span class="property">target</span>.<span class="property">dataset</span>.<span class="property">dog</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;農夫編號為&#x27;</span> + num);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;農夫養了&#x27;</span> + dog + <span class="string">&#x27;隻狗。&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="❒-dataset、array-運用"><a href="#❒-dataset、array-運用" class="headerlink" title="❒ dataset、array 運用"></a>❒ dataset、array 運用</h2><h3 id="範例-1-把-array-中的資料帶入-ul-中，於畫面顯示農夫名稱"><a href="#範例-1-把-array-中的資料帶入-ul-中，於畫面顯示農夫名稱" class="headerlink" title="範例 1. 把 array 中的資料帶入 ul 中，於畫面顯示農夫名稱"></a>範例 1. <strong>把 array 中的資料帶入 ul 中，於畫面顯示農夫名稱</strong></h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> farm = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">farmer</span>: <span class="string">&#x27;卡斯伯&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">farmer</span>: <span class="string">&#x27;小廝&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p><strong>把 li 資料帶入 ul 中</strong></p>
<ul>
<li><p>農場資料於 <code>farm</code> 陣列中。</p>
</li>
<li><p>使用 <code>forEach</code> 依序跑出陣列中農夫資料。<code>forEach</code> 的第一個參數為陣列中的每筆物件，第二個參數為索引值，索引值可搭配 <code>data-*</code> 使用。</p>
  <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> farm = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">farmer</span>: <span class="string">&#x27;卡斯伯&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">farmer</span>: <span class="string">&#x27;小廝&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">const</span> list = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.list&#x27;</span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">renderFarm</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  farm.<span class="title function_">forEach</span>(<span class="function">(<span class="params">i, num</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">    str += <span class="string">`&lt;li data-num=&quot;<span class="subst">$&#123;num&#125;</span>&quot;&gt;<span class="subst">$&#123;i.farmer&#125;</span>&lt;/li&gt;`</span></span><br><span class="line">  &#125;)</span><br><span class="line">  list.<span class="property">innerHTML</span> = str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">renderFarm</span>();</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>點擊 li ，印出對應農夫名稱 ( 使用 querySelector )</strong></p>
<ul>
<li><code>querySelector</code> 特性只會抓第一筆資料，這時可以選擇它的父層 ul 來做監聽。</li>
<li>指定父層 ul ，使用 e.target 查詢元素去查詢是點擊到 ul 還是 li，因為這邊是想要點擊 li 再做執行，所以可以使用 if 判斷式 → <code>if(e.target.nodeName !== &#39;LI&#39;)&#123;return;&#125;</code><ul>
<li><code>return</code> 可以回傳數值，也可以中斷 function 不執行後方的東西。</li>
<li>可使用 <code>e.target.nodeName</code> 查詢點擊的節點，這邊可使用 <code>console.log(e.target.nodeName)</code> 查看。</li>
</ul>
</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> farm = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">farmer</span>: <span class="string">&#x27;卡斯伯&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">farmer</span>: <span class="string">&#x27;小廝&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">const</span> list = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.list&#x27;</span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">renderFarm</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  farm.<span class="title function_">forEach</span>(<span class="function">(<span class="params">i, num</span>) =&gt;</span> &#123;</span><br><span class="line">    str += <span class="string">`&lt;li data-num=&quot;<span class="subst">$&#123;num&#125;</span>&quot;&gt;<span class="subst">$&#123;i.farmer&#125;</span>&lt;/li&gt;`</span></span><br><span class="line">  &#125;)</span><br><span class="line">  list.<span class="property">innerHTML</span> = str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">renderFarm</span>();</span><br><span class="line"></span><br><span class="line">list.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (e.<span class="property">target</span>.<span class="property">nodeName</span> !== <span class="string">&#x27;LI&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// renderFarm()中有植入 data-num 使用此方式找到點擊到的農夫位於第幾個索引</span></span><br><span class="line">  <span class="keyword">let</span> isFarmer = e.<span class="property">target</span>.<span class="property">dataset</span>.<span class="property">num</span>;</span><br><span class="line">  <span class="comment">// farm[索引值].farmer 可顯示出點擊到的農夫名稱</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(farm[isFarmer].<span class="property">farmer</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="❒-splice-刪除陣列資料"><a href="#❒-splice-刪除陣列資料" class="headerlink" title="❒ splice 刪除陣列資料"></a>❒ splice 刪除陣列資料</h2><ul>
<li>於陣列中刪除指定資料</li>
<li><code>splice(參數1, 參數2)</code><ul>
<li><code>參數 1</code> : 起始位置。</li>
<li><code>參數 2</code> : 要往後刪除幾筆資料。( 從起始位置開始往後刪除 )</li>
</ul>
</li>
</ul>
<h3 id="範例-1-刪除變數-colors-中的-black-與-red-資料"><a href="#範例-1-刪除變數-colors-中的-black-與-red-資料" class="headerlink" title="範例 1. 刪除變數 colors 中的 black 與 red 資料"></a>範例 1. 刪除變數 colors 中的 black 與 red 資料</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> colors =[<span class="string">&quot;black&quot;</span> , <span class="string">&quot;red&quot;</span> , <span class="string">&quot;yellow&quot;</span>]</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>const colors =[&quot;black&quot; , &quot;red&quot; , &quot;yellow&quot;]</code> 中，第 0 筆資料為 black，第 1 筆資料為 red，第 2 筆資料為 yellow。</p>
  <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> colors =[<span class="string">&quot;black&quot;</span> , <span class="string">&quot;red&quot;</span> , <span class="string">&quot;yellow&quot;</span>]</span><br><span class="line"><span class="comment">//想要刪除索引 0 開始的兩筆資料</span></span><br><span class="line">colors.<span class="title function_">splice</span>(<span class="number">0</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最後使用 console.log 查詢可得到變數 colos 剩下 yellow 這筆資料。</span></span><br></pre></td></tr></table></figure>

<p>  <img src="https://ithelp.ithome.com.tw/upload/images/20221014/20119743M7TKwu8fqu.png" alt="截圖"></p>
</li>
</ul>
<h3 id="範例-2-把-array-中的資料顯示於-ul-內-amp-點擊-li-後刪除此-li"><a href="#範例-2-把-array-中的資料顯示於-ul-內-amp-點擊-li-後刪除此-li" class="headerlink" title="範例 2. 把 array 中的資料顯示於 ul 內 &amp; 點擊 li 後刪除此 li"></a>範例 2. 把 array 中的資料顯示於 ul 內 &amp; 點擊 li 後刪除此 li</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> farm = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">farmer</span>: <span class="string">&#x27;卡斯伯&#x27;</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="attr">farmer</span>: <span class="string">&#x27;小廝&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p><a href="https://codepen.io/echocarriet/pen/GRdzLyb">CodePen 範例</a></p>
<p><strong>Q1. 為什麼 <code>list.addEventListener</code><strong>裡面要再執行一次</strong><code>renderFarmer()</code> ?</strong></p>
<p>因為使用 <code>splice</code> 刪除 <code>farm</code> 陣列中的資料，需要再重新跑一次 <code>farm</code> 陣列中的資料並渲染在畫面中，不然畫面上只會顯示舊的未做刪除的資料。</p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li>六角學院：JS 入門篇 - 學徒的試煉筆記</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>2022年iThome鐵人賽</tag>
        <tag>localStorage</tag>
      </tags>
  </entry>
  <entry>
    <title>Day7 | 垂直置中的一些排版方式</title>
    <url>/html-css/20230327/3640475199/</url>
    <content><![CDATA[<h2 id="❒-flex-方式"><a href="#❒-flex-方式" class="headerlink" title="❒ flex 方式"></a>❒ flex 方式</h2><p><strong>適用：</strong><br>區塊與文字排版皆適用。</p>
<p><strong>作法：</strong></p>
<ul>
<li>父層使用 <code>display:flex;</code> 搭配 <code>align-items: center;</code> 可將子層 <code>.box</code> 垂直置中於父層 <code>.container</code>。</li>
<li>如需水平置中，可於父層 <code>.container</code> 再加上 <code>justify-content: center;</code>。</li>
<li><a href="https://codepen.io/echocarriet/pen/QWrdoRP">CodePen 範例</a></li>
</ul>
<h2 id="❒-偽元素搭配-inline-block-vertical-align-方式"><a href="#❒-偽元素搭配-inline-block-vertical-align-方式" class="headerlink" title="❒ 偽元素搭配 inline-block + vertical-align 方式"></a>❒ 偽元素搭配 inline-block + vertical-align 方式</h2><p><strong>作法：</strong></p>
<ul>
<li>如果需要水平置中可於父層加上 <code>text-align: center;</code> ( 因為子層為 <code>inline-block</code> )。</li>
<li><a href="https://codepen.io/echocarriet/pen/XWqpGLd">CodePen 範例</a></li>
</ul>
<h2 id="❒-position-transform-方式"><a href="#❒-position-transform-方式" class="headerlink" title="❒ position + transform 方式"></a>❒ position + transform 方式</h2><p><strong>適用：</strong><br>區塊與文字排版皆適用。</p>
<p><strong>作法：</strong></p>
<ol>
<li><p>父層使用 <code>position: relative;</code>  子層使用 <code>position: absolute;</code> 讓子層以父層為對齊標地。</p>
</li>
<li><p>子層使用 <code>transform</code> 屬性的 <code>translate(X軸, Y軸)</code> 平移功能搭配 <code>top</code> 往下推 <code>50%</code> 距離，讓子物件置中。</p>
<ol>
<li><code>top:50%;</code> 讓子層物件上方與父層產生 <code>50%</code> 空間，這時物件還未垂直置中。</li>
<li><code>translate(0, -50%)</code> 讓物件 Y 軸向上移動 <code>50%</code> 自身高度，達到垂直置中。<br> <img src="https://ithelp.ithome.com.tw/upload/images/20220922/20119743x1Jqtzj5wP.jpg" alt="// translate-示意圖"></li>
</ol>
</li>
<li><p>如需水平置中，可調整「 <code>transform</code> 屬性的 <code>translate(-50%, -50%)</code> 」與「 <code>left:50%;</code> 」。</p>
<ol>
<li><code>left:50%;</code> 讓子層物件左方與父層產生 <code>50%</code> 空間。</li>
<li><code>translate(-50%, -50%)</code> 讓物件 X 軸向左移動 <code>50%</code> 自身寬度，達到水平置中。</li>
</ol>
</li>
<li><p><a href="https://codepen.io/echocarriet/pen/WNJRWGV">CodePen 範例</a></p>
</li>
</ol>
<h3 id="▷-關於-translateX-、-translateY-平移"><a href="#▷-關於-translateX-、-translateY-平移" class="headerlink" title="▷ 關於 translateX()、 translateY() 平移"></a>▷ 關於 translateX()、 translateY() 平移</h3><ul>
<li><code>translateX(單位或百分比, 單位或百分比)</code> 和 <code>translateY(單位或百分比, 單位或百分比)</code> ，可以用來平移元素，<code>()</code> 內可以為正值、負值。</li>
<li><code>translateX()</code>、 <code>translateY()</code> 可縮寫為 <code>translate(X軸, Y軸)</code> 。</li>
<li><code>translate(X軸百分比, Y軸百分比)</code> 的百分比單位是利用物件自身的尺寸作為 100%。</li>
</ul>
<h2 id="❒-搭配-margin-方式"><a href="#❒-搭配-margin-方式" class="headerlink" title="❒ 搭配 margin 方式"></a>❒ 搭配 margin 方式</h2><p><strong>適用：</strong><br>只適用於有明確尺寸的區塊。</p>
<p><strong>作法：</strong></p>
<ol>
<li>父層使用 <code>position: relative;</code>  子層使用 <code>position: absolute;</code> 讓子層以父層為對齊標地。</li>
<li>子層區塊將 <code>top</code> <code>bottom</code> 設為 <code>0</code> 搭配 <code>margin: auto;</code>。</li>
<li><a href="https://codepen.io/echocarriet/pen/ExLZJzQ">Codepen 範例</a></li>
</ol>
<h2 id="❒-參考資訊"><a href="#❒-參考資訊" class="headerlink" title="❒ 參考資訊"></a>❒ 參考資訊</h2><ul>
<li><a href="https://www.casper.tw/css/2015/01/16/css-magic/">CSS 5種垂直置中方法</a></li>
<li><a href="https://pjchender.dev/css/css-center-center/">[CSS] 垂直置中的方法</a></li>
</ul>
]]></content>
      <categories>
        <category>HTML&amp;CSS</category>
      </categories>
      <tags>
        <tag>2022年iThome鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>Day8 | Animation、Transition、Transform 動畫效果</title>
    <url>/html-css/20230327/3200009126/</url>
    <content><![CDATA[<h2 id="❒-Animation-、-Transition、Transform-差異"><a href="#❒-Animation-、-Transition、Transform-差異" class="headerlink" title="❒ Animation 、 Transition、Transform 差異"></a>❒ Animation 、 Transition、Transform 差異</h2><p><strong>Animation</strong></p>
<ul>
<li>需搭配關鍵影格 <code>@keyframes</code> 使用，因可定義多影格，所以適用較細微的動畫，</li>
<li>運作方式：不需事件觸發網頁加載就會執行。</li>
</ul>
<p><strong>Transform</strong></p>
<ul>
<li>可控制元素的移動、縮放、旋轉、傾斜。</li>
<li>運作方式：不需事件觸發網頁加載就會執行。</li>
<li>transition 可於 animation 中被當屬性運用。</li>
</ul>
<p><strong>Transition</strong></p>
<ul>
<li>Transition 只能定義開始和結束狀態，不適用較細微的動畫。</li>
<li>運作方式：需事件觸發動畫才會開始，動畫為一次性，無法重覆發生除非一再觸發。</li>
</ul>
<h2 id="❒-Animation-動畫"><a href="#❒-Animation-動畫" class="headerlink" title="❒ Animation 動畫"></a>❒ Animation 動畫</h2><h3 id="▷-Animation-結構"><a href="#▷-Animation-結構" class="headerlink" title="▷ Animation 結構"></a>▷ Animation 結構</h3><p><code>animation</code> 需搭配關鍵影格 <code>@keyframes</code> 使用。<code>@keyframes</code> 內部結構有兩種寫法：</p>
<ul>
<li><code>from</code> 與 <code>to</code> ：只能定義頭語尾的影格變化。</li>
<li><code>%</code> ：可以定義更多階段的影格變化。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*方式一：使用 @keyframes 定義，後面customname為自訂名稱，搭配 form to 頭尾的撰寫方式 */</span></span><br><span class="line"><span class="keyword">@keyframes</span> customname &#123;</span><br><span class="line">  <span class="comment">/* 定義每個階段的影格變化  */</span></span><br><span class="line">  <span class="selector-tag">from</span> &#123;</span><br><span class="line">    <span class="comment">/* 定義元素在該影格所套用的樣式 */</span></span><br><span class="line">    ..</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">to</span> &#123;</span><br><span class="line">    ..</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*方式二：使用 @keyframes 定義，後面customname為自訂名稱，搭配％的撰寫方式 */</span></span><br><span class="line"><span class="keyword">@keyframes</span> customname &#123;</span><br><span class="line">  <span class="comment">/* 定義每個階段的影格變化  */</span></span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    <span class="comment">/* 定義元素在該影格所套用的樣式 */</span></span><br><span class="line">    ..</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">50%</span> &#123;</span><br><span class="line">    ..</span><br><span class="line">  &#125;</span><br><span class="line"> <span class="number">100%</span> &#123;</span><br><span class="line">    ..</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="▷-animation-屬性"><a href="#▷-animation-屬性" class="headerlink" title="▷ animation 屬性"></a>▷ animation 屬性</h3><p>這邊只列出一些常用的屬性</p>
<ul>
<li><code>animation-name</code> → 要執行的 animation 名稱。</li>
<li><code>animation-duration</code> → 執行過程秒數。</li>
<li><code>animation-play-state</code> → 播放狀態，預設是 <code>running</code>。<ul>
<li>狀態可設定 <code>pause</code> 搭配 <code>:hover</code> 。</li>
</ul>
</li>
<li><code>animation-timing-function</code> → 動畫的加速速率。</li>
<li><code>animation-delay</code> → 延遲多少時間發動 animation。</li>
<li><code>animation-iteration-count</code> → 動畫要重複播放幾次。<ul>
<li>屬性值 <code>infinite</code> 為一直持續跑</li>
</ul>
</li>
<li><code>animation-fill-mode</code> → 動畫未播放或動畫完成時，要停在哪個影格 ( 呈現的樣子 )。<ul>
<li><code>none</code> 預設值，動畫執行前或之後不會對元素產生任何樣式。</li>
<li><code>forward</code> 停留在最後一個影格位置( 結束時的狀態 )。</li>
<li><code>backwards</code> 留在第一個影格位置 ( 開始時的狀態 )。</li>
<li><code>both</code> 擁有 <code>forward</code> 與 <code>backwards</code> 兩者功能，依據開始或結束決定呈現的狀態。</li>
</ul>
</li>
<li><code>animation-direction</code> → 是否要循環交替反向播放動畫。<ul>
<li><code>normal</code> 預設值，動畫正常播放</li>
<li><code>reverse</code> 動畫反向播放</li>
<li><code>alternate</code> 動畫在奇數時正向播放，偶數值反向播放。</li>
<li><code>alternate-reverse</code> 動畫在奇數時反向播放，偶數值正向播放。</li>
</ul>
</li>
</ul>
<h3 id="▷-Animation-使用方式"><a href="#▷-Animation-使用方式" class="headerlink" title="▷ Animation 使用方式"></a>▷ Animation 使用方式</h3><ol>
<li>建立影格 <code>@keyframes</code>，並自訂名稱<ol>
<li>有兩種撰寫方式，可看上方的「 Animation 結構 」。</li>
</ol>
</li>
<li><code>animation</code> 載入影格<ol>
<li><code>animation</code> 需對應一個 <code>@keyframes</code> 自訂名 ( <code>animation-name：@keyframes 自訂名;</code> )。</li>
<li>須包含兩個以上的屬性才能運作。</li>
</ol>
</li>
</ol>
<p>註 ：如果不想要使用 <code>animation-fill-mode:both;</code> ，可於 <code>@keyfarmes</code> 中的開始與結束數值寫一樣並搭配 <code>animation-iteration-count : infinite;</code>，就會很順的重複跑。</p>
<h3 id="▷-實作-1-Animation-使用-from-與-to-讓物件移至右方再回來原點"><a href="#▷-實作-1-Animation-使用-from-與-to-讓物件移至右方再回來原點" class="headerlink" title="▷ 實作 1. Animation 使用 from 與 to 讓物件移至右方再回來原點"></a>▷ 實作 1. Animation 使用 <code>from</code> 與 <code>to</code> 讓物件移至右方再回來原點</h3><p><a href="https://codepen.io/echocarriet/pen/xxjdpjq">CodePen 範例</a></p>
<h3 id="▷-實作-2-Animation-使用-讓物件繞一圈正方形"><a href="#▷-實作-2-Animation-使用-讓物件繞一圈正方形" class="headerlink" title="▷ 實作 2. Animation 使用 % 讓物件繞一圈正方形"></a>▷ 實作 2. Animation 使用 <code>%</code> 讓物件繞一圈正方形</h3><p><a href="https://codepen.io/echocarriet/pen/GRdmydB">CodePen 範例</a></p>
<h2 id="❒-Transition-轉場效果"><a href="#❒-Transition-轉場效果" class="headerlink" title="❒ Transition 轉場效果"></a>❒ Transition 轉場效果</h2><h3 id="▷-transition-屬性"><a href="#▷-transition-屬性" class="headerlink" title="▷ transition 屬性"></a>▷ transition 屬性</h3><ul>
<li><code>transition-duration</code> : 動畫播放的時間。</li>
<li><code>transition-timing-function</code>：動畫執行過程的速度變化。</li>
<li><code>transition-delay</code>：延遲多少時間再發動動畫。</li>
<li><code>transition-property</code>：要更精確地掌控，可定義哪些 CSS 屬性有轉場的動畫效果<ul>
<li><code>all</code> : 預設，所有 CSS 都要轉場。</li>
<li><code>none</code> : 沒有任何 CSS 要轉場。</li>
<li><code>property</code>：屬性值可以是要轉場的 CSS 屬性名稱，以逗號區隔，屬性名稱例如 <code>width</code>、<code>height</code>。</li>
</ul>
</li>
</ul>
<h3 id="▷-transition-timing-function-屬性們的效果"><a href="#▷-transition-timing-function-屬性們的效果" class="headerlink" title="▷ transition-timing-function 屬性們的效果"></a>▷ transition-timing-function 屬性們的效果</h3><ul>
<li><code>ease</code> : 緩慢開始 → 中間變快 → 慢慢結束。</li>
<li><code>linear</code>：從開始到結束的速度一致。</li>
<li><code>ease-in</code>：緩慢開始。</li>
<li><code>ease-out</code>：緩慢結束。</li>
<li><code>ease-in-out</code>：緩慢開始和緩慢的結束。</li>
<li><code>steps(int,start|end)</code>：逐格動畫，沒有過度效果，而是一幀一幀的變化，所以指定格數越多動畫看起來會越滑順。<ul>
<li>第一個參數 <code>int</code> 為指定間格數。</li>
<li>第二個參數有 <code>start|end</code> 可選，若選 <code>start</code> 表示開始值不動。</li>
</ul>
</li>
<li><code>cubic-bezier(n, n, n, n)</code>：為二次貝茲曲線，利用兩個控制點決定一個曲線，可搭配 <a href="http://cubic-bezier.com/">cubic-bezier.com</a> 來使用。<ul>
<li><code>n</code> 值可填 0 ~ 1 之間的數字。</li>
</ul>
</li>
</ul>
<p>詳細動畫效果可參考此篇文章 <a href="https://www.casper.tw/css/2013/08/24/css-transtion-speed/">CSS transition 各種速率</a></p>
<h3 id="▷-實作-1-Transition-轉場效果，hover-時物件寬度變大"><a href="#▷-實作-1-Transition-轉場效果，hover-時物件寬度變大" class="headerlink" title="▷ 實作 1. Transition 轉場效果，hover 時物件寬度變大"></a>▷ 實作 1. Transition 轉場效果，hover 時物件寬度變大</h3><p><a href="https://codepen.io/echocarriet/pen/vYjmdRw">CodePen 範例</a></p>
<h3 id="▷-實作-1-Transition-轉場效果使用-transition-property"><a href="#▷-實作-1-Transition-轉場效果使用-transition-property" class="headerlink" title="▷ 實作 1. Transition 轉場效果使用 transition-property"></a>▷ 實作 1. Transition 轉場效果使用 transition-property</h3><p><a href="https://codepen.io/echocarriet/pen/xxjdYjJ">CodePen 範例</a></p>
<ul>
<li>範例中使用 <code>transition-property: width;</code> ，明確指定只有寬度要轉場效果，可見滑鼠滑入時高度是沒有轉場效果的。</li>
</ul>
<h2 id="❒-Transform"><a href="#❒-Transform" class="headerlink" title="❒ Transform"></a>❒ Transform</h2><ul>
<li>可控制元素的旋轉、縮放、移動 等，但不適用「 行內元素 」。</li>
<li>transition 可於 animation 中被當屬性運用。</li>
</ul>
<h3 id="▷-Transform-屬性"><a href="#▷-Transform-屬性" class="headerlink" title="▷ Transform 屬性"></a>▷ Transform 屬性</h3><ul>
<li><code>translate</code> 移動：<ul>
<li>單位：百分比或尺寸值 ( px 等 )</li>
<li>屬性值：<code>translate(X軸, Y軸) | translateX() | translateY() | translateZ() | translate3d()</code></li>
<li><code>translateX()</code>、 <code>translateY()</code> 可縮寫為 <code>translate(X軸, Y軸)</code> 。</li>
</ul>
</li>
<li><code>scale</code> 縮放：<ul>
<li>單位：須為倍數</li>
<li>屬性值：<code>scaleX() | scaleY() | scaleZ() | scale3d()</code>。</li>
<li>X 軸與 Y 軸會以同倍率縮放。</li>
<li><a href="https://codepen.io/echocarriet/pen/RwyVyYJ">CodePen 範例</a></li>
</ul>
</li>
<li><code>rotate</code> 旋轉：<ul>
<li>單位：deg</li>
<li>屬性值：<code>rotateX() | rotateY() | rotateZ() | rotate3d()</code>。</li>
</ul>
</li>
<li><code>skew</code> 傾斜：<ul>
<li>單位：deg</li>
<li>屬性值：<code>skew(X軸, Y軸)</code>。</li>
</ul>
</li>
</ul>
<h2 id="❒-Animation-效果的套件"><a href="#❒-Animation-效果的套件" class="headerlink" title="❒ Animation 效果的套件"></a>❒ Animation 效果的套件</h2><h3 id="1-Animate-css-套件"><a href="#1-Animate-css-套件" class="headerlink" title="1. Animate.css 套件"></a>1. <a href="https://animate.style/">Animate.css</a> 套件</h3><h3 id="2-AOS-套件"><a href="#2-AOS-套件" class="headerlink" title="2. AOS 套件"></a>2. <a href="https://michalsnik.github.io/aos/">AOS</a> 套件</h3><h2 id="❒-動畫效果建議使用會佔據空間的屬性"><a href="#❒-動畫效果建議使用會佔據空間的屬性" class="headerlink" title="❒ 動畫效果建議使用會佔據空間的屬性"></a>❒ 動畫效果建議使用會佔據空間的屬性</h2><p>以 <code>opacity</code>、<code>transform</code>、<code>display</code>、<code>visibility</code> 屬性為例。</p>
<h3 id="▷-會佔據空間的屬性"><a href="#▷-會佔據空間的屬性" class="headerlink" title="▷ 會佔據空間的屬性"></a>▷ 會佔據空間的屬性</h3><ol>
<li><code>opacity</code></li>
<li><code>transform</code></li>
<li><code>visibility</code></li>
</ol>
<h3 id="▷-不會佔據空間的屬性"><a href="#▷-不會佔據空間的屬性" class="headerlink" title="▷ 不會佔據空間的屬性"></a>▷ 不會佔據空間的屬性</h3><ol>
<li><code>display</code></li>
</ol>
<h3 id="▷-為什麼建議使用會佔據空間的屬性？"><a href="#▷-為什麼建議使用會佔據空間的屬性？" class="headerlink" title="▷ 為什麼建議使用會佔據空間的屬性？"></a>▷ 為什麼建議使用會佔據空間的屬性？</h3><p>如果要做動畫效果會建議使用<strong>會佔據空間的屬性</strong>，這樣當某元素執行動畫效果時，不會影響其他元素的位置變得大家都在動，使用者體驗會比較好。</p>
<p><a href="https://codepen.io/echocarriet/pen/ExgPogb">Codepen 範例</a></p>
<h2 id="❒-參考資訊"><a href="#❒-參考資訊" class="headerlink" title="❒ 參考資訊"></a>❒ 參考資訊</h2><ul>
<li><a href="https://ithelp.ithome.com.tw/articles/10197303">Day27：小事之 Transition 與 Animation</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10200712">CSS動畫-Transition、Animation、Transform的分析比較</a></li>
<li><a href="https://www.w3schools.com/css/css3_animations.asp">W3school - CSS Animations</a></li>
<li><a href="https://www.casper.tw/development/2021/10/04/css-animation/">一個工具，帶你完整認識 CSS Animation</a></li>
<li><a href="https://www.casper.tw/css/2013/08/24/css-transtion-speed/">CSS transition 各種速率</a></li>
<li><a href="https://selflearningsuccess.com/css-transition/#Transition-property_%E6%8C%87%E5%AE%9A%E8%BD%89%E5%A0%B4%E7%9B%AE%E6%A8%99">CSS Transition屬性的4個操作</a></li>
<li>六角學院</li>
</ul>
]]></content>
      <categories>
        <category>HTML&amp;CSS</category>
      </categories>
      <tags>
        <tag>2022年iThome鐵人賽</tag>
        <tag>animation</tag>
        <tag>transition</tag>
        <tag>transform</tag>
      </tags>
  </entry>
  <entry>
    <title>Day9 | CSS 屬性 filter 的濾鏡效果</title>
    <url>/html-css/20230327/1892231840/</url>
    <content><![CDATA[<p>CSS 屬性 <code>filter</code> 的濾鏡效果，可套用於元素上，常用於圖片、背景、邊框。</p>
<h2 id="❒-drop-shadow-陰影效果"><a href="#❒-drop-shadow-陰影效果" class="headerlink" title="❒ drop-shadow 陰影效果"></a>❒ drop-shadow 陰影效果</h2><p><strong>語法：</strong> <code>filter: (drop-shadow(參數1 參數2 參數3 參數4))</code></p>
<p><code>參數1</code> 必填，陰影位置，水平與垂直距離。</p>
<p><code>參數2</code> 選填，陰影的模糊半徑</p>
<p><code>參數3</code> 選填，陰影的擴張半徑</p>
<p><code>參數4</code> 設定陰影的顏色，可使用 <code>rgba(值)</code>。</p>
<p><strong>範例：</strong><a href="https://codepen.io/echocarriet/pen/dyeRRaY">CodePen 程式碼</a></p>
<h2 id="❒-blur-高斯模糊"><a href="#❒-blur-高斯模糊" class="headerlink" title="❒ blur 高斯模糊"></a>❒ blur 高斯模糊</h2><p><strong>語法：</strong> <code>filter: blur(單位)</code></p>
<p><strong>單位：</strong> <code>px</code> 或是 <code>rem</code>，不接受百分比為單位。預設為 0，數值越高越模糊。</p>
<p><strong>範例：</strong> <a href="https://codepen.io/echocarriet/pen/PoejjXm">CodePen 程式碼</a></p>
<h2 id="❒-grayscale-灰階"><a href="#❒-grayscale-灰階" class="headerlink" title="❒ grayscale 灰階"></a>❒ grayscale 灰階</h2><p><strong>語法：</strong><code>filter: grayscale(單位)</code></p>
<p><strong>單位：</strong><code>％</code>。默認為 0，值為 0% ~ 100% 間，100% 元素會轉為灰色。</p>
<p><strong>範例：</strong><a href="https://codepen.io/echocarriet/pen/xxjrreK">CodePen 程式碼</a></p>
<h2 id="❒-hue-rotate-色相旋轉"><a href="#❒-hue-rotate-色相旋轉" class="headerlink" title="❒ hue-rotate 色相旋轉"></a>❒ hue-rotate 色相旋轉</h2><p><strong>語法：</strong><code>filter: hue-rotate(單位)</code></p>
<p><strong>單位：</strong> 預設 <code>0deg</code>，以<code>度(deg)</code> 為單位。</p>
<p><strong>範例：</strong> <a href="https://codepen.io/echocarriet/pen/jOxwwgp">CodePen 程式碼</a></p>
<h2 id="❒-invert-負片效果"><a href="#❒-invert-負片效果" class="headerlink" title="❒ invert 負片效果"></a>❒ invert 負片效果</h2><p><strong>語法：</strong> <code>filter: invert(單位)</code></p>
<p><strong>單位：</strong> 預設 0，小數點或百分比為單位，默認為 0%，值為 0% ~ 100% 間。</p>
<p><strong>範例：</strong> <a href="https://codepen.io/echocarriet/pen/abGwyzb">CodePen 程式碼</a></p>
<h2 id="❒-opacity-透明度"><a href="#❒-opacity-透明度" class="headerlink" title="❒ opacity 透明度"></a>❒ opacity 透明度</h2><p><strong>語法：</strong> <code>filter: opacity(單位)</code></p>
<p><strong>單位：</strong> 預設 1，小數點或百分比為單位。值為 0% ( 完全透明 ) ~ 100% 間 ( 原始狀態 )。</p>
<p><strong>範例：</strong> <a href="https://codepen.io/echocarriet/pen/VwxWzLK">CodePen 程式碼</a></p>
<h2 id="❒-saturate-飽和度"><a href="#❒-saturate-飽和度" class="headerlink" title="❒ saturate 飽和度"></a>❒ saturate 飽和度</h2><p><strong>語法：</strong> <code>filter: saturate(單位)</code></p>
<p><strong>單位：</strong> 預設 1，小數點或百分比為單位。值 0% 為完全不飽和， 100% 為原始狀態，超過 100% 為更高的飽和度。</p>
<p><strong>範例：</strong> <a href="https://codepen.io/echocarriet/pen/yLjXoYG">CodePen 程式碼</a></p>
<h2 id="❒-sepia-懷舊"><a href="#❒-sepia-懷舊" class="headerlink" title="❒ sepia 懷舊"></a>❒ sepia 懷舊</h2><p><strong>語法：</strong> <code>filter: sepia(單位)</code></p>
<p><strong>單位：</strong> 預設 0，小數點或百分比為單位。值為 0% ( 原始狀態 ) ~ 100% 間 ( 深褐色 )。</p>
<p><strong>範例：</strong> <a href="https://codepen.io/echocarriet/pen/JjvJyKY">CodePen 程式碼</a></p>
<h2 id="❒-contrast-對比度"><a href="#❒-contrast-對比度" class="headerlink" title="❒ contrast 對比度"></a>❒ contrast 對比度</h2><p><strong>語法：</strong> <code>filter: contrast(單位)</code></p>
<p><strong>單位：</strong> 預設 1，小數點或百分比為單位。值 0% 為全黑， 100% 為原始狀態，超過 100% 為更低的對比。</p>
<p><strong>範例：</strong> <a href="https://codepen.io/echocarriet/pen/zYjzdwx">CodePen 程式碼</a></p>
<h2 id="❒-brightness-亮度"><a href="#❒-brightness-亮度" class="headerlink" title="❒ brightness 亮度"></a>❒ brightness 亮度</h2><p><strong>語法：</strong> <code>filter: brightness(單位)</code></p>
<p><strong>單位：</strong> 預設 1，小數點或百分比為單位。值 0% 為全黑， 100% 為原始狀態，超過 100% 會越來越亮。</p>
<p><strong>範例：</strong> <a href="https://codepen.io/echocarriet/pen/xxjrLrZ">CodePen 程式碼</a></p>
<h2 id="❒-「-contrast-對比度、brightness-亮度-」組合"><a href="#❒-「-contrast-對比度、brightness-亮度-」組合" class="headerlink" title="❒ 「 contrast 對比度、brightness 亮度 」組合"></a>❒ 「 contrast 對比度、brightness 亮度 」組合</h2><p><strong>語法：</strong> <code>filter: contrast(單位) brightness(單位)</code></p>
<p><strong>範例：</strong> <a href="https://codepen.io/echocarriet/pen/ExLXvoP">CodePen 程式碼</a></p>
<h2 id="❒-filter-drop-shadow-與-box-shadow-差異"><a href="#❒-filter-drop-shadow-與-box-shadow-差異" class="headerlink" title="❒ filter:drop-shadow 與 box-shadow 差異"></a>❒ filter:drop-shadow 與 box-shadow 差異</h2><p><img src="https://ithelp.ithome.com.tw/upload/images/20220924/20119743vvg7Zi2gKj.png" alt="filter:drop-shadow 與 box-shadow 差異示意圖"></p>
<p><a href="https://codepen.io/echocarriet/pen/PoejjzZ">CodePen 範例</a></p>
<p>範例中的圖片皆為 png 檔，可見 <code>drop-shadow</code>  會依元素的內容產生陰影，而 <code>box-shadow</code>  則是以區塊的方式來產生。</p>
<h2 id="❒-參考資訊"><a href="#❒-參考資訊" class="headerlink" title="❒ 參考資訊"></a>❒ 參考資訊</h2><ul>
<li><a href="https://hsuchihting.github.io/css/20200610/3064004331/">CSS 筆記 - CSS Filter 濾鏡效果</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/filter">MDN - filter</a></li>
</ul>
]]></content>
      <categories>
        <category>HTML&amp;CSS</category>
      </categories>
      <tags>
        <tag>2022年iThome鐵人賽</tag>
        <tag>css濾鏡效果</tag>
      </tags>
  </entry>
  <entry>
    <title>Day6 | 淺談 Grid 排版</title>
    <url>/html-css/20230327/864635399/</url>
    <content><![CDATA[<p>grid 排版上類似表格，先於外層使用 row 與 column 畫出所需數量的列與欄格線，內層設定好區塊後再放置外層的格子中。</p>
<h2 id="❒-外層屬性"><a href="#❒-外層屬性" class="headerlink" title="❒ 外層屬性"></a>❒ 外層屬性</h2><ul>
<li>「 <code>grid-template-rows|columns</code> 」與「 <code>grid-auto-rows|columns</code> 」擇一使用。</li>
</ul>
<p><strong>屬性：</strong></p>
<ul>
<li><code>display</code><ul>
<li>屬性值為 <code>grid</code>。</li>
</ul>
</li>
<li><code>grid-template-rows</code> 設定格線列<ul>
<li>屬性值可為<code>百分比</code>、<code>px</code>、<code>fr</code>。</li>
</ul>
</li>
<li><code>grid-template-columns</code> 設定格線欄<ul>
<li>屬性值可為<code>百分比</code>、<code>px</code>、<code>fr</code>。</li>
</ul>
</li>
<li><code>grid-auto-rows</code></li>
<li><code>grid-auto-columns</code></li>
<li><code>grid-template-area</code> ：需搭配內層屬性 <code>grid-area</code>。<ul>
<li>屬性值：設定區塊位置，把內層自訂名稱 <code>grid-area</code> 屬性值帶入，像排格子一樣。</li>
<li>屬性值中如果要產生空白也可使用 <code>.</code>。<a href="https://codepen.io/echocarriet/pen/NWMdqZY">CodePen 範例</a></li>
</ul>
</li>
<li><code>grid-auto-flow</code> 可控制主軸為平行或垂直。<ul>
<li>屬性值：<code>row</code>、<code>column</code>。</li>
</ul>
</li>
<li><code>justify-items</code>、<code>justify-content</code>、<code>align-content</code>：與 flex 用法一樣。</li>
<li><code>grid-gap</code>、<code>grid-column-gap</code>、<code>grid-row-gap</code> : 格線水平與垂直間隔。</li>
</ul>
<h3 id="▷-grid-格線單位-fr"><a href="#▷-grid-格線單位-fr" class="headerlink" title="▷ grid 格線單位 fr"></a>▷ grid 格線單位 fr</h3><ul>
<li><code>fr</code> 為 grid 的格線單位，分數的部分需使用 <code>fr</code> 為單位。</li>
<li><code>grid-template-columns: 2fr 2fr 1fr 1fr;</code> 為 2&#x2F;6 2&#x2F;6 1&#x2F;6 1&#x2F;6 ( 分母 6 為 2+2+1+1 )。</li>
</ul>
<h3 id="▷-縮寫"><a href="#▷-縮寫" class="headerlink" title="▷ 縮寫"></a>▷ 縮寫</h3><ul>
<li><code>grid-template-rows|columns</code> 列欄屬性值相同時可使用 repeat，為 <code>repeat(次數, 格線)</code>。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 等同於 25% 25% 25% 25% */</span></span><br><span class="line"><span class="attribute">grid-template-rows</span>: <span class="built_in">repeate</span>(<span class="number">4</span>, <span class="number">25%</span>);</span><br><span class="line"><span class="attribute">grid-template-columns</span>: <span class="built_in">repeate</span>(<span class="number">4</span>, <span class="number">25%</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 同於 25% 25% 25% 100px */</span></span><br><span class="line"><span class="attribute">grid-template-rows</span>: <span class="built_in">repeate</span>(<span class="number">3</span>, <span class="number">25%</span>) <span class="number">100px</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="❒-內層屬性"><a href="#❒-內層屬性" class="headerlink" title="❒ 內層屬性"></a>❒ 內層屬性</h2><ul>
<li>「 <code>grid-area</code> 」與 「 <code>grid-row</code>、<code>grid-column</code> 」擇一使用，遇到多欄位可使用「 <code>grid-row</code>、<code>grid-column</code> 」比較方便，下方會有範例。</li>
</ul>
<p><strong>屬性：</strong></p>
<ul>
<li><code>grid-area</code> ：需搭配外層屬性 <code>grid-template-area</code> 。命名好自訂名稱後，帶入「 外層 <code>grid-template-area</code> 」 的中，也就是看內層的區塊要放到外層的哪些格子內。<ul>
<li>屬性值：自訂名，例 <code>grid-area: A1</code>，A1 為自訂名。</li>
</ul>
</li>
<li><code>grid-row</code><ul>
<li>屬性值：<code>從第幾條線開始/從第幾條線結束;</code>，例 <code>1/3</code> 即從第一條線開始到第三條線結束的區塊。</li>
<li>屬性值也可為負數 ( 倒數的意思 )，在外層沒有設定幾欄幾列時也可使用，例 <code>2/-3</code> 即從第二條線開始至倒數第三條線結束的區塊。</li>
<li>為 <code>grid-row-start</code>、<code>gird-row-end</code> 縮寫</li>
</ul>
</li>
<li><code>grid-column</code><ul>
<li>屬性值與 <code>grid-row</code> 一樣。</li>
<li>為 <code>grid-column-start</code>、<code>gird-column-end</code> 縮寫</li>
</ul>
</li>
<li><code>justify-self</code>、<code>align-self</code>：與 flex 用法一樣。</li>
</ul>
<p><img src="https://ithelp.ithome.com.tw/upload/images/20220921/201197431ZLxggarJG.jpg" alt="// grid-row|column 屬性值，線的概念"></p>
<h2 id="❒-實作"><a href="#❒-實作" class="headerlink" title="❒ 實作"></a>❒ 實作</h2><h3 id="▷-實作-1-grid-template-rows-columns-搭配-grid-area"><a href="#▷-實作-1-grid-template-rows-columns-搭配-grid-area" class="headerlink" title="▷ 實作 1. grid-template-rows|columns 搭配 grid-area"></a>▷ 實作 1. grid-template-rows|columns 搭配 grid-area</h3><p><a href="https://codepen.io/echocarriet/pen/QWrdwXd">CodePen 範例</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;AA&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;BB&quot;</span>&gt;</span>B<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;CC&quot;</span>&gt;</span>C<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">800px</span>;</span><br><span class="line">  <span class="attribute">outline</span>: <span class="number">2px</span> solid gray;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">25%</span> <span class="number">25%</span> <span class="number">25%</span> <span class="number">25%</span>;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">25%</span> <span class="number">25%</span> <span class="number">25%</span> <span class="number">25%</span>;</span><br><span class="line">  <span class="attribute">grid-template-areas</span>: </span><br><span class="line">  <span class="string">&#x27;B3 B3 B3 B1&#x27;</span></span><br><span class="line">  <span class="string">&#x27;B3 B3 B3 B1&#x27;</span></span><br><span class="line">  <span class="string">&#x27;B2 B2 B2 B1&#x27;</span></span><br><span class="line">  <span class="string">&#x27;B2 B2 B2 B1&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.AA</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#9dd3a8</span>;</span><br><span class="line">  <span class="attribute">grid-area</span>: B1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.BB</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ffad60</span>;</span><br><span class="line">  <span class="attribute">grid-area</span>: B2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.CC</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#d9d9f3</span>;</span><br><span class="line">  <span class="attribute">grid-area</span>: B3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://ithelp.ithome.com.tw/upload/images/20220921/20119743uuUzrRE5ai.jpg" alt="// 圖層拆解"></p>
<ul>
<li>外層使用 <code>grid-template-rows|columns</code> 分別設定要幾欄幾列。</li>
<li>內層自行命名要哪些區塊，這邊設定三個區塊 <code>.AA</code> <code>.BB</code> <code>.CC</code> 分別命名為 <code>B1</code> <code>B2</code> <code>B3</code>。</li>
<li>把命名的區塊帶回外層的 <code>grid-template-areas</code> 空間中，如上圖。<ul>
<li><p>注意：外層 <code>grid-template-areas</code> 中「 空間是不能分離的 」不然會無法顯示。如下，把列中第二排第三個 B3 改成 B1，就無法正常顯示囉！</p>
  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&#x27;B3 B3 B3 B1&#x27;</span><br><span class="line">&#x27;B3 B3 B1 B1&#x27;</span><br><span class="line">&#x27;B2 B2 B2 B1&#x27;</span><br><span class="line">&#x27;B2 B2 B2 B1&#x27;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="▷-實作-2-grid-auto-rows-columns-搭配-grid-row-column"><a href="#▷-實作-2-grid-auto-rows-columns-搭配-grid-row-column" class="headerlink" title="▷ 實作 2. grid-auto-rows|columns 搭配 grid-row|column"></a>▷ 實作 2. grid-auto-rows|columns 搭配 grid-row|column</h3><p><a href="https://codepen.io/echocarriet/pen/WNJGdqZ">Codepen 範例</a></p>
<ul>
<li>內層使用 <code>grid-row|column</code>，外層就可以不使用 <code>grid-template-areas</code>。</li>
<li>內層使用 <code>grid-row|column</code> 是可以讓內層區塊重疊的，如範例中 C 與 D 。</li>
<li>如果不想要使用 <code>grid-auto-rows|columns</code> 也可以使用 <code>grid-template-rows|columns</code> 自己先設定好要幾欄幾列。</li>
</ul>
<p><img src="https://ithelp.ithome.com.tw/upload/images/20220921/20119743jDEUPEpQJb.jpg" alt="// 示意圖"></p>
<h3 id="▷-實作-2-2-遇到很多欄列的組合"><a href="#▷-實作-2-2-遇到很多欄列的組合" class="headerlink" title="▷ 實作 2-2. 遇到很多欄列的組合"></a>▷ 實作 2-2. 遇到很多欄列的組合</h3><p><img src="https://ithelp.ithome.com.tw/upload/images/20220921/20119743r9k8M6DHbd.png" alt="示意圖"><br>&#x2F;&#x2F; 圖片出處：<a href="https://youtu.be/fYcz3FUqv7M">CSS GRID &#x2F; CSS格線好好玩【完整版】 | CSS教學 | CSS格線</a> ↑</p>
<ul>
<li>遇到很多欄列的組合，使用 「 <code>grid-template-rows|columns</code> 、<code>grid-template-area</code> 」搭配 <code>grid-area</code> 就會呈現上圖中密密麻麻的 <code>grid-template-area</code>，這時就可以改用 「 <code>grid-auto-rows|columns</code> 搭配 <code>grid-row|column</code> 」。</li>
</ul>
<h2 id="❒-使用-grid-auto-rows-columns-沒有指定欄列數，怎麼會產生格線？"><a href="#❒-使用-grid-auto-rows-columns-沒有指定欄列數，怎麼會產生格線？" class="headerlink" title="❒ 使用 grid-auto-rows|columns 沒有指定欄列數，怎麼會產生格線？"></a>❒ 使用 grid-auto-rows|columns 沒有指定欄列數，怎麼會產生格線？</h2><p>父層欄列都使用 <code>grid-auto-rows|columns</code> 屬性值為 1fr，沒有指定欄數，怎麼會產出格線？</p>
<ul>
<li>這是個<strong>隱形格線的概念：</strong>設定的格位<strong>超過</strong>既定格位，他就會自動產生新的格子。也就是父層欄列都設定了 auto，子層開始到結束的欄列如果超過父層的欄列，就會自動生成新的格子。</li>
</ul>
<h2 id="❒-參考資訊"><a href="#❒-參考資訊" class="headerlink" title="❒ 參考資訊"></a>❒ 參考資訊</h2><ul>
<li><a href="https://youtu.be/fYcz3FUqv7M">CSS GRID &#x2F; CSS格線好好玩【完整版】 | CSS教學 | CSS格線</a></li>
<li><a href="https://www.casper.tw/css/2017/03/22/css-grid-layout/#grid-gap-grid-column-gap-grid-row-gap">卡斯伯 - CSS Grid 屬性介紹</a></li>
<li>Grid 遊戲<ul>
<li><a href="https://codepip.com/games/grid-garden/">Grid 花園遊戲</a></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>HTML&amp;CSS</category>
      </categories>
      <tags>
        <tag>2022年iThome鐵人賽</tag>
        <tag>grid</tag>
      </tags>
  </entry>
</search>
