<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>安裝 VueCli 環境與環境中檔案說明</title>
    <url>/vue/20230327/3166448359/</url>
    <content><![CDATA[<h2 id="開始使用-Vue-Cli-相關指令"><a href="#開始使用-Vue-Cli-相關指令" class="headerlink" title="開始使用 Vue Cli | 相關指令"></a>開始使用 Vue Cli | 相關指令</h2><ul>
<li>查詢 Nodejs 版本 <code>node -v</code></li>
<li>查詢 npm 版本 <code>npm -v</code></li>
<li>建立專案 <code>vue create &#123;&#123; 專案名稱 &#125;&#125;</code></li>
<li>運行 Vue 開發環境 <code>npm run serve</code></li>
<li>編譯 Production 上線版本 <code>npm run build</code></li>
</ul>
<h2 id="Vue-Cli-準備流程"><a href="#Vue-Cli-準備流程" class="headerlink" title="Vue Cli 準備流程"></a>Vue Cli 準備流程</h2><ol>
<li>安裝 Node.js  ( 到 <a href="https://nodejs.org/en/">Node.js</a> 官網下載 LTS 版本，較穩定 )</li>
<li>安裝 Vue Cli 全域環境 ( 安裝完成後才能使用 Vue Cli 指令 )</li>
<li>建立 Vue 專案</li>
<li>開始開發 !</li>
</ol>
<h3 id="步驟-1-安裝-Node-js"><a href="#步驟-1-安裝-Node-js" class="headerlink" title="步驟 1. 安裝 Node.js"></a>步驟 1. 安裝 Node.js</h3><ol>
<li>到 <a href="https://nodejs.org/en/">Node.js</a> 官網下載 LTS 版本，較穩定。</li>
<li>windows 開啟命令提示字元，Mac 開啟終端機 → 執行 <code>node -v</code> 與 <code>npm -v</code> 查詢版本，有查到表成功。<ol>
<li>node 為運行的環境、npm 為套件管理的工具。</li>
</ol>
</li>
</ol>
<p>🗒️ <strong>筆者自用 | 電腦安裝 node.js 方式</strong></p>
<ul>
<li>mac 用 nvm 安裝 node.js。( 更換版本需使用 <code>nvm install v版本號</code>+ <code>nvm use v版本號</code>  ) <a href="https://titangene.github.io/article/nvm.html">參考文章</a></li>
<li>windows 使用 node.js 官網套件安裝。</li>
</ul>
<h3 id="步驟-2-安裝-Vue-Cli-全域環境"><a href="#步驟-2-安裝-Vue-Cli-全域環境" class="headerlink" title="步驟 2. 安裝 Vue Cli 全域環境"></a>步驟 2. 安裝 Vue Cli 全域環境</h3><p><a href="https://cli.vuejs.org/zh/guide/installation.html">Vue Cli 安裝文件 ( 中譯 )</a></p>
<p>‼️ 注意 : 下方全域安裝不是在專案位置。開啟終端機 ( 命令提示字元 ) 如下圖，再依下方步驟把指令貼入。 ( 在專案位置做安裝 … 會 error )。</p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E5%AE%89%E8%A3%9D%20Vue%20Cli%20%E7%92%B0%E5%A2%83%E8%88%87%E7%92%B0%E5%A2%83%E4%B8%AD%E6%AA%94%E6%A1%88%E8%AA%AA%E6%98%8E_01.png?alt=media&token=b1c70911-7886-4376-88bf-ada23e5222dd" alt="路徑 ▲"></p>
<p><strong>步驟 :</strong></p>
<ol>
<li><code>npm install -g @vue/cli</code> 貼到終端機。下方為 Mac 遇到的問題 :<ol>
<li>從 macOS Catalina 版開始，Mac 使用 zsh 做為預設登入 shell （ 終端機 ）。本來改回舊的預設 shell 但專案丟到 vscode 跑 npm run serve 時，它強迫我把預設換回 zsh，只好換回來。</li>
<li>zsh 要執行 <code>npm install -g @vue/cli</code> 會出現 error ，這時可加上 sudo → <code>sudo npm install -g @vue/cli</code>，輸入密碼後就可安裝了 ！</li>
</ol>
</li>
<li><code>vue -V</code> 查詢目前 Cli 版本，有查詢到代表安裝成功 !</li>
<li>到「步驟 2. 安裝 Vue Cli 全域環境」建立的是一個全域環境，表示在此電腦內都可以運行。</li>
<li>下方「步驟 3. 建立 Vue 專案」 開始做區域環境的設定，建立一個 Vue 專案資料夾。</li>
</ol>
<h3 id="步驟-3-建立-Vue-專案"><a href="#步驟-3-建立-Vue-專案" class="headerlink" title="步驟 3. 建立 Vue 專案"></a>步驟 3. 建立 Vue 專案</h3><p>Vue 官網路徑 :  基礎 &#x2F; <a href="https://cli.vuejs.org/zh/guide/creating-a-project.html#%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE">創建一個項目</a></p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E5%AE%89%E8%A3%9D%20Vue%20Cli%20%E7%92%B0%E5%A2%83%E8%88%87%E7%92%B0%E5%A2%83%E4%B8%AD%E6%AA%94%E6%A1%88%E8%AA%AA%E6%98%8E_02.png?alt=media&token=6a99d6a0-c2a0-4efa-8abe-052cc829676c" alt="Vue 文件中創建一個項目 ▲"></p>
<p><strong>三種創建形式 ( 擇一 ) :</strong></p>
<ol>
<li><p><strong>Vue create</strong> :  使用 vue cli 的形式來建立專案。 ( 課程中主要使用此方式 ) → <code>vue create 專案資料夾名稱</code></p>
</li>
<li><p>使用圖形化介面</p>
</li>
<li><p>拉取 2.x 模板 ( 舊版本 )</p>
</li>
</ol>
<hr>
<p><strong>安裝遇到的問題 :</strong></p>
<p><strong>更新 : windows 下方遇到的安裝問題，可改用 windows PowerShell 做操作，或使用下面方式。</strong></p>
<ul>
<li><p>windows 的命令提示字元要用管理員開啟才可 vue create 專案資料夾名稱。</p>
<ul>
<li><p>或者是搜尋 .vuerc 檔案 ( 路徑 :  C:\Users\WIN10.vuerc) → “useTaobaoRegistry”: false 改成 true。</p>
</li>
<li><p>或是參考 <a href="https://stackoverflow.com/questions/53934852/vue-cli-3-command-failed-npm-install-loglevel-error">stack overflow</a></p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E5%AE%89%E8%A3%9D%20Vue%20Cli%20%E7%92%B0%E5%A2%83%E8%88%87%E7%92%B0%E5%A2%83%E4%B8%AD%E6%AA%94%E6%A1%88%E8%AA%AA%E6%98%8E_03.png?alt=media&token=9fe7dc96-70e1-4cec-9dc6-a2ac9bde04a1" alt="錯誤訊息 ▲"></p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E5%AE%89%E8%A3%9D%20Vue%20Cli%20%E7%92%B0%E5%A2%83%E8%88%87%E7%92%B0%E5%A2%83%E4%B8%AD%E6%AA%94%E6%A1%88%E8%AA%AA%E6%98%8E_04.png?alt=media&token=feef9509-4e5c-4a9c-bc17-93fd7522b397" alt=".vuerc 檔案 ▲"></p>
</li>
</ul>
</li>
<li><p>MAC 電腦使用 nvm 安裝 node.js，記得使用 <code>nvm use v版本號</code> 切換 node 為最新版</p>
</li>
<li><p>windows 電腦可能遇到錯誤訊息 <code>Expected linebreaks to be &#39;LF&#39; but found &#39;CRLF&#39; linebreak-style</code>。</p>
<ul>
<li>解決辦法 : 專案中開啟 .eslintrc.js 於 reles 內加入 <code>&#39;linebreak-style&#39;: [&#39;error&#39;, &#39;windows&#39;]</code>。</li>
<li>可參考 <a href="https://www.notion.so/Vue-Cil-windows-CRLF-8b44b53996e147709c7055c7eea089c9">Vue Cil | 解決 windows 系統的換行符標準 CRLF 問題</a></li>
</ul>
</li>
<li><p>改 src 資料夾內的檔案都不需要 <code>npm run serve</code> 重啟，以外的都需要 <code>npm run serve</code> 重啟。</p>
</li>
</ul>
<h3 id="步驟-3-1-操作開始"><a href="#步驟-3-1-操作開始" class="headerlink" title="步驟 3-1. 操作開始"></a>步驟 3-1. <strong>操作開始</strong></h3><ol>
<li><p><code>cd 專案要儲存的路徑</code> ( 例如，專案要存在桌面 practiveVue 資料夾內，路徑如下 )</p>
<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E5%AE%89%E8%A3%9D%20Vue%20Cli%20%E7%92%B0%E5%A2%83%E8%88%87%E7%92%B0%E5%A2%83%E4%B8%AD%E6%AA%94%E6%A1%88%E8%AA%AA%E6%98%8E_05.png?alt=media&token=468fb644-cc77-40a0-8b6d-33d11a5dafb3" alt="路徑 ▲"></p>
</li>
<li><p><code>vue create 專案資料夾名稱</code> ( 在 practiveVue 資料夾內新增一個 project0605 專案 )</p>
<ul>
<li>輸入完指令會出現三個選項，</li>
<li>過程中如果選錯了，可按下 <code>Ctrl + c</code> 來中斷目前操作 ( 中斷終端機行為 )。</li>
</ul>
<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E5%AE%89%E8%A3%9D%20Vue%20Cli%20%E7%92%B0%E5%A2%83%E8%88%87%E7%92%B0%E5%A2%83%E4%B8%AD%E6%AA%94%E6%A1%88%E8%AA%AA%E6%98%8E_06.png?alt=media&token=f95550c8-063a-43c5-97a5-81cd325e4d60" alt="路徑 ▲"></p>
</li>
<li><p>輸入完 3-1.2 步驟的指令，會進入選項要做選取 :</p>
<ol>
<li><p><strong>Please pick a preset</strong> :</p>
<ul>
<li>default ([Vue3] babel, eslint)</li>
<li>default ([Vue2] babel, eslint)</li>
<li><code>Manually select features</code> 手動建立環境。</li>
</ul>
<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E5%AE%89%E8%A3%9D%20Vue%20Cli%20%E7%92%B0%E5%A2%83%E8%88%87%E7%92%B0%E5%A2%83%E4%B8%AD%E6%AA%94%E6%A1%88%E8%AA%AA%E6%98%8E_07.png?alt=media&token=c7fac4a8-a463-4a26-85a9-bcfa2d36ed19" alt="// 輸入指令後會出現三個預設選項 ▲"></p>
<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E5%AE%89%E8%A3%9D%20Vue%20Cli%20%E7%92%B0%E5%A2%83%E8%88%87%E7%92%B0%E5%A2%83%E4%B8%AD%E6%AA%94%E6%A1%88%E8%AA%AA%E6%98%8E_08.png?alt=media&token=08076cac-12b8-483d-ada8-ad0de11ad321" alt="// 老師的終端機，上方黃色框內的兩個是老師預先儲存的 ( 建立好的環境可以先儲存，之後就不須重新輸入 ) ▲"></p>
</li>
<li><p><strong>Check features needed for your project :</strong> ( 用空白鍵選取項目 )</p>
<ul>
<li><del><code>choose Vue version</code> : 可選擇 Vue 的版本 ( 要選擇 vue2 或其他版本都可在此選取 )</del><ul>
<li>目前 5.0.4 版本無此選項</li>
</ul>
</li>
<li><code>Babel</code> : 要把 ES 6 以後較新的版本編譯成大部分瀏覽器都可運行的 js</li>
<li>TypeScript : 當有需要使用 TypeScript  可選此</li>
<li>Progressive Web App (PWA) Support : 開發的網站是需要有 PWA 功能的選此</li>
<li><code>Router</code> : 會再獨立的章節進行介紹</li>
<li>Vuex : 是 Vue 資料狀態管理的工具，目前不會使用到</li>
<li><code>CSS Pre-processors</code> : 為 CSS 預處理器，後方實戰中會帶到</li>
<li><code>Linter / Formatter</code> : 是檢視程式碼品質的工具 ( 建議開啟 )</li>
<li>Unit Testing : 為測試工具</li>
<li>E2E Testing : 為測試工具</li>
</ul>
</li>
<li><p><strong>Choose a version of Vue.js that you want to start the project with ( Use arrow keys )</strong></p>
<ul>
<li><code>3.x</code> ( vue 3 版本 )</li>
<li>2.x</li>
</ul>
</li>
<li><p><strong>Use history mode for router? (Requires proper server setup for index fallback in production) (Y&#x2F;n) ?</strong> ( 選取 vue router 形式 )</p>
<ul>
<li><code>n</code> ( 為 Vue router 使用預設形式 )<br>  ( 在這個模式下你的 server 同樣要進行調整，這個調整這門課不會講到 )</li>
</ul>
</li>
<li><p><strong>Pick a CSS pre-processor (PostCSS, Autoprefixer and CSS Modules are supported by default): (Use arrow keys) ?</strong> ( CSS 預處理器要選擇哪個版本 )</p>
<ul>
<li><code>Sass/SCSS ( with node-sass )</code>   &#x2F; 選 node.js 版本</li>
<li>Less ( 無法跑 Bootstrap 的 Sass )</li>
<li>Stylus  ( 無法跑 Bootstrap 的 Sass )</li>
</ul>
</li>
<li><p><strong>Pick a linter &#x2F; formatter config: (Use arrow keys) ?</strong> ( linter 會影響 js 的撰寫風格 )</p>
<ul>
<li>老師推薦 ( 下兩項則一 )，老師用 airbnb 示範。<ul>
<li><code>ESLint + Airbnb config</code> ( 對 JS 有一定的掌握度，尤其 ES6 ES7 掌握度非常高可選此。它對各項細節要求都很高 )</li>
<li>ESLint + Standard config ( 對 JS 不是很有把握可選此 )</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>Pick additional lint features: (Press「space」 to select, 「a」 to toggle all, 「i」 to invert selection) ?</strong> ( 妳的 linter 是用哪種方式進行檢視 )</p>
<ul>
<li><code>Lint on save</code> 存檔時就進行檢視。</li>
<li>Lint and fix on commit</li>
</ul>
</li>
<li><p><strong>Where do you prefer placing config for Babel, ESLint, etc.? (Use arrow keys)</strong><br> 這些設定要獨立檔案的形式還使統一存在 package.json ? ( 看個人習慣 )</p>
<ul>
<li><code>In dedicated config files</code> ( 存在獨立檔案 ) _ 老師選此</li>
<li>In package.json ( 存在 package.json )</li>
</ul>
</li>
<li><p><strong>Save this as a preset for future projects? (y&#x2F;N)</strong><br> 需不需要把這些設定檔儲存起來</p>
<ul>
<li><code>N</code></li>
</ul>
</li>
</ol>
</li>
<li><p>成功安裝</p>
<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E5%AE%89%E8%A3%9D%20Vue%20Cli%20%E7%92%B0%E5%A2%83%E8%88%87%E7%92%B0%E5%A2%83%E4%B8%AD%E6%AA%94%E6%A1%88%E8%AA%AA%E6%98%8E_09.png?alt=media&token=ded1c593-2913-42ae-b53a-a0f4ff7e6a28" alt="成功安裝 ▲"></p>
</li>
<li><p>設定好後，把專案丟到 vscode ，開啟 vscode 終端機執行 <code>npm run serve</code>，就可把環境運行起來。<br>運行完後，會出現兩個連結 ( Local 、Network ) 按下其中一個就會開啟網頁。</p>
<ul>
<li>本地端開發可選擇 Local 。</li>
<li>當要把專案分享給其他人可選取 Network ，但須和伙伴處於同個網域下才能使用。</li>
</ul>
<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E5%AE%89%E8%A3%9D%20Vue%20Cli%20%E7%92%B0%E5%A2%83%E8%88%87%E7%92%B0%E5%A2%83%E4%B8%AD%E6%AA%94%E6%A1%88%E8%AA%AA%E6%98%8E_010.png?alt=media&token=f443073b-a32e-4d98-af9f-8cb35855428d"></p>
<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E5%AE%89%E8%A3%9D%20Vue%20Cli%20%E7%92%B0%E5%A2%83%E8%88%87%E7%92%B0%E5%A2%83%E4%B8%AD%E6%AA%94%E6%A1%88%E8%AA%AA%E6%98%8E_011.png?alt=media&token=d54c660a-9d03-4d9b-a59d-8e6cb7b49bad"></p>
<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E5%AE%89%E8%A3%9D%20Vue%20Cli%20%E7%92%B0%E5%A2%83%E8%88%87%E7%92%B0%E5%A2%83%E4%B8%AD%E6%AA%94%E6%A1%88%E8%AA%AA%E6%98%8E_012.png?alt=media&token=d5623568-27f6-470b-9060-fcb750a2bb09" alt="執行 npm run serve環境運行起來畫面 ▲"></p>
</li>
<li><p>接下來可把「六角學院 Vue 課程練習 API 申請」申請的 API 加入到環境變數中。 ( 課程最終挑戰部分 )</p>
<ol>
<li><p>於專案根目錄建立 .env 檔案，新增兩個環境變數</p>
<ul>
<li><code>VUE_APP_API</code> : API server 路徑</li>
<li><code>VUE_APP_PATH</code> : 「六角學院 Vue 課程練習 API 申請」的路徑。</li>
</ul>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// .<span class="built_in">env</span></span><br><span class="line">VUE_APP_API=https://vue3-course-api.hexschool.io/</span><br><span class="line">VUE_APP_PATH=請填申請API路徑</span><br></pre></td></tr></table></figure>
</li>
<li><p>確認環境變數加入到專案中</p>
<ol>
<li><p>開啟「 專案 &#x2F; src &#x2F; views &#x2F; HomeView.vue」</p>
<ul>
<li><p>加入 created 生命週期，查看 <code>process.env.VUE_APP_API</code> 與 <code>process.env.VUE_APP_PATH</code>。</p>
<p>  <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E5%AE%89%E8%A3%9D%20Vue%20Cli%20%E7%92%B0%E5%A2%83%E8%88%87%E7%92%B0%E5%A2%83%E4%B8%AD%E6%AA%94%E6%A1%88%E8%AA%AA%E6%98%8E_013.png?alt=media&token=b95ee2bc-8ffb-4a91-a53b-1fa56a6f6b7d" alt="成功顯示 VUE_APP_API 與 VUE_APP_PATH 資訊 ▲"></p>
</li>
<li><p><code>process.env</code> 可參考 <a href="https://www.notion.so/Vue-Cli-4be2706a6dd849029f4aa543931246f7">Vue Cli 中環境變數觀念與操作</a>  。</p>
</li>
<li><p>‼️ 注意 : 調整到環境變數，終端機一定要重新啟用， <code>ctrl+c</code> → <code>npm run serve</code>。</p>
</li>
</ul>
 <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    ..</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(process.<span class="property">env</span>.<span class="property">VUE_APP_API</span>, process.<span class="property">env</span>.<span class="property">VUE_APP_PATH</span>);</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
</li>
</ol>
<h2 id="Vue-Cli-環境中的檔案說明"><a href="#Vue-Cli-環境中的檔案說明" class="headerlink" title="Vue Cli 環境中的檔案說明"></a>Vue Cli 環境中的檔案說明</h2><p><img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E5%AE%89%E8%A3%9D%20Vue%20Cli%20%E7%92%B0%E5%A2%83%E8%88%87%E7%92%B0%E5%A2%83%E4%B8%AD%E6%AA%94%E6%A1%88%E8%AA%AA%E6%98%8E_014.png?alt=media&token=e035f935-0958-4423-8835-6bef864e9b0c" alt="專案內檔案結構 ▲"></p>
<h3 id="node-modules-資料夾"><a href="#node-modules-資料夾" class="headerlink" title="node_modules 資料夾"></a>node_modules 資料夾</h3><ul>
<li><strong>千千萬萬不要修改「node_modules 資料夾」</strong>，還原上或與其他人協作會有很大的問題。</li>
<li><strong>千千萬萬不能 commit 到專案。</strong> push 到 Github 上。 ( 通常 .gitignore 檔案都會有設定，可再做確認 )</li>
<li>運行所需的原生套件，這些套件是依據 package.json 檔案內所列的清單一一進行安裝。</li>
<li>專案從遠端載下來時，可使用 <code>npm install</code> 指令的方式把環境還原。</li>
</ul>
<h3 id="src-資料夾-開發都在此資料夾內"><a href="#src-資料夾-開發都在此資料夾內" class="headerlink" title="src 資料夾 | 開發都在此資料夾內"></a>src 資料夾 | 開發都在此資料夾內</h3><p><img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E5%AE%89%E8%A3%9D%20Vue%20Cli%20%E7%92%B0%E5%A2%83%E8%88%87%E7%92%B0%E5%A2%83%E4%B8%AD%E6%AA%94%E6%A1%88%E8%AA%AA%E6%98%8E_015.png?alt=media&token=9579601f-debb-4760-b3f1-a09eebda788f" alt="專案內檔案結構 ▲"></p>
<ul>
<li><p><strong>main.js</strong> → main.js 為專案中最重要的檔案，所有檔案都會與它產生關連性，為專案的進入點。</p>
<ul>
<li><code>main.js</code> 會載入路由表，路由表會載入 HomeView 與 AboutView 檔案，其他元件還可以再載入其他子元件，一層層串接下去。</li>
<li>main.js 內 <code>import router from &#39;./router&#39;</code> 中的 router 為路由的配置檔案。可於 router 資料夾內找到。</li>
<li><strong>當有「引用的外部套件要做全域註冊會寫在 main.js 」上。</strong><ul>
<li>外部套件例如 axios、bootstrap。<br>  <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E5%AE%89%E8%A3%9D%20Vue%20Cli%20%E7%92%B0%E5%A2%83%E8%88%87%E7%92%B0%E5%A2%83%E4%B8%AD%E6%AA%94%E6%A1%88%E8%AA%AA%E6%98%8E_016.png?alt=media&token=69707e74-1539-43ec-b973-e8805c06e43b" alt="router 為路由的配置檔案 ▲"></li>
</ul>
</li>
</ul>
</li>
<li><p>App.vue → 為 main.js 第一個生成的主要元件，通常只做簡單的配置。</p>
<p>  <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E5%AE%89%E8%A3%9D%20Vue%20Cli%20%E7%92%B0%E5%A2%83%E8%88%87%E7%92%B0%E5%A2%83%E4%B8%AD%E6%AA%94%E6%A1%88%E8%AA%AA%E6%98%8E_017.png?alt=media&token=b8bdb39c-4e37-46c2-84cd-c6eb65c0e575"></p>
<p>  <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E5%AE%89%E8%A3%9D%20Vue%20Cli%20%E7%92%B0%E5%A2%83%E8%88%87%E7%92%B0%E5%A2%83%E4%B8%AD%E6%AA%94%E6%A1%88%E8%AA%AA%E6%98%8E_018.png?alt=media&token=0de0dcdd-efc0-4cf4-ba0f-9c9ad0186a87" alt="導覽列示意圖 ▲"></p>
</li>
<li><p>views 資料夾 → 主要的頁面會放此資料夾，而這些頁面掛載的的元件會放在 components 資料夾內。</p>
</li>
<li><p>assets 資料夾 → 相關的其他資產，例如比較小的圖片、CSS、相關的 JS 檔案</p>
</li>
</ul>
<h3 id="public-資料夾"><a href="#public-資料夾" class="headerlink" title="public 資料夾"></a>public 資料夾</h3><ul>
<li><p><strong>不會去動 public 資料夾內的程式碼。</strong></p>
</li>
<li><p>放置與進入點沒有相關連的檔案，或不需要編譯的檔案。但唯獨 public 資料夾內的 index.html 檔案會被編譯。 主要是因為 Vue 元件生成會需要掛載在一個實體頁面上所需的檔案。</p>
</li>
<li><p><strong>無論有多少分頁，最終編譯的 html 檔案只會有 index.html 一個。</strong></p>
</li>
<li><p><code>&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</code> 為元件生成的主要位置，<code>&lt;!-- built files will be auto injected --&gt;</code> 最終編譯的檔案會注入於此，這邊就是最終編譯完的 css 或 js 會放置的 HTML 的頁面。</p>
<p>  <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E5%AE%89%E8%A3%9D%20Vue%20Cli%20%E7%92%B0%E5%A2%83%E8%88%87%E7%92%B0%E5%A2%83%E4%B8%AD%E6%AA%94%E6%A1%88%E8%AA%AA%E6%98%8E_019.png?alt=media&token=b173ad35-814c-401a-b527-c4ed52f164d9"></p>
</li>
<li><p>比較大的圖片或資源也可放置於此資料夾。</p>
</li>
<li><p>使用 CDN 放置位置 → 專案 &#x2F; public 資料夾 &#x2F; index.html ( <code>&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</code> 下面 )。</p>
<ul>
<li>可以在 vscode 終端機輸入 <code>npm run build</code> 執行編譯產出 dist 資料夾，看裡面的 index.html 檔案內的 <code>&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</code> 有 script 的檔案。<br>  <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E5%AE%89%E8%A3%9D%20Vue%20Cli%20%E7%92%B0%E5%A2%83%E8%88%87%E7%92%B0%E5%A2%83%E4%B8%AD%E6%AA%94%E6%A1%88%E8%AA%AA%E6%98%8E_020.png?alt=media&token=62576dc5-c573-4516-b5c9-f6c29cdcde43" alt="Line22 以下▲"></li>
</ul>
</li>
</ul>
<h3 id="其餘檔案-環境相關設定檔"><a href="#其餘檔案-環境相關設定檔" class="headerlink" title="其餘檔案 | 環境相關設定檔"></a>其餘檔案 | 環境相關設定檔</h3><ul>
<li><p><strong>README.md</strong> → 介紹該怎麼運作這份 Vue</p>
</li>
<li><p><strong>package.json</strong> → 此專案的配置檔案，包含專案內有哪些相關套件都會記錄在此檔案。</p>
<p>  <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E5%AE%89%E8%A3%9D%20Vue%20Cli%20%E7%92%B0%E5%A2%83%E8%88%87%E7%92%B0%E5%A2%83%E4%B8%AD%E6%AA%94%E6%A1%88%E8%AA%AA%E6%98%8E_021.png?alt=media&token=508caef0-7feb-4807-ad54-155116c4c075" alt="小技巧 : vscode 終端機執行的 npm run serve，也可直接於上示意圖點選執行指令碼操作，結果會是一樣的。"></p>
</li>
<li><p><strong>package-lock.json</strong> → 專案內實際安裝套件的版本與相關描述。如果開發有問題，會使用此檔案做套件版本的查詢，不太會動到這支檔案。</p>
</li>
<li><p><strong>babel.config.js</strong> → 預設已調整好，不太會動到這支檔案。</p>
</li>
<li><p><strong>.gitignore</strong> → git 中忽略的檔案。 ( 裡面的檔案不會上傳到 Github )</p>
</li>
<li><p><strong>.eslintrc.js</strong> → eslink 的設定檔案，會依據我們的選擇先把設定檔與規則載入。當初 <code>vue create 專案名稱</code> 選取的規則是 <code>standard</code> 裡面就會有標示。如想要調整更多規則可於此檔案進行設定。</p>
<p>  <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E5%AE%89%E8%A3%9D%20Vue%20Cli%20%E7%92%B0%E5%A2%83%E8%88%87%E7%92%B0%E5%A2%83%E4%B8%AD%E6%AA%94%E6%A1%88%E8%AA%AA%E6%98%8E_022.png?alt=media&token=9f35ca6b-d7ab-46ee-8e0d-adc8ae84a2ea"></p>
</li>
<li><p><strong>.editorconfig</strong> → 編輯器的設定檔。</p>
</li>
<li><p><strong>.browserslistrc</strong> → 瀏覽器預期要支援的版本。 &gt;1% 表示瀏覽器有支援大於 1% 的使用就會支援它。</p>
<p>  <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E5%AE%89%E8%A3%9D%20Vue%20Cli%20%E7%92%B0%E5%A2%83%E8%88%87%E7%92%B0%E5%A2%83%E4%B8%AD%E6%AA%94%E6%A1%88%E8%AA%AA%E6%98%8E_023.png?alt=media&token=837bec03-a98a-4b89-bb49-78a684d6e813"></p>
</li>
</ul>
<h2 id="資訊來源"><a href="#資訊來源" class="headerlink" title="資訊來源"></a>資訊來源</h2><ul>
<li>六角學院 : Vue 3 實戰影音課程</li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Vue3</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Vue-Cli 遇到的錯誤訊息們與解決方式</title>
    <url>/vue/20230327/1158769951/</url>
    <content><![CDATA[<h2 id="vue-cli-顯示-autoprefixer-錯誤訊息解學方式"><a href="#vue-cli-顯示-autoprefixer-錯誤訊息解學方式" class="headerlink" title="vue cli 顯示 autoprefixer: 錯誤訊息解學方式"></a>vue cli 顯示 <code>autoprefixer:</code> 錯誤訊息解學方式</h2><p><img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E4%BD%BF%E7%94%A8%20Vue%20Cli%20%E9%81%87%E5%88%B0%E7%9A%84%E9%8C%AF%E8%AA%A4%E8%A8%8A%E6%81%AF%E5%80%91%E8%88%87%E8%A7%A3%E6%B1%BA%E6%96%B9%E5%BC%8F_01.png?alt=media&token=694bc3bc-e75b-46ab-b66c-147bd3dc1084" alt="顯示 autoprefixer 錯誤訊息 ▲"></p>
<p>錯誤訊息 : <code>autoprefixer: Replace color-adjust to print-color-adjust. The color-adjust shorthand is currently deprecated.</code></p>
<h3 id="解決方式"><a href="#解決方式" class="headerlink" title="解決方式"></a>解決方式</h3><p>安裝 <strong><a href="mailto:&#97;&#x75;&#116;&#111;&#112;&#114;&#101;&#x66;&#105;&#x78;&#x65;&#114;&#x40;&#49;&#48;&#x2e;&#52;&#46;&#x35;">&#97;&#x75;&#116;&#111;&#112;&#114;&#101;&#x66;&#105;&#x78;&#x65;&#114;&#x40;&#49;&#48;&#x2e;&#52;&#46;&#x35;</a></strong> 版本，在終端機執行指令 : <code>npm install autoprefixer@10.4.5 --save-exact</code></p>
<h2 id="無法使用-npm-install-載回-node-modules-解決方式"><a href="#無法使用-npm-install-載回-node-modules-解決方式" class="headerlink" title="無法使用 npm install 載回 node_modules 解決方式"></a>無法使用 <code>npm install</code> 載回 node_modules 解決方式</h2><p>可能是本地端的 node 版本高於專案的版本，以系統管理員身份開啟 windows PowerShell 使用 <code>nvm</code> 降級。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm list - 列出已安裝清單</span><br><span class="line">nvm install [node 版本號]</span><br><span class="line">nvm use [node 版本號] - 切換到特定 Node 版本(只限有安裝的版本)</span><br></pre></td></tr></table></figure>

<h2 id="參考資訊"><a href="#參考資訊" class="headerlink" title="參考資訊"></a>參考資訊</h2><ul>
<li><a href="https://www.notion.so/07-95c88ebb1822439691a4c8b5b09fd50e">#07. <strong>扛起骨灰級專案吧！</strong></a></li>
<li><a href="https://www.notion.so/macOS-NVM-Node-js-a2550a17b6464d158aa8b6ec31caa64a">macOS 安裝 NVM 與 Node.js</a></li>
<li><a href="https://israynotarray.com/nodejs/20200107/3738078915/">Windows 10 安裝並使用 nvm 切換 NodeJS 版本</a></li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Vue3</tag>
      </tags>
  </entry>
  <entry>
    <title>淺談 Box-Model 盒模型</title>
    <url>/html-css/20230327/3889239367/</url>
    <content><![CDATA[<h2 id="Box-Model-盒模型"><a href="#Box-Model-盒模型" class="headerlink" title="Box Model 盒模型"></a>Box Model 盒模型</h2><p>Box Model 盒模型主要由四個部分組成，由內而外分別是 content、<code>padding</code>、<code>border</code>、<code>margin</code>。CSS 裏面，HTML 的每個元素都可以被視為一個盒子 ( Box Model 盒模型 )，可使用 <code>padding</code>、<code>border</code>、<code>margin</code> 對這個盒子做調整。</p>
<p>content 為盒子的原尺寸，而 <code>padding</code>、<code>border</code> 的使用會影響此盒子的尺寸，所以可以搭配 <code>box-sizing:border-box;</code> 就不會增加盒子本身的尺寸。</p>
<h2 id="CSS-屬性-margin-、-padding、border"><a href="#CSS-屬性-margin-、-padding、border" class="headerlink" title="CSS 屬性 margin 、 padding、border"></a>CSS 屬性 margin 、 padding、border</h2><h3 id="margin-外距"><a href="#margin-外距" class="headerlink" title="margin 外距"></a>margin 外距</h3><ul>
<li><p>推盒模型的「 外 」邊距。</p>
</li>
<li><p><a href="https://codepen.io/echocarriet/pen/WNzvyWq">CodePen 範例程式碼</a>中，box1 元素向<strong>外</strong>面右邊推了 box2 元素 50px 距離。</p>
<p>  <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E6%B7%BA%E8%AB%87%20Box%20Model%20%E7%9B%92%E6%A8%A1%E5%9E%8B_01.jpg?alt=media&token=6aba6421-7f49-4ca3-ba22-dc81eeca8c3f" alt="margin 外距示意圖 ▲"></p>
</li>
</ul>
<h3 id="padding-內距"><a href="#padding-內距" class="headerlink" title="padding 內距"></a>padding 內距</h3><ul>
<li><p>增加盒模型「 內 」的留白距離。</p>
</li>
<li><p><a href="https://codepen.io/echocarriet/pen/abYOKMJ">CodePen 範例程式碼</a> 中，div 標籤的盒模型向<strong>內</strong>往四周推了 30px 的距離 ( 綠色範圍處 )，div 盒模型內的子層文字內縮了 30px 的距離。</p>
<p>  <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E6%B7%BA%E8%AB%87%20Box%20Model%20%E7%9B%92%E6%A8%A1%E5%9E%8B_02.png?alt=media&token=c46089d2-dda7-44c4-b5f6-3a5f48f4b1ca" alt="padding 內距示意圖 ▲"></p>
</li>
</ul>
<h3 id="border-邊框"><a href="#border-邊框" class="headerlink" title="border 邊框"></a>border 邊框</h3><p>圍繞盒模型周圍的邊框。( 下圖黃色範圍 <a href="https://codepen.io/echocarriet/pen/RwMPyQa">CodePen 程式碼</a> )</p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E6%B7%BA%E8%AB%87%20Box%20Model%20%E7%9B%92%E6%A8%A1%E5%9E%8B_03.png?alt=media&token=a23416ed-a9a2-4183-abda-0cc31da313f5" alt="border 邊框示意圖 ▲"></p>
<h2 id="Box-Model-區塊模型中使用-margin、padding、border-帶來的變化"><a href="#Box-Model-區塊模型中使用-margin、padding、border-帶來的變化" class="headerlink" title="Box Model 區塊模型中使用 margin、padding、border 帶來的變化"></a><strong><strong>Box Model 區塊模型中使用 margin、padding、border 帶來的變化</strong></strong></h2><h3 id="使用-margin"><a href="#使用-margin" class="headerlink" title="使用 margin"></a><strong>使用 margin</strong></h3><p><code>margin</code> 是推<strong>外</strong>邊界，所以不會影響 box 的原始尺寸。<a href="https://codepen.io/echocarriet/pen/WNzvyWq">CodePen 程式碼</a></p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E6%B7%BA%E8%AB%87%20Box%20Model%20%E7%9B%92%E6%A8%A1%E5%9E%8B_04.jpg?alt=media&token=3f4085a5-f90f-4635-83cc-195e08158928" alt="使用 margin 示意圖 ▲"></p>
<h3 id="使用-padding-與-border"><a href="#使用-padding-與-border" class="headerlink" title="使用 padding 與 border"></a><strong>使用 padding 與 border</strong></h3><ul>
<li>盒模型使用 <code>padding</code> 與 <code>border</code> 皆會改變 box 的原始尺寸，盒模型由 300 x 300 → 316 x 316。</li>
<li>解決方式 : 可使用 <code>box-sizing: border-box;</code> 來解決尺寸問題，下方會有解說。</li>
</ul>
<p><img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E6%B7%BA%E8%AB%87%20Box%20Model%20%E7%9B%92%E6%A8%A1%E5%9E%8B_05.jpg?alt=media&token=ef6fc25a-14b9-4eef-9f4c-846691fe82d7" alt="使用 padding 與 border 示意圖 ▲"></p>
<h2 id="範例-｜計算-Box-Model-盒模型尺寸"><a href="#範例-｜計算-Box-Model-盒模型尺寸" class="headerlink" title="範例 ｜計算 Box Model 盒模型尺寸"></a>範例 ｜計算 Box Model 盒模型尺寸</h2><h3 id="下方為-box-資訊，請問最終-box-的大小？"><a href="#下方為-box-資訊，請問最終-box-的大小？" class="headerlink" title="下方為 box 資訊，請問最終 box 的大小？"></a>下方為 box 資訊，請問最終 box 的大小？</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line"> <span class="attribute">width</span>:<span class="number">300px</span>;</span><br><span class="line"> <span class="attribute">height</span>:<span class="number">300px</span>;</span><br><span class="line"> <span class="attribute">background</span>: <span class="number">#000</span>;</span><br><span class="line"> <span class="attribute">padding-right</span>:<span class="number">50px</span>;</span><br><span class="line"> <span class="attribute">border</span>:<span class="number">10px</span> solid red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>margin</code> 不會影響 box 大小，只有 <code>padding</code> 與 <code>border</code> 會有影響。</li>
<li>box 尺寸運算方式為 ：<ul>
<li><p>width : 300px + 50px ( <code>padding-right</code> ) + 20px ( 左右 <code>boder</code> ) &#x3D; 370px。</p>
</li>
<li><p>height : 300px + 20px ( 左右 <code>boder</code> ) &#x3D; 320px。</p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E6%B7%BA%E8%AB%87%20Box%20Model%20%E7%9B%92%E6%A8%A1%E5%9E%8B_06.jpg?alt=media&token=d6e0bfd5-e8ef-4f38-a6e2-8a52c31f907f" alt="示意圖 ▲"></p>
</li>
</ul>
</li>
</ul>
<p><img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E6%B7%BA%E8%AB%87%20Box%20Model%20%E7%9B%92%E6%A8%A1%E5%9E%8B_07.png?alt=media&token=a62897b6-f311-433a-b4f3-385dca37411e" alt="圖片來源 : 六角學院 ▲"></p>
<h2 id="解決盒模型內-padding-與-border-帶來的影響，可使用-box-sizing-border-box"><a href="#解決盒模型內-padding-與-border-帶來的影響，可使用-box-sizing-border-box" class="headerlink" title="解決盒模型內 padding 與 border 帶來的影響，可使用 box-sizing:border-box"></a>解決盒模型內 padding 與 border 帶來的影響，可使用 box-sizing:border-box</h2><p>當你設定一個元素樣式為 <code>box-sizing: border-box;</code>，這個元素的 <code>padding</code> 和 <code>border</code> 將不會增加元素本身的寬度。</p>
<ul>
<li><p>css3 新語法。</p>
</li>
<li><p><code>box-sizing: border-box;</code> 對 <code>margin</code> 是無效的， <code>margin</code> 本來就不會對元素的大小有影響。</p>
</li>
<li><p>如果整個網頁都會用到  <code>box-sizing:border-box;</code> 可統一寫在一起，加入 <code>*</code> 星號，讓所有的 HTML 吃到此標籤。</p>
  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*,*<span class="selector-pseudo">:before</span>,*<span class="selector-pseudo">:after</span>&#123;</span><br><span class="line"><span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 <code>box-sizing</code> 與未使用 <code>box-sizing</code> 差異，可參考此 <a href="https://codepen.io/echocarriet/pen/YzaXvRe">CodePen 範例程式碼</a> 搭配開發人員工具做查看。</p>
</li>
</ul>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li>六角學院 : 使用 HTML、CSS 開發一個網站</li>
<li><a href="https://www.wibibi.com/info.php?tid=CSS_box_model_%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B">Wibibi - CSS box model</a></li>
<li><a href="https://www.oxxostudio.tw/articles/202008/css-box-model.html">深入理解 CSS Box Model ( 盒子模型 )</a></li>
</ul>
]]></content>
      <categories>
        <category>HTML&amp;CSS</category>
      </categories>
      <tags>
        <tag>Box Model</tag>
        <tag>盒模型</tag>
        <tag>margin</tag>
        <tag>padding</tag>
        <tag>border</tag>
        <tag>box-sizing</tag>
      </tags>
  </entry>
  <entry>
    <title>實現設計稿中英文不同字形設定</title>
    <url>/html-css/20230327/1509112208/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>有時會遇到設計稿中使用不同字體的中英文，如果要一直手動設定真是稍嫌麻煩，下方使用 「 <code>@font-face</code> 規則搭配 <code>unicode-range</code> 屬性 」的方式，在一般專案與 Vue Cli 專案讓系統去偵測中英文並配對對應的字型。</p>
<p>下方兩個範例使用兩種字體：</p>
<ol>
<li>英文字體載入本地端資料夾。<a href="https://pangrampangram.com/products/monument-extended">Monument Extended 字體載入點</a></li>
<li>中文字體使用 Google Font - <a href="https://fonts.google.com/noto/specimen/Noto+Sans+TC">Noto Sans Traditional Chinese</a></li>
</ol>
<h2 id="❒-Vue-Cli-BS"><a href="#❒-Vue-Cli-BS" class="headerlink" title="❒ Vue Cli + BS"></a>❒ Vue Cli + BS</h2><p><a href="https://github.com/echocarriet/vue_usedifferentfont">GitHub 程式碼</a></p>
<p><a href="https://echocarrie.com/vue_usedifferentfont/#/">GitHub Pages</a></p>
<h3 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h3><p><strong>① 資料統整</strong></p>
<ol>
<li><p>新增資料夾，把英文字體檔丟入 fonts 資料夾內</p>
<ol>
<li>開啟資料夾 src &#x2F; assets ，新增 stylesheets &#x2F;  fonts 資料夾，把英文字體檔案丟 fonts 資料夾內。</li>
</ol>
</li>
<li><p>stylesheets 資料夾新增 all.scss 檔案，把所有樣式從這邊 <code>@import</code>。</p>
<ol>
<li>這邊 npm 載入 bootstrap，all.scss 使用 <code>@import</code> 引入。</li>
</ol>
</li>
<li><p>於 App.vue  <code>@import</code>  all.scss 。</p>
<ol>
<li>記得把 App.vue 下方 style 預設的 #app font-family 備註掉，不然會吃不到待會下方要設定的字型。</li>
</ol>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- @ 為路徑 src --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"> <span class="keyword">@import</span> <span class="string">&#x27;@/assets/stylesheets/all&#x27;</span>;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>② 使用 <code>@font-face</code> 規則搭配 <code>unicode-range</code> 屬性</strong></p>
<ul>
<li>使用 <code>unicode-range</code> ，它可分辨你是中文或英文。<ul>
<li>中文代碼 : <code>unicode-range: U+4E00-9FFF;</code></li>
<li>英文代碼 : <code>unicode-range: U+00-024F;</code></li>
</ul>
</li>
<li>中文與英文 <code>@font-face</code> 中的 <code>font-family</code> 自訂一樣的名字 ( 例如 <code>custom-font</code> )，把 <code>custom-font</code> 加入 _variables.scss 中的 <code>$font-family-sans-serif</code> 的第一個。因為已經各自設定了 <code>unicode-range</code> ，所以系統會自己偵測中英文並配對對應字型。</li>
</ul>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// all.scss</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ----- 中文設定(google font)</span></span><br><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: custom-font;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">local</span>(<span class="string">&#x27;Noto Sans TC&#x27;</span>),</span><br><span class="line">    <span class="built_in">url</span>(https://fonts.googleapis.com/css2?family=Noto+Sans+TC:wght@<span class="number">400</span>;<span class="number">700</span>&amp;<span class="attribute">display</span>=swap)</span><br><span class="line">      <span class="built_in">format</span>(&#x27;embedded-opentype&#x27;);</span><br><span class="line">  unicode-range: U+<span class="number">4</span>E00-<span class="number">9</span>FFF;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ----- 英文設定(本地端文字檔)</span></span><br><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: custom-font;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">local</span>(<span class="string">&#x27;PPMonumentExtended-Regular&#x27;</span>),</span><br><span class="line">    <span class="built_in">url</span>(<span class="string">&#x27;@/assets/stylesheets/fonts/PPMonumentExtended-Regular.otf&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;opentype&#x27;</span>);</span><br><span class="line">  unicode-range: U+<span class="number">00</span>-<span class="number">024</span>F;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="❒-一般專案"><a href="#❒-一般專案" class="headerlink" title="❒ 一般專案"></a>❒ 一般專案</h2><p><a href="https://github.com/echocarriet/usedifferentfont">GitHub 程式碼</a></p>
<p><a href="https://echocarrie.com/usedifferentfont/">GitHub Pages</a></p>
<p><strong>① 資料整理</strong></p>
<ol>
<li>把載下本地端的英文字體放置專案資料夾內。</li>
<li>開啟 all.css 做字體設定。</li>
</ol>
<p><strong>② 使用 <code>@font-face</code> 規則搭配 <code>unicode-range</code> 屬性</strong></p>
<ul>
<li>使用 <code>unicode-range</code> ，它可分辨你是中文或英文。<ul>
<li>中文代碼 : <code>unicode-range: U+4E00-9FFF;</code></li>
<li>英文代碼 : <code>unicode-range: U+00-024F;</code></li>
</ul>
</li>
<li>中文與英文 <code>@font-face</code> 中的 <code>font-family</code> 自訂一樣的名字 ( 例如 <code>custom-fonts</code> )，把 <code>custom-fonts</code> 加入 body 中。因為已經各自設定了 <code>unicode-range</code> ，所以系統會自己偵測中英文並配對對應字型。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 中文設定(google font) */</span></span><br><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: custom-fonts;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">local</span>(<span class="string">&quot;Noto Sans TC&quot;</span>), <span class="built_in">url</span>(<span class="string">&#x27;https://fonts.googleapis.com/css2?family=Noto+Sans+TC:wght@400;700&amp;display=swap&#x27;</span>) <span class="built_in">format</span>(<span class="string">&quot;embedded-opentype&quot;</span>);</span><br><span class="line">  unicode-range: U+<span class="number">4</span>E00-<span class="number">9</span>FFF;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 英文設定(本地端文字檔) */</span></span><br><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: custom-fonts;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">local</span>(<span class="string">&quot;PPMonumentExtended-Regular&quot;</span>), <span class="built_in">url</span>(<span class="string">&#x27;./fonts/PPMonumentExtended-Regular.otf&#x27;</span>) <span class="built_in">format</span>(<span class="string">&quot;opentype&quot;</span>);</span><br><span class="line">  unicode-range: U+<span class="number">00</span>-<span class="number">024</span>F;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 中英文@font-face中的font-family自訂名加入body的 */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: custom-fonts;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><a href="https://blog.gtwang.org/web-development/css-font-face/">CSS 網頁字型 @font-face 使用教學與範例</a></li>
<li><a href="https://wcc723.github.io/sass/2014/02/21/font-code-range/">CSS設定中英文不同的字體</a></li>
<li><a href="https://keqingrong.cn/blog/2019-11-30-different-fonts-in-different-locales/">前端如何实现中文、英文、数字使用不同字体</a></li>
<li><a href="https://css-tricks.com/snippets/css/using-font-face-in-css/">How to use @font-face in CSS</a></li>
</ul>
]]></content>
      <categories>
        <category>HTML&amp;CSS</category>
      </categories>
      <tags>
        <tag>font-face</tag>
        <tag>unicode-range</tag>
      </tags>
  </entry>
  <entry>
    <title>PowerShell 美化</title>
    <url>/tools/20230327/2533981155/</url>
    <content><![CDATA[<h2 id="操作環境"><a href="#操作環境" class="headerlink" title="操作環境"></a>操作環境</h2><p>Windows 10</p>
<h2 id="更換-Sarasa-Gothic-更紗黑體"><a href="#更換-Sarasa-Gothic-更紗黑體" class="headerlink" title="更換 Sarasa Gothic 更紗黑體"></a>更換 Sarasa Gothic 更紗黑體</h2><ol>
<li>進入 <a href="https://github.com/be5invis/Sarasa-Gothic">更紗黑體 GitHub</a> 的 <a href="https://github.com/be5invis/Sarasa-Gothic/releases">release</a> 頁面</li>
<li>選取 ttf 壓縮檔下載 ( sarasa-gothic-ttf-unhinted-0.34.1.7z) → 解壓縮 → 找到檔案 sarasa-mono-tc-regular.ttf 按右鍵安裝 。<ol>
<li>字體中繁中就是有標註 tc 的。</li>
</ol>
</li>
<li>重新啟動 PowerShell → 內容 → 字型，就可以選取 “ 等距更紗黑體 “ 囉 !</li>
</ol>
<p><img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2FPowerShell%20%E7%BE%8E%E5%8C%96_0.png?alt=media&token=f3703089-1a6e-4f7c-8e08-77566a2be6e3" alt="PowerShell"></p>
<h2 id="oh-my-posh-增加提示條"><a href="#oh-my-posh-增加提示條" class="headerlink" title="oh-my-posh | 增加提示條"></a>oh-my-posh | 增加提示條</h2><p><a href="https://github.com/JanDeDobbeleer/oh-my-posh">oh-my-posh GitHub</a></p>
<ol>
<li><p>於 PowerShell 輸入以下指令，第一次安裝遇到問題直接輸入 Y 即可。</p>
 <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">Install-Module</span> <span class="string">posh-git</span> <span class="string">-Scope</span> <span class="string">CurrentUser</span></span><br></pre></td></tr></table></figure>

<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2FPowerShell%20%E7%BE%8E%E5%8C%96_1.png?alt=media&token=22d9af07-7224-4c42-aa44-659db1dbe600" alt="PowerShell1"></p>
</li>
<li><p>安裝 oh-my-posh 模組，過程一路按 Y。</p>
 <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">Install-Module</span> <span class="string">oh-my-posh</span> <span class="string">-Scope</span> <span class="string">CurrentUser</span></span><br></pre></td></tr></table></figure>

<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2FPowerShell%20%E7%BE%8E%E5%8C%96_2.png?alt=media&token=42f3cf05-2926-4967-ae4f-68921ea8f295" alt="PowerShell2"></p>
</li>
<li><p>設定自動套用，每次啟動 PowerShell 就可以子動套入設定。</p>
<ol>
<li><p>於 PowerShell 輸入 <code>$profile</code> 來顯示 PowerShell 自定義路徑</p>
<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2FPowerShell%20%E7%BE%8E%E5%8C%96_3.png?alt=media&token=812a473b-6462-483f-88a6-f44172c78e08" alt="PowerShell3"></p>
</li>
<li><p>複製 <code>C:\Users\WIN10\OneDrive\文件\WindowsPowerShell</code> 開啟資料夾</p>
</li>
<li><p>找名為 <code>Microsoft.PowerShell_profile.ps1</code> 的檔案，如果沒有就自行新增，並把下方程式碼貼入。 ( oh-my-posh 改版後 Set-Theme Agnoster 可更改為 Set-PoshPrompt -Theme Paradox ，就不會產生無法辨識的問題囉 ! )</p>
<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2FPowerShell%20%E7%BE%8E%E5%8C%96_4.png?alt=media&token=651dc4b2-c8ee-4fdf-8f0a-74c21fe58c4a" alt="PowerShell4"></p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Import-Module posh-git</span><br><span class="line">Import-Module oh-my-posh</span><br><span class="line">Set-PoshPrompt -Theme Paradox</span><br></pre></td></tr></table></figure>
</li>
<li><p>記得重啟 PowerShell 。</p>
<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2FPowerShell%20%E7%BE%8E%E5%8C%96_5.png?alt=media&token=e5341d47-e9d2-418a-9a19-5b24948a5440" alt="PowerShell5"></p>
</li>
</ol>
</li>
</ol>
<h2 id="參考文章"><a href="#參考文章" class="headerlink" title="參考文章"></a>參考文章</h2><ul>
<li><a href="https://hsiangfeng.github.io/other/20190924/3446878284/">Window PowerShell 美化 ( Windows Terminal )</a></li>
<li><a href="https://igouist.github.io/post/2020/08/powershell-beauty/">Powershell 美化作戰 —— 字型、執行原則和 oh-my-posh</a></li>
<li><a href="https://yangxuewu.com/pages/e06f47/">PowerShell 美化</a></li>
</ul>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>PowerShell</tag>
        <tag>oh-my-posh提示條</tag>
      </tags>
  </entry>
  <entry>
    <title>MacM1 安裝 iTerm2</title>
    <url>/tools/20230327/442102443/</url>
    <content><![CDATA[<h2 id="❒-環境"><a href="#❒-環境" class="headerlink" title="❒ 環境"></a>❒ 環境</h2><ul>
<li>Mac M1</li>
<li>M1 終端機 shell 預設為 zsh</li>
</ul>
<h2 id="❒-iTerm2"><a href="#❒-iTerm2" class="headerlink" title="❒ iTerm2"></a>❒ iTerm2</h2><p>有兩種安裝方式 ① iTerm2 官網 ② HomeBrew，此篇文章將會使用 HomeBrew 來安裝 iTerm2。</p>
<h3 id="➊-安裝-HomeBrew"><a href="#➊-安裝-HomeBrew" class="headerlink" title="➊ 安裝 HomeBrew"></a>➊ 安裝 HomeBrew</h3><ol>
<li><p>HomeBrew 依照是 Mac OS X 的套件管理工具，把下方指令輸入到終端機，接著就等它安裝囉！</p>
</li>
<li><p>M1 電腦安裝 HomeBrew 會被安裝在 <code>/opt/homebrew</code> 路徑下，所以如果安裝在 <code>/usr/local/Homebrew</code> 目錄下是找不到的。</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/bin/bash -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>安裝過程會需要一點時間。</p>
<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2FMacM1%E5%AE%89%E8%A3%9DiTerm2_01.png?alt=media&token=019adecb-da6b-405f-a412-c04499273ef6" alt="// 安裝過程截圖"></p>
</li>
<li><p>把下方指令輸入於終端機，會把 HomeBrew 加到你的 <code>~/.zprofile</code> 路徑中 ( 加入此路徑才能讓用 brew 指令安裝的套件在執行的時候被找到 )。</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;eval $(/opt/homebrew/bin/brew shellenv)&#x27;</span> &gt;&gt; ~/.zprofile</span><br><span class="line"><span class="built_in">eval</span> $(/opt/homebrew/bin/brew shellenv)</span><br></pre></td></tr></table></figure>
</li>
<li><p>在終端機執行此指令</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew <span class="built_in">help</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>重啟終端機，輸入指令查看是否有成功，成功會跳出 Homebrew 版本號。</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew --version</span><br></pre></td></tr></table></figure>

<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2FMacM1%E5%AE%89%E8%A3%9DiTerm2_02.png?alt=media&token=86ce53ca-3db6-4dd3-a915-5fa912ed9f82" alt="// 終端機 Homebrew 版本號"></p>
</li>
</ol>
<h3 id="➋-HomeBrew-安裝-iTerm2"><a href="#➋-HomeBrew-安裝-iTerm2" class="headerlink" title="➋ HomeBrew 安裝 iTerm2"></a>➋ HomeBrew 安裝 iTerm2</h3><p><a href="https://formulae.brew.sh/cask/iterm2">HomeBrew 官網指令</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install --cask iterm2</span><br></pre></td></tr></table></figure>

<p>安裝成功後就可在電腦的應用程式中看到囉 ！( 路徑： &#x2F;Applications&#x2F;iTerm.app )</p>
<h2 id="❒-Oh-My-ZSH"><a href="#❒-Oh-My-ZSH" class="headerlink" title="❒ Oh My ZSH"></a>❒ Oh My ZSH</h2><p>① 於終端機輸入指令安裝 Oh My ZSH。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>

<p>執行完上面指令後，終端機原本的 <code>%</code> 符號變成 <code>→ ~</code>。</p>
<h3 id="調整-iTerm-與終端機字體及-theme"><a href="#調整-iTerm-與終端機字體及-theme" class="headerlink" title="調整 iTerm 與終端機字體及 theme"></a>調整 iTerm 與終端機字體及 theme</h3><p>字體可依自己喜好設定，建議使用 Nerd Font 系列字型才能支援完整的顯示效果。</p>
<p>② 下載 GoMono nerd Font 字型。可參考此文章中的 “ <a href="https://ithelp.ithome.com.tw/articles/10253908">老師！我想知道！要怎麼讓終端機變漂亮呢 - Mac 篇</a> ” 或 “ <a href="https://cindyliu923.com/2021/07/17/macbook-pro-m1/#iTerm">安裝 oh my zsh - 安裝字型</a>” 。</p>
<p>③ 調整主題：輸入指令開啟 .zshrc 檔案，把檔案中的 <code>ZSH_THEME=&quot;robbyrussell&quot;</code> 改為 <code>ZSH_THEME=&quot;agnoster&quot;</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">open ~/.zshrc</span><br></pre></td></tr></table></figure>

<p>④ 電腦應用程式中開啟 iTerm，按下快捷鍵 <code>command + ,</code> 進行設定。於 Preferences → Text 中把 Font 調整為步驟 2 下載的字型 <code>GoMono Nerd Font Mono</code>。</p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2FMacM1%E5%AE%89%E8%A3%9DiTerm2_03.png?alt=media&token=7150b2dd-f6ac-4302-8f45-7e2613665044" alt="// iTerm 設定"></p>
<p>⑤ 開啟終端機，使用快捷鍵 <code>command + ,</code> 進行終端機文字設定，在描述檔的文字中，把字體調整為 <code>GoMono Nerd Font Mono</code> 。</p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2FMacM1%E5%AE%89%E8%A3%9DiTerm2_04.png?alt=media&token=7119daeb-db26-4e02-add1-9402f9640210" alt="// 終端機設定"></p>
<h3 id="安裝主題套件並調整主題色"><a href="#安裝主題套件並調整主題色" class="headerlink" title="安裝主題套件並調整主題色"></a>安裝主題套件並調整主題色</h3><p>可依自己喜好設定，下面主題擇一</p>
<p><strong>第一種主題： <a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Themes#agnoster">agnoster</a> 主題</strong></p>
<p><a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Themes">Oh My ZSH Themes 文件</a> (  ****<a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Themes#agnoster">agnoster</a>** )</p>
<p>輸入指令開啟 .zshrc 檔案，把檔案中的 <code>ZSH_THEME=&quot;robbyrussell&quot;</code> 將它改為 <code>ZSH_THEME=&quot;agnoster&quot;</code> ( 調整 Oh-my-zsh 主題 )。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">open ~/.zshrc</span><br></pre></td></tr></table></figure>

<p><strong>第二種主題 <a href="https://github.com/Powerlevel9k/powerlevel9k">powerlevel9k</a> ( 筆者使用此主題 )</strong></p>
<p>① 安裝 <a href="https://github.com/Powerlevel9k/powerlevel9k">**powerlevel9k</a>**</p>
<p>目前出到 <strong><strong>Powerlevel10k</strong></strong>，可以嘗試看看。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/bhilburn/powerlevel9k.git ~/.oh-my-zsh/custom/themes/powerlevel9k</span><br></pre></td></tr></table></figure>

<p>② 開啟  .zshrc 輸入指令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">open ~/.zshrc</span><br></pre></td></tr></table></figure>

<p>③ 調整顏色</p>
<ul>
<li><p>iTerm2 挑選配色，可參考「 <a href="https://iterm2colorschemes.com/">Iterm2-color-schemes</a> 」，網頁中可以看到很多不同配色，挑選一個自己喜歡的配色，在喜歡的配色的名字按右鍵，並選擇另存連結後將檔案儲存下來。</p>
<ul>
<li>以筆者這邊選擇「 Tomorrow Night Eighties 」，另存連結就會下載一個 <code>Tomorrow Night Eighties.itermcolor</code> 的檔案。</li>
</ul>
</li>
<li><p>下載好後，開啟 iTerm 使用快捷鍵 <code>command + ,</code> 於 Preferences &gt; Profiles &gt; Colors，右下角 <code>Color Presets..</code> 打開選單，並選擇 Import 把下載的檔案載入。筆者這邊選擇 Builtin Solarized Light。</p>
<p>  <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2FMacM1%E5%AE%89%E8%A3%9DiTerm2_05.png?alt=media&token=dbc6dd7b-6f16-491c-88fd-afa5867c0e29" alt="// iTerm 主題色設定"></p>
</li>
</ul>
<p>④ 把下面內容加入 .zshrc 檔案，記得按儲存 ( 依自己喜好設定 )</p>
<p>更多提示設定可參考 <strong><a href="https://github.com/Powerlevel9k/powerlevel9k/wiki/Stylizing-Your-Prompt">Stylizing Your Prompt 文件</a></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 當前主題</span></span><br><span class="line">ZSH_THEME=powerlevel9k/powerlevel9k</span><br><span class="line"><span class="comment"># powerlevel9k 使用的模式</span></span><br><span class="line">POWERLINE9K_MODE=<span class="string">&#x27;nerdfont-complete&#x27;</span></span><br><span class="line"><span class="comment"># command line 左邊想顯示的內容</span></span><br><span class="line">POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(context <span class="built_in">dir</span> dir_writable vcs vi_mode)</span><br><span class="line"><span class="comment"># command line 右邊想顯示的內容</span></span><br><span class="line">POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(status ram load time)</span><br><span class="line">POWERLEVEL9K_PROMPT_ADD_NEWLINE=<span class="literal">true</span></span><br><span class="line">POWERLEVEL9K_DIR_HOME_BACKGROUND=<span class="string">&#x27;216&#x27;</span></span><br><span class="line">POWERLEVEL9K_DIR_HOME_SUBFOLDER_BACKGROUND=<span class="string">&#x27;216&#x27;</span></span><br><span class="line">POWERLEVEL9K_DIR_DEFAULT_BACKGROUND=<span class="string">&#x27;216&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><p>.zshrc 檔案中 <code>POWERLEVEL9K_LEFT_PROMPT_ELEMENTS</code> 與 <code>POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS</code></p>
<ul>
<li>更多提示設定可參考 <a href="https://github.com/Powerlevel9k/powerlevel9k#available-prompt-segments">Available Prompt Segments &#x2F; System Status Segments</a>。</li>
</ul>
</li>
<li><p><code>POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(command line 右邊顯示的內容)</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下圖一</span></span><br><span class="line">POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(status ram load time)</span><br><span class="line"><span class="comment"># 下圖二</span></span><br><span class="line">POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(status background_jobs time)</span><br></pre></td></tr></table></figure>

<p><img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2FMacM1%E5%AE%89%E8%A3%9DiTerm2_06.png?alt=media&token=a99e3bf7-3be7-4d26-8809-ce9c6f1278d9" alt="// command line 右邊顯示的內容 (圖一)"><br><img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2FMacM1%E5%AE%89%E8%A3%9DiTerm2_07.png?alt=media&token=2994bd89-8a8d-4cde-97bc-6288d8f37689" alt="// command line 右邊顯示的內容 (圖二)"></p>
</li>
<li><p><code>_BACKGROUND</code> 顏色可參考文件「 Stylizing Your Prompt 中的 <a href="https://github.com/Powerlevel9k/powerlevel9k/wiki/Stylizing-Your-Prompt#segment-color-customization">Segment Color Customization</a> 」</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">POWERLEVEL9K_DIR_HOME_BACKGROUND=<span class="string">&#x27;填顏色&#x27;</span></span><br><span class="line">POWERLEVEL9K_DIR_HOME_SUBFOLDER_BACKGROUND=<span class="string">&#x27;填顏色&#x27;</span></span><br><span class="line">POWERLEVEL9K_DIR_DEFAULT_BACKGROUND=<span class="string">&#x27;填顏色&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>⑤ 輸入指令，就會出現設定好的樣式囉</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exec</span> <span class="variable">$SHELL</span></span><br></pre></td></tr></table></figure>

<h2 id="❒-查看終端機-shell-為哪種腳本語言的兩種方式"><a href="#❒-查看終端機-shell-為哪種腳本語言的兩種方式" class="headerlink" title="❒ 查看終端機 shell 為哪種腳本語言的兩種方式"></a>❒ 查看終端機 shell 為哪種腳本語言的兩種方式</h2><p>① 開啟終端機後，於最上方欄位可以看到是哪種腳本。</p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2FMacM1%E5%AE%89%E8%A3%9DiTerm2_08.png?alt=media&token=983ff13d-1aa3-48c2-aea2-cb7524b7b6ac" alt="// 終端機表頭截圖"></p>
<p>② 使用指令</p>
<p>可使用指令 <code>echo $SHELL</code> 驗證，如果是會回傳 <code>/bin/zsh</code> 。</p>
<h2 id="參考資訊"><a href="#參考資訊" class="headerlink" title="參考資訊"></a>參考資訊</h2><ul>
<li><a href="https://stackoverflow.com/questions/66666134/how-to-install-homebrew-on-m1-mac">How to install homebrew on M1 mac</a></li>
<li><a href="https://www.cxymm.net/article/weixin_45108550/113887368">Macos M1电脑安装homebrew过程。</a></li>
<li><a href="https://cindyliu923.com/2021/07/17/macbook-pro-m1/#%E5%AE%89%E8%A3%9D-for-m1-arm-%E7%9A%84-homebrew">MacBook Pro M1 開箱使用紀錄 - 安裝 M1 的 homebrew</a></li>
<li><a href="https://clay-atlas.com/blog/2020/10/16/mac-cn-terminal-zsh-bash-shell-script/">[MacOS] 將終端機預設 zsh 轉換成 bash（或其他腳本語言）</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10253908">老師！我想知道！要怎麼讓終端機變漂亮呢 - Mac 篇</a></li>
</ul>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>終端機美化</tag>
        <tag>HomeBrew</tag>
        <tag>iTerm2</tag>
      </tags>
  </entry>
  <entry>
    <title>MacM1 更改終端機預設語言</title>
    <url>/tools/20230327/41934832/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>既上篇 <a href="https://echocarrie.com/tools/20230327/442102443/">MacM1 安裝 iTerm2</a>  安裝完 iTerm2 後終端機預設語言就變成中文，雖然閱讀速度瞬間升級，但認真害怕哪天就真的完全喪失基本英文閱讀力，記錄一下怎麼再把預設語言由中文改回英文吧！</p>
<h2 id="查看終端機目前語言"><a href="#查看終端機目前語言" class="headerlink" title="查看終端機目前語言"></a>查看終端機目前語言</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$LANG</span></span><br></pre></td></tr></table></figure>

<p>回傳 <code>zh_TW.UTF-8</code></p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2FMacM1%E6%9B%B4%E6%94%B9%E7%B5%82%E7%AB%AF%E6%A9%9F%E9%A0%90%E8%A8%AD%E8%AA%9E%E8%A8%80_01.png?alt=media&token=ff5fe20b-1fd5-49c5-8c3b-575b8dd8805c" alt="截圖"></p>
<h2 id="解決方式"><a href="#解決方式" class="headerlink" title="解決方式"></a>解決方式</h2><ol>
<li><p>終端機執行指令，開啟 <code>.zshrc</code> 檔案</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">open ~/.zshrc</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>.zshrc</code> 檔案內輸入下方內容</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export LC_ALL=en_US.UTF-8  </span><br><span class="line">export LANG=en_US.UTF-8</span><br></pre></td></tr></table></figure>
</li>
<li><p>重啟終端機或輸入下方指令</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="參考文章"><a href="#參考文章" class="headerlink" title="參考文章"></a>參考文章</h2><ul>
<li><a href="https://blog.csdn.net/xs18952904/article/details/97630389">macOS 更改 Terminal 语言</a></li>
<li><a href="https://developer.aliyun.com/article/836740">Mac终端使用oh-my-zsh中文乱码</a></li>
</ul>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>iTerm2</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode 樣板字面值使用 emmet</title>
    <url>/tools/20230327/2346096926/</url>
    <content><![CDATA[<p>NVM 為「 Node 版本管理控制 」</p>
<h2 id="macOS-安裝-NVM"><a href="#macOS-安裝-NVM" class="headerlink" title="macOS 安裝 NVM"></a>macOS 安裝 NVM</h2><h3 id="開啟隱藏的資料夾"><a href="#開啟隱藏的資料夾" class="headerlink" title="開啟隱藏的資料夾"></a>開啟隱藏的資料夾</h3><ul>
<li>開啟 Finder 切換到當前使用者的目錄下，使用 <code>Command + Shift+ .</code> 開啟隱藏的資料夾。</li>
</ul>
<h3 id="查詢是否有-zshrc-檔案"><a href="#查詢是否有-zshrc-檔案" class="headerlink" title="查詢是否有 .zshrc 檔案"></a>查詢是否有 <code>.zshrc</code> 檔案</h3><ul>
<li>開啟終端機輸入指令 <code>ls -a</code> 查詢是否有 <code>.zshrc</code> 檔案。</li>
<li>沒有的話，於終端機使用指令 <code>touch ~/.zshrc</code> 新增 <code>.zshrc</code> 檔案於使用者目錄下。( 請先確認終端機位置是否在使用者目錄下 )</li>
</ul>
<h3 id="安裝-nvm-指令"><a href="#安裝-nvm-指令" class="headerlink" title="安裝 nvm 指令"></a>安裝 nvm 指令</h3><ol>
<li><p>開啟終端機輸入下方指令</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash</span><br></pre></td></tr></table></figure>

<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2FmacOS%E5%AE%89%E8%A3%9DNVM%E8%88%87Node_01.png?alt=media&token=a98e3619-2c14-4c6a-bb82-c075b62697b1" alt="// 會需要跑一段時間 ▲"></p>
</li>
<li><p>安裝完後，使用者目錄下的 「 .nvm 資料夾與 <code>.zshrc</code> 檔案」目前是空的。這時執行指令 <code>nvm</code> 會報錯 <code>zsh: command not found:nvm</code>。請繼續跑完下方流程。</p>
</li>
</ol>
<p>注意：NVM 官方建議使用 cURL 安裝或更新 nvm，不建議用 Homebrew 來安裝，避免出現問題。</p>
<h3 id="再次安裝-nvm-指令"><a href="#再次安裝-nvm-指令" class="headerlink" title="再次安裝 nvm 指令"></a>再次安裝 nvm 指令</h3><ol>
<li><p>再次安裝 nvm 指令與 <code>source ~/.zshrc</code> 指令 ( 請一個輸入完再輸入另一個 )</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>
</li>
<li><p>輸入完上方指令後，使用者目錄內的「 .nvm 資料夾與 <code>.zshrc</code> 檔案」就有生成資料囉 !</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">&quot;<span class="variable">$HOME</span>/.nvm&quot;</span></span><br><span class="line">[ -s <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span> ] &amp;&amp; \. <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span>  <span class="comment"># This loads nvm</span></span><br><span class="line">[ -s <span class="string">&quot;<span class="variable">$NVM_DIR</span>/bash_completion&quot;</span> ] &amp;&amp; \. <span class="string">&quot;<span class="variable">$NVM_DIR</span>/bash_completion&quot;</span>  <span class="comment"># This loads nvm bash_completion</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>可使用下方指令查看 <code>.zshrc</code> 檔案是否有步驟二的內容</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">open ~/.zshrc</span><br></pre></td></tr></table></figure>
</li>
<li><p>重啟終端機，依下面方式查看就可看到 nvm 安裝成功囉 ！</p>
</li>
</ol>
<h3 id="查看-nvm-是否安裝成功-？"><a href="#查看-nvm-是否安裝成功-？" class="headerlink" title="查看 nvm 是否安裝成功 ？"></a>查看 nvm 是否安裝成功 ？</h3><ol>
<li><p>終端機執行 <code>command -v nvm</code>，顯示 nvm 表示安裝成功。</p>
</li>
<li><p>終端機執行 <code>nvm</code>，會跳出下方圖示。</p>
<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2FmacOS%E5%AE%89%E8%A3%9DNVM%E8%88%87Node_02.png?alt=media&token=9e8a86d3-799f-41e5-a208-85a827861533" alt="截圖"></p>
</li>
</ol>
<h2 id="常用的-nvm-指令"><a href="#常用的-nvm-指令" class="headerlink" title="常用的 nvm 指令"></a>常用的 nvm 指令</h2><ul>
<li><code>nvm install [node 版本號]</code> : 安裝特定版本的 nvm ( 例，版本號為 16 : <code>nvm install 16</code> )</li>
<li><code>nvm alias default [node 版本號]</code> : 將特定版本號做為預設值。</li>
<li><code>nvm list</code> : 列出已安裝清單</li>
<li><code>nvm use [node 版本號]</code> : 切換到特定 Node 版本(只限有安裝的版本)</li>
</ul>
<h2 id="使用-nvm-安裝-Node-js"><a href="#使用-nvm-安裝-Node-js" class="headerlink" title="使用 nvm 安裝 Node.js"></a>使用 nvm 安裝 Node.js</h2><ul>
<li>終端機執行指令 <code>nvm install 16</code></li>
<li>使用 <code>nvm list</code> 可看到目前已安裝的版本號與預設版本號。</li>
</ul>
<p><img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2FmacOS%E5%AE%89%E8%A3%9DNVM%E8%88%87Node_03.png?alt=media&token=8757ff02-a3a0-495e-9675-0e643b05d747" alt="截圖"></p>
<h2 id="參考文章"><a href="#參考文章" class="headerlink" title="參考文章"></a>參考文章</h2><p><a href="https://benscheer.medium.com/how-to-install-nvm-and-node-on-macos-m1-silicon-in-2022-172fba82d92f">How to Install NVM and Node on macOS M1 Silicon in 2022</a></p>
<ul>
<li><a href="https://www.casper.tw/development/2022/01/10/install-nvm/">安裝 nvm 環境，Node.js 開發者必學（ Windows、Mac 均適用 ）</a></li>
<li><a href="https://israynotarray.com/nodejs/20200124/3404456418/">Mac OS X 安裝 nvm</a></li>
</ul>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>VSCode</tag>
        <tag>VSCode設定檔settings.json</tag>
      </tags>
  </entry>
  <entry>
    <title>macOS 安裝 NVM 與 Node.js</title>
    <url>/tools/20230327/3371717253/</url>
    <content><![CDATA[<h2 id="macOS-安裝-NVM"><a href="#macOS-安裝-NVM" class="headerlink" title="macOS 安裝 NVM"></a>macOS 安裝 NVM</h2><h3 id="開啟隱藏的資料夾"><a href="#開啟隱藏的資料夾" class="headerlink" title="開啟隱藏的資料夾"></a>開啟隱藏的資料夾</h3><ul>
<li>開啟 Finder 切換到當前使用者的目錄下，使用 <code>Command + Shift+ .</code> 開啟隱藏的資料夾。</li>
</ul>
<h3 id="查詢是否有-zshrc-檔案"><a href="#查詢是否有-zshrc-檔案" class="headerlink" title="查詢是否有 .zshrc 檔案"></a>查詢是否有 <code>.zshrc</code> 檔案</h3><ul>
<li>開啟終端機輸入指令 <code>ls -a</code> 查詢是否有 <code>.zshrc</code> 檔案。</li>
<li>沒有的話，於終端機使用指令 <code>touch ~/.zshrc</code> 新增 <code>.zshrc</code> 檔案於使用者目錄下。( 請先確認終端機位置是否在使用者目錄下 )</li>
</ul>
<h3 id="安裝-nvm-指令"><a href="#安裝-nvm-指令" class="headerlink" title="安裝 nvm 指令"></a>安裝 nvm 指令</h3><ol>
<li><p>開啟終端機輸入下方指令</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash</span><br></pre></td></tr></table></figure>

<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2FmacOS%E5%AE%89%E8%A3%9DNVM%E8%88%87Node_01.png?alt=media&token=a98e3619-2c14-4c6a-bb82-c075b62697b1" alt="// 會需要跑一段時間 ▲"></p>
</li>
<li><p>安裝完後，使用者目錄下的 「 .nvm 資料夾與 <code>.zshrc</code> 檔案」目前是空的。這時執行指令 <code>nvm</code> 會報錯 <code>zsh: command not found:nvm</code>。請繼續跑完下方流程。</p>
</li>
</ol>
<p>注意：NVM 官方建議使用 cURL 安裝或更新 nvm，不建議用 Homebrew 來安裝，避免出現問題。</p>
<h3 id="再次安裝-nvm-指令"><a href="#再次安裝-nvm-指令" class="headerlink" title="再次安裝 nvm 指令"></a>再次安裝 nvm 指令</h3><ol>
<li><p>再次安裝 nvm 指令與 <code>source ~/.zshrc</code> 指令 ( 請一個輸入完再輸入另一個 )</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>
</li>
<li><p>輸入完上方指令後，使用者目錄內的「 .nvm 資料夾與 <code>.zshrc</code> 檔案」就有生成資料囉 !</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">&quot;<span class="variable">$HOME</span>/.nvm&quot;</span></span><br><span class="line">[ -s <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span> ] &amp;&amp; \. <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span>  <span class="comment"># This loads nvm</span></span><br><span class="line">[ -s <span class="string">&quot;<span class="variable">$NVM_DIR</span>/bash_completion&quot;</span> ] &amp;&amp; \. <span class="string">&quot;<span class="variable">$NVM_DIR</span>/bash_completion&quot;</span>  <span class="comment"># This loads nvm bash_completion</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>可使用下方指令查看 <code>.zshrc</code> 檔案是否有步驟二的內容</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">open ~/.zshrc</span><br></pre></td></tr></table></figure>
</li>
<li><p>重啟終端機，依下面方式查看就可看到 nvm 安裝成功囉 ！</p>
</li>
</ol>
<h3 id="查看-nvm-是否安裝成功-？"><a href="#查看-nvm-是否安裝成功-？" class="headerlink" title="查看 nvm 是否安裝成功 ？"></a>查看 nvm 是否安裝成功 ？</h3><ol>
<li><p>終端機執行 <code>command -v nvm</code>，顯示 nvm 表示安裝成功。</p>
</li>
<li><p>終端機執行 <code>nvm</code>，會跳出下方圖示。</p>
<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2FmacOS%E5%AE%89%E8%A3%9DNVM%E8%88%87Node_02.png?alt=media&token=9e8a86d3-799f-41e5-a208-85a827861533" alt="截圖"></p>
</li>
</ol>
<h2 id="常用的-nvm-指令"><a href="#常用的-nvm-指令" class="headerlink" title="常用的 nvm 指令"></a>常用的 nvm 指令</h2><ul>
<li><code>nvm install [node 版本號]</code> : 安裝特定版本的 nvm ( 例，版本號為 16 : <code>nvm install 16</code> )</li>
<li><code>nvm alias default [node 版本號]</code> : 將特定版本號做為預設值。</li>
<li><code>nvm list</code> : 列出已安裝清單</li>
<li><code>nvm use [node 版本號]</code> : 切換到特定 Node 版本(只限有安裝的版本)</li>
</ul>
<h2 id="使用-nvm-安裝-Node-js"><a href="#使用-nvm-安裝-Node-js" class="headerlink" title="使用 nvm 安裝 Node.js"></a>使用 nvm 安裝 Node.js</h2><ul>
<li>終端機執行指令 <code>nvm install 16</code></li>
<li>使用 <code>nvm list</code> 可看到目前已安裝的版本號與預設版本號。</li>
</ul>
<p><img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2FmacOS%E5%AE%89%E8%A3%9DNVM%E8%88%87Node_03.png?alt=media&token=8757ff02-a3a0-495e-9675-0e643b05d747" alt="截圖"></p>
<h2 id="參考文章"><a href="#參考文章" class="headerlink" title="參考文章"></a>參考文章</h2><ul>
<li><p><a href="https://benscheer.medium.com/how-to-install-nvm-and-node-on-macos-m1-silicon-in-2022-172fba82d92f">How to Install NVM and Node on macOS M1 Silicon in 2022</a></p>
</li>
<li><p><a href="https://www.casper.tw/development/2022/01/10/install-nvm/">安裝 nvm 環境，Node.js 開發者必學（ Windows、Mac 均適用 ）</a></p>
</li>
<li><p><a href="https://israynotarray.com/nodejs/20200124/3404456418/">Mac OS X 安裝 nvm</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>mvm</tag>
        <tag>npm</tag>
        <tag>node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue Cli 中環境變數觀念與操作</title>
    <url>/vue/20230327/2093301171/</url>
    <content><![CDATA[<h2 id="Vue-Cli-中環境變數基礎觀念"><a href="#Vue-Cli-中環境變數基礎觀念" class="headerlink" title="Vue Cli 中環境變數基礎觀念"></a>Vue Cli 中環境變數基礎觀念</h2><p><a href="https://cli.vuejs.org/zh/guide/mode-and-env.html#%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F">Vue Cli 環境變數文件</a></p>
<ul>
<li><p>團隊中可能會有好幾個人一同開發一個專案，儲存各自負責開發的項目於各自電腦中，前端開發者們會對同一個後端主機進行開發測試，開發到一個階段會上傳到正式主機上，這時連線位置就會需要替換掉，所以專案中連線位置會另外儲存在環境變數中。</p>
<p>  <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2FVue%20Cli%E4%B8%AD%E7%92%B0%E5%A2%83%E8%AE%8A%E6%95%B8%E8%A7%80%E5%BF%B5%E8%88%87%E6%93%8D%E4%BD%9C_01.png?alt=media&token=673aaeb3-0be5-488e-a865-6e6d72aa7658" alt="// 示意圖(出處:六角學院)"></p>
</li>
<li><p>環境變數分為 :</p>
<ul>
<li>開發者環境 development</li>
<li>正式環境 production</li>
</ul>
</li>
<li><p>env.local : 有些開發者懶得重複輸入帳秘等機密資訊，想把機密資訊儲存在環境變數中，這些機密資訊環境變數會存在 local 的環境變數，而這些資訊並不會傳給其他開發者只會自己使用。</p>
</li>
<li><p><a href="https://cli.vuejs.org/zh/guide/mode-and-env.html#%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F">Vue Cli 環境變數文件</a> 中表示可以在你的項目根目錄中放置下列文件來指定環境變數 :</p>
<ul>
<li><p><code>.env.[mode]</code>  : 代表你是要選擇「 開發者環境 development 」或「 正式環境 production 」哪種開發環境。<code>.env.[mode]</code> 只會在特定模式下才會被載入。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.<span class="built_in">env</span>                <span class="comment"># 在所有環境中被載入</span></span><br><span class="line">.env.local          <span class="comment"># 在所有環境中被載入，但會被 git 忽略，只存在本地端</span></span><br><span class="line">.<span class="built_in">env</span>.[mode]         <span class="comment"># 只在指定的模式中被載入</span></span><br><span class="line">.<span class="built_in">env</span>.[mode].<span class="built_in">local</span>   <span class="comment"># 只在指定的模式中被載入，但會被 git 忽略，只存在本地端</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="在專案中加入環境變數操作"><a href="#在專案中加入環境變數操作" class="headerlink" title="在專案中加入環境變數操作"></a>在專案中加入環境變數操作</h2><p>環境變數放置的位置於專案下，目前課程中使用 .env 環境變數。相關資訊可參考 : <a href="https://cli.vuejs.org/zh/guide/mode-and-env.html#%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F">Vue Cli 環境變數文件</a>。</p>
<p>‼️ 注意 : 調整到環境變數 ( .env )，終端機一定要重新啟用， <code>ctrl+c</code> → <code>npm run serve</code>。</p>
<h3 id="步驟-1-選擇要使用的環境變數"><a href="#步驟-1-選擇要使用的環境變數" class="headerlink" title="步驟 1 選擇要使用的環境變數"></a>步驟 1 選擇要使用的環境變數</h3><p>路徑 : 專案下</p>
<ol>
<li>此環境變數在所有環境都可被載入<ul>
<li>新增 <code>.env</code> 檔案</li>
</ul>
</li>
<li>此環境變數只在開發中環境被載入<ul>
<li>新增 <code>.env.development</code> 檔案</li>
</ul>
</li>
<li>此環境變數只在正式環境被載入使用<ul>
<li>新增 <code>.env.production</code> 檔案</li>
</ul>
</li>
<li>此還記變數只存在自己電腦中使用<ul>
<li>新增 <code>.env.development.local</code> 檔案</li>
</ul>
</li>
</ol>
<h3 id="步驟-2-於專案中使用環境變數"><a href="#步驟-2-於專案中使用環境變數" class="headerlink" title="步驟 2. 於專案中使用環境變數"></a>步驟 2. 於專案中使用環境變數</h3><ol>
<li><p>於專案中新增 .env 環境變數。</p>
</li>
<li><p>在 Vue 專案中要使用環境變數，.env 檔案內程式碼前方一定要加入 <code>VUE_APP</code> 的字樣，後方加入自訂義名稱，請以大寫形式 → <code>VUE_APP_大寫自訂義名=自訂義名</code>。</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 檔案位置:專案/.env</span><br><span class="line">VUE_APP_NOT_SECRET_CODE=some_value</span><br><span class="line"></span><br><span class="line">// 調整後</span><br><span class="line">VUE_APP_NAME=我在開發中</span><br></pre></td></tr></table></figure>
</li>
<li><p>把自訂義變數加到專案中，開啟 src 資料夾 &#x2F; App.vue</p>
<ul>
<li>data 中 <code>name: process.env</code> 為固定。</li>
<li>‼️ 注意 : 調整到環境變數，終端機一定要重新啟用， <code>ctrl+c</code> → <code>npm run serve</code>。</li>
<li>讓環境變數設定的名稱顯示在畫面上 ( 方便查看用 )，於 <code>&lt;template&gt;</code> 中加入 <code>&#123;&#123; name &#125;&#125;</code> ，可看到畫面出現 我在開發中 文字，表成功。</li>
</ul>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> |</span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span> /&gt;</span></span><br><span class="line">  &#123;&#123; name &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">name</span>: process.<span class="property">env</span>.<span class="property">VUE_APP_NAME</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2FVue%20Cli%E4%B8%AD%E7%92%B0%E5%A2%83%E8%AE%8A%E6%95%B8%E8%A7%80%E5%BF%B5%E8%88%87%E6%93%8D%E4%BD%9C_02.png?alt=media&token=86dfe261-f898-4994-b860-b0a47e2c8b7c" alt="// 示意圖"></p>
</li>
</ol>
<h2 id="資訊來源"><a href="#資訊來源" class="headerlink" title="資訊來源"></a>資訊來源</h2><ul>
<li>六角學院 : Vue 3 實戰影音課程</li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Vue3</tag>
      </tags>
  </entry>
  <entry>
    <title>簡述 Vue Cli 並以 GUI 介面操作</title>
    <url>/vue/20230327/1792293064/</url>
    <content><![CDATA[<h2 id="為什麼要用-Vue-Cli"><a href="#為什麼要用-Vue-Cli" class="headerlink" title="為什麼要用 Vue Cli"></a>為什麼要用 Vue Cli</h2><ol>
<li>前端開發日益複雜，每個開發者習慣亦有很大不同，因此整合性的工具可以減少彼此開發上的差異。</li>
<li>編譯環境越來越複雜，缺乏整合工具將會在每次專案都耗去大量時間。</li>
<li>前後端分離形成主流，單頁式應用程式更符合開發習慣。</li>
<li>套件引用越來越多，導致難以管理。</li>
</ol>
<h2 id="Vue-Cli-是甚麼"><a href="#Vue-Cli-是甚麼" class="headerlink" title="Vue Cli 是甚麼"></a>Vue Cli 是甚麼</h2><p><img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E7%B0%A1%E8%BF%B0%20Vue%20Cli%20%E4%B8%A6%E4%BB%A5%20GUI%20%E4%BB%8B%E9%9D%A2%E6%93%8D%E4%BD%9C_01.png?alt=media&token=5fff4ed3-baa5-4c33-9ffc-0fe2d2721977" alt="Webpack 整合了哪些開發環境 ▲"></p>
<ol>
<li><p>基於 Webpack 所建置的開發工具。</p>
</li>
<li><p>變於使用各種第三方套件 ( BS4、Vue Router ..  )。</p>
</li>
<li><p>可運行 Sass，Bebel 等編譯工具。</p>
</li>
<li><p>獨特 .vue 檔案，一次包含 html 、js、css 。</p>
<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E7%B0%A1%E8%BF%B0%20Vue%20Cli%20%E4%B8%A6%E4%BB%A5%20GUI%20%E4%BB%8B%E9%9D%A2%E6%93%8D%E4%BD%9C_02.png?alt=media&token=576b3b63-c16f-43cf-9a71-675efa87106b"></p>
</li>
<li><p>便於開發 SPA 的網頁工具 ( SPA 原文為 single-page-applicaiton，稱為<strong>單頁式應用程式</strong> )</p>
<ul>
<li><p>傳統的路每次進入頁面就會重新載入頁面所有的資源 ( 不管此頁面的某些區塊是否之前有載入過 )，所以會產生一次性地閃爍，會影響載入速度與使用者體驗。</p>
<p>  <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E7%B0%A1%E8%BF%B0%20Vue%20Cli%20%E4%B8%A6%E4%BB%A5%20GUI%20%E4%BB%8B%E9%9D%A2%E6%93%8D%E4%BD%9C_03.png?alt=media&token=3bec332d-9247-44b3-b70c-5c5f28b6e905"></p>
</li>
<li><p>SPA 載入是由前端來管理路由，路由上面會多一個 # 字號。在第一次進入網頁就會載入大部分資源，切換頁面時則會重新渲染不同的部分。 像 layout 在第一次進入頁面已經載入的情況下，到了其他頁面就不會再重新載入，只會重新渲染沒有載入過的部分。這樣每次進入新的頁面就不會產生一次性地閃爍。<br> 後端會透過 API 形式往前端送，前端再把這些資料整理到畫面上。<br> 進到頁面會從後端去取得資料，再把這些資料重新渲染到畫面上。</p>
<p>  <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E7%B0%A1%E8%BF%B0%20Vue%20Cli%20%E4%B8%A6%E4%BB%A5%20GUI%20%E4%BB%8B%E9%9D%A2%E6%93%8D%E4%BD%9C_04.png?alt=media&token=3267d95e-71d1-49e1-90a1-7eb7cd4ad358"></p>
</li>
</ul>
</li>
</ol>
<h2 id="關於-Cli"><a href="#關於-Cli" class="headerlink" title="關於 Cli"></a>關於 Cli</h2><p>Cli 原文為 Command-Line Interface， 簡單來說就是命令列介面。 ( windows 會開啟命令提示字元，Mac 會開啟終端機 )</p>
<h2 id="Vue-同時提供-GUI-的介面"><a href="#Vue-同時提供-GUI-的介面" class="headerlink" title="Vue 同時提供 GUI 的介面"></a>Vue 同時提供 GUI 的介面</h2><p><img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E7%B0%A1%E8%BF%B0%20Vue%20Cli%20%E4%B8%A6%E4%BB%A5%20GUI%20%E4%BB%8B%E9%9D%A2%E6%93%8D%E4%BD%9C_05.png?alt=media&token=1fa8b7ea-384f-493d-86ef-ad09193fdf54" alt="// Vue GUI 介面"></p>
<h2 id="指令太麻煩，來試試看-GUI-吧"><a href="#指令太麻煩，來試試看-GUI-吧" class="headerlink" title="指令太麻煩，來試試看 GUI 吧"></a>指令太麻煩，來試試看 GUI 吧</h2><p>Vue cli 與 UI 運行完的結果是一樣的，可擇一使用。</p>
<ol>
<li><p>終端機輸入 <code>vue ui</code> 會開啟介面。</p>
<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E7%B0%A1%E8%BF%B0%20Vue%20Cli%20%E4%B8%A6%E4%BB%A5%20GUI%20%E4%BB%8B%E9%9D%A2%E6%93%8D%E4%BD%9C_06.png?alt=media&token=b3cd18c5-f4bc-4202-b461-880df0ba38f0" alt="// 第一次開啟的介面回呈現 ▲"></p>
<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E7%B0%A1%E8%BF%B0%20Vue%20Cli%20%E4%B8%A6%E4%BB%A5%20GUI%20%E4%BB%8B%E9%9D%A2%E6%93%8D%E4%BD%9C_07.png?alt=media&token=843111cb-1887-4b26-86ea-a3dbc1ea0031" alt="// 之前已使用過會開啟某一個專案"></p>
</li>
<li><p>上方已經有使用 cli 新增裝案，就可以選取 “ 匯入 “ 方式來把專案匯入。</p>
</li>
<li><p>如要建立新專案</p>
<ol>
<li><p>終端機輸入 <code>vue ui</code> 會開啟介面 → 新增</p>
<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E7%B0%A1%E8%BF%B0%20Vue%20Cli%20%E4%B8%A6%E4%BB%A5%20GUI%20%E4%BB%8B%E9%9D%A2%E6%93%8D%E4%BD%9C_08.png?alt=media&token=af4d3bde-4441-40e1-ac5f-3170220f85b2" alt="// Vue GUI 介面"></p>
</li>
<li><p>選擇檔案要放置的路徑 ( 這邊選取桌面的 practiveVue 資料夾 ) → 按下 + 在此新增專案 → 填寫資料 → 接下來會出現一連串類似 vue cli 設定的選項 :</p>
<ol>
<li>選擇一套模板 : <code>手動</code></li>
<li>選擇功能 : <code>Choose Vue version、Babel、Router、CSS Pre-processors、Linter / Formatter</code> 。</li>
<li>Choose a version of Vue.js that you want to start the project with : <code>3.X</code></li>
<li>Use history mode for router?  <code>不開啟</code> ( 開啟的話伺服器是需要進行重新設定的 )</li>
<li>Pick a CSS pre-processor :  <code>Sass/SCSS (with node-sass)</code></li>
<li>Pick a linter &#x2F; formatter config : <code>ESLint + Standard config</code> ( 可看<a href="https://www.notion.so/Vue-Cli-GUI-ba33df715e424464990115bf5493d4f8">上方設定解說</a> )</li>
<li>Pick additional lint features:</li>
</ol>
<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E7%B0%A1%E8%BF%B0%20Vue%20Cli%20%E4%B8%A6%E4%BB%A5%20GUI%20%E4%BB%8B%E9%9D%A2%E6%93%8D%E4%BD%9C_09.png?alt=media&token=e729cbaa-e02c-4ea1-ba9d-a0c7dc80488f" alt="// Vue GUI 介面"></p>
<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E7%B0%A1%E8%BF%B0%20Vue%20Cli%20%E4%B8%A6%E4%BB%A5%20GUI%20%E4%BB%8B%E9%9D%A2%E6%93%8D%E4%BD%9C_010.png?alt=media&token=6b6f5a9a-8b2b-41ca-a806-e935e0bbac60" alt="// Vue GUI 介面"></p>
</li>
<li><p>設定完後會詢問是否要保這些這訂做保留，先按不保存。</p>
</li>
</ol>
<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E7%B0%A1%E8%BF%B0%20Vue%20Cli%20%E4%B8%A6%E4%BB%A5%20GUI%20%E4%BB%8B%E9%9D%A2%E6%93%8D%E4%BD%9C_011.png?alt=media&token=df902953-85d3-4acd-9973-cea5a1de8ab9" alt="// Vue GUI 介面"></p>
<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E7%B0%A1%E8%BF%B0%20Vue%20Cli%20%E4%B8%A6%E4%BB%A5%20GUI%20%E4%BB%8B%E9%9D%A2%E6%93%8D%E4%BD%9C_012.png?alt=media&token=1d46a7ae-80a5-433d-872c-3d72fc3e3fb2" alt="CUI 安裝同時，終端機也會一起做奔跑 ▲"></p>
</li>
<li><p>專案建立完成會呈現下方樣式</p>
<ul>
<li>插件選單 : 會影響到 webpack 運行的功能，這些套件都是在專案安裝過程我們選好的，所以不太會去調整它。</li>
<li>依賴選單 : 不會直接影響到 webpack 運行，獲這些項目是相依於插件選單內的套件所使用的。如果開發過程要引入其他插件也會在依賴選單這邊做選擇。如果要安裝 Bootstrap 會於此做安裝。</li>
<li>任務選單 :<ul>
<li>裡面的 serve 裡的執行按鈕，如同 vue cil 中終端機運行 <code>npm run serve</code> 指令，可把專案環境運行起來。</li>
<li>serve → 執行完成後，右方的輸入按鈕內的介面如同 vue cli 把環境運行完成後會出現兩個連結 ( Local 、Network ) 按下其中一個就會開啟網頁。</li>
<li>編譯 → 執行完成後，專案內會出現 dist 資料夾，為專案完整編譯的結果</li>
</ul>
</li>
</ul>
<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E7%B0%A1%E8%BF%B0%20Vue%20Cli%20%E4%B8%A6%E4%BB%A5%20GUI%20%E4%BB%8B%E9%9D%A2%E6%93%8D%E4%BD%9C_013.png?alt=media&token=555265b5-e4ee-4620-bb3a-b5b14af3508e" alt="// Vue GUI 介面"></p>
<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E7%B0%A1%E8%BF%B0%20Vue%20Cli%20%E4%B8%A6%E4%BB%A5%20GUI%20%E4%BB%8B%E9%9D%A2%E6%93%8D%E4%BD%9C_014.png?alt=media&token=2764fedc-4a07-4206-b923-c471fab67385" alt="// Vue GUI 介面"></p>
</li>
</ol>
<h2 id="資訊來源"><a href="#資訊來源" class="headerlink" title="資訊來源"></a>資訊來源</h2><ul>
<li>六角學院 : Vue 3 實戰影音課程</li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Vue3</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Postman 進行 API 測試</title>
    <url>/tools/20230327/1259632675/</url>
    <content><![CDATA[<h2 id="挑戰目標"><a href="#挑戰目標" class="headerlink" title="挑戰目標"></a>挑戰目標</h2><p>使用 Postman 建立 request 並搭配 Collections Test 測試五隻 API，HTTP Status 必須為 200。</p>
<ul>
<li>使用 Postman 建立 Env Url 變數</li>
<li>建立 Collections Test 測試五隻 API，HTTP Status 必須為 200</li>
</ul>
<h2 id="API-文件"><a href="#API-文件" class="headerlink" title="API 文件"></a>API 文件</h2><p>怕洩漏到課程資訊，擷取六角 API 文件中關鍵資料，以文字方式呈現</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># [Get] 取得產品列表</span><br><span class="line">## API Url → https://hex-escape-room.herokuapp.com</span><br><span class="line">## HTTP Method → GET</span><br><span class="line">## API Path → /api/shopping/v1/products?category=xxx</span><br><span class="line">## API Description → 若沒有帶入 Query 預設會回傳全部產品列表，若 category 不存在則也會回傳全部產品。</span><br><span class="line"></span><br><span class="line"># [Get] 取得單一產品詳細資訊</span><br><span class="line">## API Url → https://hex-escape-room.herokuapp.com</span><br><span class="line">## HTTP Method → GET</span><br><span class="line">## API Path → /api/shopping/v1/product/:id</span><br><span class="line">## API Description → 取得單一產品詳細資訊，包含描述欄位。</span><br><span class="line">## Request Param → id (產品 ID，必填)</span><br><span class="line"></span><br><span class="line"># [Post] 新增產品</span><br><span class="line">## API Url → https://hex-escape-room.herokuapp.com</span><br><span class="line">## HTTP Method → POST</span><br><span class="line">## API Path → /api/shopping/v1/product</span><br><span class="line">## API Description → 新增產品，請務必注意必填欄位與型別。</span><br><span class="line"></span><br><span class="line"># [Put] 編輯產品</span><br><span class="line">## API Url → https://hex-escape-room.herokuapp.com</span><br><span class="line">## HTTP Method → PUT</span><br><span class="line">## API Path → /api/shopping/v1/product/:id</span><br><span class="line">## API Description → 編輯產品，請務必注意必填欄位與型別。</span><br><span class="line">## Request Param → ID (產品 ID)</span><br><span class="line"></span><br><span class="line"># [Patch] 修改產品狀態</span><br><span class="line">## API Url → https://hex-escape-room.herokuapp.com</span><br><span class="line">## HTTP Method → PATCH</span><br><span class="line">## API Path → /api/shopping/v1/product/:id</span><br><span class="line">## API Description → 修改產品狀態</span><br><span class="line">## Request Param → ID (產品 ID)</span><br></pre></td></tr></table></figure>

<h2 id="操作步驟"><a href="#操作步驟" class="headerlink" title="操作步驟"></a>操作步驟</h2><h3 id="Step1-Postman-安裝"><a href="#Step1-Postman-安裝" class="headerlink" title="Step1. Postman 安裝"></a>Step1. Postman 安裝</h3><p>文章 : <a href="https://israynotarray.com/other/20211207/427026/">跟著我一起快速入門 Postman 吧！</a></p>
<h3 id="Step2-建立環境變數-Environments"><a href="#Step2-建立環境變數-Environments" class="headerlink" title="Step2. 建立環境變數 Environments"></a>Step2. 建立環境變數 <strong><strong>Environments</strong></strong></h3><p>要測試的 5 支 API ，開頭網址皆為 <code>https://hex-escape-room.herokuapp.com</code> 的 API Url，可以先建立一個環境變數。</p>
<ol>
<li><p>點選左側欄 Environments ，進入後點擊 + 新增一個 Environments。<br> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E4%BD%BF%E7%94%A8Potman%E9%80%B2%E8%A1%8CAPI%E6%B8%AC%E8%A9%A6_01.png?alt=media&token=b4d1dfd0-5fd0-44d4-a901-2675dc94c802" alt="// 新增 Environments"></p>
</li>
<li><p>建立好環境變數 ( Env ) 後，進行命名 「商品資料 Env」。<br> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E4%BD%BF%E7%94%A8Potman%E9%80%B2%E8%A1%8CAPI%E6%B8%AC%E8%A9%A6_02_%E7%92%B0%E5%A2%83%E8%AE%8A%E6%95%B8%E5%91%BD%E5%90%8D.png?alt=media&token=5b3efda5-0882-4f3d-9e3a-6d36ebe17e26" alt="// 環境變數命名"></p>
</li>
<li><p>將環境變數 ( Env ) 改成剛編輯的名字 「商品資料 Env」。<br> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E4%BD%BF%E7%94%A8Potman%E9%80%B2%E8%A1%8CAPI%E6%B8%AC%E8%A9%A6_03_%E6%8A%8AEnv%E6%94%B9%E7%82%BA%E6%96%B0%E5%91%BD%E5%90%8D%E7%9A%84%E5%90%8D%E5%AD%97.png?alt=media&token=d12dcd03-d47c-43b7-a118-0a5938561915" alt="// 把 Env 改為新命名的名字"></p>
</li>
<li><p>進行環境變數 ( Env ) 相關設定</p>
<ul>
<li>VARIABLE 命名為 <code>API_URL</code>。</li>
<li>INITIAL VALUE 填入要測試的 5支 API 相同開頭的網址<code>https://hex-escape-room.herokuapp.com</code>。<br> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E4%BD%BF%E7%94%A8Potman%E9%80%B2%E8%A1%8CAPI%E6%B8%AC%E8%A9%A6_04_%E9%80%B2%E8%A1%8C%E7%92%B0%E5%A2%83%E8%AE%8A%E6%95%B8_(_Env_)_%E7%9B%B8%E9%97%9C%E8%A8%AD%E5%AE%9A.png?alt=media&token=d117fdde-3e74-4b71-ad2b-a890b4429977" alt="// 進行環境變數 (Env) 相關設定"></li>
</ul>
</li>
<li><p>最後記得按下 Save。</p>
</li>
</ol>
<h3 id="Step3-建立收藏-Collections"><a href="#Step3-建立收藏-Collections" class="headerlink" title="Step3. 建立收藏 Collections"></a>Step3. 建立收藏 Collections</h3><ol>
<li>進左側欄 Collections → 點擊 + create new collections。</li>
<li>把 Collections 命名為 「商品資訊 API Test」。</li>
<li>於 「商品資訊 API Test」新增請求 ( add request )。<br> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E4%BD%BF%E7%94%A8Potman%E9%80%B2%E8%A1%8CAPI%E6%B8%AC%E8%A9%A6_05_Collections%E6%96%B0%E5%A2%9E%E8%AB%8B%E6%B1%82.png?alt=media&token=7fb22180-cf0a-4a17-87ee-09ff4e471f47" alt="// Collections新增請求"></li>
<li>於 「商品資訊 API Test」新增請求 ( add request ) 後，依據 <a href="https://www.notion.so/Post-man-API-ed3793ced5ac4cec98852e29c71b6372">公司給了五支 API</a> : <code>GET</code>、<code>POST</code>、<code>PUT</code>、<code>PATCH</code> 進行新增。<ol>
<li><p><code>GET</code> 取得商品列表 ( 上方 API 文件 )</p>
<ol>
<li>把 request 名稱改為 「取得商品列表」。</li>
<li>已設好環境變數，所以 Get 的網址調整為 <code>&#123;&#123;環境變數中的 VARIABLE&#125;&#125;取得商品列表的API Path</code>，按下 Sent 按鈕，如果 API 沒問題下方就會顯示 200 ok。<br> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E4%BD%BF%E7%94%A8Potman%E9%80%B2%E8%A1%8CAPI%E6%B8%AC%E8%A9%A6_06.png?alt=media&token=86746a29-c219-4e5e-a199-46e58028be08" alt="// 使用 Potman 進行 API 測試"></li>
<li>記得按下 Save 可收藏請求。</li>
</ol>
</li>
<li><p><code>GET</code> 取得單一產品詳細資訊 ( 上方 API 文件 )</p>
<ol>
<li>add request → 把 request 名稱改為 「取得單一產品詳細資訊」</li>
<li>文件中的 Api Path 後方有 <code>:id</code>，把文件中 id 複製貼於 「取得單一產品詳細資訊」請求的 Path Variables 中。<br> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E4%BD%BF%E7%94%A8Potman%E9%80%B2%E8%A1%8CAPI%E6%B8%AC%E8%A9%A6_07.png?alt=media&token=657a03f3-6d26-40bd-bcd4-f393b5f65613" alt="// 把 API 文件中的 id 填入"><br> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E4%BD%BF%E7%94%A8Potman%E9%80%B2%E8%A1%8CAPI%E6%B8%AC%E8%A9%A6_08.png?alt=media&token=55ac6a55-3e2e-41bc-ae14-9d0c6daa8976" alt="// 把 API 文件中的 id 填入"></li>
<li>按下 Send 按鈕測試 HTTP Status 是否為 200，沒問題的話記得按下 Save。</li>
</ol>
</li>
<li><p><code>POST</code> 新增商品 ( 上方 API 文件 )</p>
<ol>
<li><p>add request → 把 request 名稱改為 「新增商品」→ methods 選 <code>POST</code> → 網址如步驟 2。</p>
</li>
<li><p>文件中表示 「新增產品，請務必注意必填欄位與型別。」，把文件中 Example JSON 程式碼貼於 body → raw → Text 選取 JSON。</p>
 <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 文件中 Example JSON</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gNd4cp2u5NxXTTaT&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;KoboGame&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;category&quot;</span><span class="punctuation">:</span> <span class="string">&quot;game&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1000&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;超好玩遊戲&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E4%BD%BF%E7%94%A8Potman%E9%80%B2%E8%A1%8CAPI%E6%B8%AC%E8%A9%A6_09.png?alt=media&token=5b31de63-c0b1-4a15-8144-228f9253ca21" alt="// 把文件中 Example JSON 程式碼貼於 body → raw → Text 選取 JSON"></p>
</li>
<li><p>出現 HTTP Status 400，老師有埋陷阱 XD，按照指使後，把屬性 price 的屬性值型別改為數字即可。<br> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E4%BD%BF%E7%94%A8Potman%E9%80%B2%E8%A1%8CAPI%E6%B8%AC%E8%A9%A6_10.png?alt=media&token=8c6e5f72-f061-4f27-973e-4dbe4e023270" alt="// 陷阱，把 price 屬性改為數字"></p>
 <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 調整後</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gNd4cp2u5NxXTTaT&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;KoboGame&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;category&quot;</span><span class="punctuation">:</span> <span class="string">&quot;game&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="number">1000</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;超好玩遊戲&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p><code>PUT</code> 編輯商品 ( 上方 API 文件 )</p>
<ol>
<li><p>API Path 出現 <code>:id</code>，依文件中 Example JSON 得知商品資訊，到 「取得商品列表」request 找此商品的 id，貼於 Params → Path Variables 的 id 中。<br> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E4%BD%BF%E7%94%A8Potman%E9%80%B2%E8%A1%8CAPI%E6%B8%AC%E8%A9%A6_11.png?alt=media&token=f8887b48-26c1-4ac3-96d3-c128c60ef382" alt="// 文件中Example JSON程式碼貼入Body→raw"></p>
<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E4%BD%BF%E7%94%A8Potman%E9%80%B2%E8%A1%8CAPI%E6%B8%AC%E8%A9%A6_12.png?alt=media&token=be040645-c545-4fad-b1e9-2a0a864e7fc4" alt="// 依文件中Example JSON得知商品資訊，到「取得商品列表」request找此商品的id"></p>
</li>
</ol>
</li>
<li><p><code>Patch</code> 修改商品狀態 ( 上方 API 文件 )</p>
<ol>
<li>依照步驟 3.d 。Params 的 id 可以到 「取的商品列表」request 隨便找一個商品 id 填入。<br> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E4%BD%BF%E7%94%A8Potman%E9%80%B2%E8%A1%8CAPI%E6%B8%AC%E8%A9%A6_13_%E6%96%B0%E5%A2%9E_request.png?alt=media&token=bcb6cd74-9c63-48ea-bb12-83d09d8f4569" alt="// 於 collections 新增請求(add request)"></li>
</ol>
</li>
</ol>
</li>
</ol>
<h3 id="Step4-自動-API-測試"><a href="#Step4-自動-API-測試" class="headerlink" title="Step4. 自動 API 測試"></a>Step4. 自動 API 測試</h3><p>可參考文章中的 <a href="https://israynotarray.com/other/20211207/427026/#%E8%87%AA%E5%8B%95-API-%E6%B8%AC%E8%A9%A6-Auto-Collection-Test">自動 API 測試 (Auto Collection Test)</a></p>
<ol>
<li><p>進左側欄 Collections → 點擊步驟 #2 新增的 「商品資訊 API Test」 收藏。<br> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E4%BD%BF%E7%94%A8Potman%E9%80%B2%E8%A1%8CAPI%E6%B8%AC%E8%A9%A6_14.png?alt=media&token=dce25a87-91bd-420d-a869-9feca14e3578" alt="// 收藏 Collections"></p>
</li>
<li><p>進入後點擊下方的 「Test」，選取 「Status code: Code is 200」會生成一段程式碼 → 按 Save 儲存。</p>
</li>
<li><p>按下 Run<br> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E4%BD%BF%E7%94%A8Potman%E9%80%B2%E8%A1%8CAPI%E6%B8%AC%E8%A9%A6_15.png?alt=media&token=22e3088e-c028-43b1-81b6-53d6fb1b7688" alt="// 按下 Run"></p>
</li>
<li><p>點擊 「Run 商品資訊 API Test」→ 就可以直接把所有要測試的 API 一次測試完囉 !<br> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E4%BD%BF%E7%94%A8Potman%E9%80%B2%E8%A1%8CAPI%E6%B8%AC%E8%A9%A6_16.png?alt=media&token=5a263257-e40f-4c52-b79a-b9c7908ed897" alt="// 點擊Run 商品資訊 API Test 按鈕"></p>
<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E4%BD%BF%E7%94%A8Potman%E9%80%B2%E8%A1%8CAPI%E6%B8%AC%E8%A9%A6_17.png?alt=media&token=742de7d0-577c-4e3d-96af-83afb3cd86ae" alt="// 所有API一次測試完成"></p>
</li>
</ol>
<h2 id="模擬測試單支-API"><a href="#模擬測試單支-API" class="headerlink" title="模擬測試單支 API"></a>模擬測試單支 API</h2><p>這邊依上方 API 文件中的 “ [Get] 取得單一產品詳細資訊 “ 為例 ，測試此 API 使否可使用。</p>
<ol>
<li><p>新增請求</p>
<ol>
<li><p>快捷鍵</p>
<ul>
<li>Mac : <code>Command</code> + <code>N</code></li>
<li>Windows : <code>Ctrl</code> + <code>N</code></li>
</ul>
</li>
<li><p>面板上的 <code>New</code> 或  <code>+</code>。<br> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E4%BD%BF%E7%94%A8Potman%E9%80%B2%E8%A1%8CAPI%E6%B8%AC%E8%A9%A6_18_%E6%96%B0%E5%A2%9E%E8%AB%8B%E6%B1%82%E6%96%B9%E5%BC%8F.png?alt=media&token=ba736b5c-6b44-4b00-ae81-f0494f34677c" alt="// 新增請求方式"></p>
<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E4%BD%BF%E7%94%A8Potman%E9%80%B2%E8%A1%8CAPI%E6%B8%AC%E8%A9%A6_19_%E6%96%B0%E5%A2%9E%E8%AB%8B%E6%B1%82%E6%96%B9%E5%BC%8FHTTPRequest.png?alt=media&token=a9354d72-abe8-4d21-ad36-8605e94e4136" alt="// 新增請求方式HTTPRequest"></p>
</li>
</ol>
</li>
<li><p>選取請求方式 GET<br> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E4%BD%BF%E7%94%A8Potman%E9%80%B2%E8%A1%8CAPI%E6%B8%AC%E8%A9%A6_20_%E5%96%AE%E6%94%AFAPI%E6%B8%AC%E8%A9%A6_01.png?alt=media&token=4e8164f2-d8e6-440e-8db6-6b79604ebf0f" alt="// 單支API測試_01"></p>
</li>
<li><p>複製 API 文件中的 API Url 與 API Path，貼入後方欄位</p>
<ol>
<li><p>API Path 中 <code>:id</code> 部份已事先查詢，可參考上方操作步驟 Step3. 4( <code>Y4agVBkW3c2Y5q9U</code> )。<br> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E4%BD%BF%E7%94%A8Potman%E9%80%B2%E8%A1%8CAPI%E6%B8%AC%E8%A9%A6_21_%E5%96%AE%E6%94%AFAPI%E6%B8%AC%E8%A9%A6_02.png?alt=media&token=cbe91f0c-2cfb-4b23-9462-e40d366a368c" alt="// 單支API測試_02"><br> <small>&#x2F;&#x2F; <a href="https://www.notion.so/Get-b214c92e0a504d9bbaf14f0b7d8efa15">[Get] 取得單一產品詳細資訊</a> 文件 ▲</small></p>
<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E4%BD%BF%E7%94%A8Potman%E9%80%B2%E8%A1%8CAPI%E6%B8%AC%E8%A9%A6_22_%E5%96%AE%E6%94%AFAPI%E6%B8%AC%E8%A9%A6_03.png?alt=media&token=af7aa666-4361-4a2d-bf4a-a3e1dd86aa11" alt="// 單支API測試_03"><br> <small>&#x2F;&#x2F; 複製 API 文件中的 API Url 與 API Path 貼入欄位內 ▲</small></p>
</li>
</ol>
</li>
<li><p>按下 Send 按鈕測試 HTTP Status 為 200，下方出現此筆 id 相關資訊，成功 !<br> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E4%BD%BF%E7%94%A8Potman%E9%80%B2%E8%A1%8CAPI%E6%B8%AC%E8%A9%A6_23_%E5%96%AE%E6%94%AFAPI%E6%B8%AC%E8%A9%A6_04.png?alt=media&token=0efa521c-2d1b-4c1d-8949-4b905182ac4e" alt="// 單支API測試_04"></p>
</li>
</ol>
<h2 id="參考資訊"><a href="#參考資訊" class="headerlink" title="參考資訊"></a>參考資訊</h2><ul>
<li><a href="https://www.hexschool.com/courses/escape.html">六角學院 - 前端密室逃脫</a></li>
<li><a href="https://israynotarray.com/other/20211207/427026/">跟著我一起快速入門 Postman 吧！</a></li>
</ul>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Postman</tag>
        <tag>API</tag>
      </tags>
  </entry>
  <entry>
    <title>tilt.js 套件 - 3D 互動效果</title>
    <url>/plugins/20230327/3538132004/</url>
    <content><![CDATA[<p><img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/gif%2Ftilt.js%E5%A5%97%E4%BB%B63D%20%E4%BA%92%E5%8B%95%E6%95%88%E6%9E%9C_01.gif?alt=media&token=671dbfac-d395-4789-b09d-5d54e271072e" alt=" // 2022 The F2E 官網互動效果"></p>
<h2 id="套件版本"><a href="#套件版本" class="headerlink" title="套件版本"></a>套件版本</h2><p>該套件有兩種版本：</p>
<ol>
<li>jQuery 版：<a href="http://gijsroge.github.io/tilt.js/">Tilt.js</a>。</li>
<li>JS 版：<a href="https://micku7zu.github.io/vanilla-tilt.js/">Vanilla-Tilt</a>。( 本筆記使用此版 )</li>
</ol>
<h2 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h2><p>可使用 ① npm 、② 下載文件中的 js 檔到專案內、③ <a href="https://cdnjs.com/libraries/vanilla-tilt">CDN 方式</a> ( 本筆記使用方式 )。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">https://cdnjs.cloudflare.com/ajax/libs/vanilla-tilt/1.7.2/vanilla-tilt.min.js</span><br></pre></td></tr></table></figure>

<h2 id="結構"><a href="#結構" class="headerlink" title="結構"></a>結構</h2><p>tilt.js 套件的套用方式 ① HTML ② JS 可擇一選擇。</p>
<p>① HTML 方式</p>
<p><a href="https://codepen.io/echocarriet/pen/PoaoMow">Codepen 範例</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;網址&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">data-tilt</span> </span></span><br><span class="line"><span class="tag"><span class="attr">data-tilt-max</span>=<span class="string">&quot;25&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">data-tilt-scale</span>=<span class="string">&quot;1.1&quot;</span> </span></span><br><span class="line"><span class="tag">&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>在要套用的元素先加上 <code>data-tilt</code>，再依序於 <code>data-tilt-</code> 後方加上想要的效果屬性與數值，如果要傾斜角度 25 度，則為 <code>data-tilt-max=&quot;25&quot;</code>。</li>
</ul>
<p>② JS 方式</p>
<p><a href="https://codepen.io/echocarriet/pen/JjZjgom">Codepen 範例</a></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用.querySelector() 方式來選取要操作的 DOM。</span></span><br><span class="line"><span class="title class_">VanillaTilt</span>.<span class="title function_">init</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;選擇器&#x27;</span>), &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>直接把效果寫在 <code>&#123;&#125;</code> 中。</li>
</ul>
<h2 id="屬性"><a href="#屬性" class="headerlink" title="屬性"></a>屬性</h2><ul>
<li><code>reverse</code>：反轉傾斜方向</li>
<li><code>max</code>：最大傾斜旋轉角度</li>
<li><code>startX</code>：X 軸上的起始傾斜度，以度為單位</li>
<li><code>startY</code>：Y 軸上的起始傾斜度，以度為單位</li>
<li><code>perspective</code>：變換透視，越低傾斜越極端。可參考<a href="https://micku7zu.github.io/vanilla-tilt.js/">文件</a>中的 「 Creating a parallax effect 」。</li>
<li><code>scale</code>：hover 放大多少 (  2 &#x3D; 200%, 1.5 &#x3D; 150%, etc.. )</li>
<li><code>speed</code>：hover 進入 &#x2F; 退出轉換的速度。( 傾斜轉換的速度 )</li>
<li><code>transition</code>：hover 進入 &#x2F; 退出的設置轉換。</li>
<li><code>axis</code>：要禁用哪個軸 ( X 或 Ｙ )</li>
<li><code>reset</code>：傾斜效果必須在退出時重置</li>
<li><code>easing</code>：hover 進入 &#x2F; 退出時的緩衝。</li>
<li><code>glare</code>：是否開啟眩光效果。</li>
<li><code>&quot;max-glare&quot;</code>：最大炫光不透明度</li>
<li><code>&quot;glare-prerender&quot;</code>：</li>
<li><code>&quot;mouse-event-element&quot;</code>：用滑鼠事件監聽 CSS 選擇器或 HTML 元素。</li>
<li><code>gyroscope</code>：啟用&#x2F;禁用設備方向檢測的布林值。</li>
<li><code>gyroscopeMinAngleX</code>：這是 X 軸上設備角度的下限，這意味著以該角度旋轉的設備會傾斜元素，就好像鼠標在元素的底部邊框上一樣。</li>
<li><code>gyroscopeMaxAngleX</code>：這是 X 軸上設備角度的上限，這意味著以該角度旋轉的設備會傾斜元素，就好像鼠標在元素的底部邊框上一樣。</li>
<li><code>gyroscopeMinAngleY</code>：這是 Y 軸上設備角度的下限，這意味著以該角度旋轉的設備會傾斜元素，就好像鼠標在元素的底部邊框上一樣。</li>
<li><code>gyroscopeMaxAngleY</code>：這是 Y 軸上設備角度的上限，這意味著以該角度旋轉的設備會傾斜元素，就好像鼠標在元素的底部邊框上一樣。</li>
</ul>
<h2 id="參考資訊"><a href="#參考資訊" class="headerlink" title="參考資訊"></a>參考資訊</h2><ul>
<li><a href="https://hackmd.io/ofJD4K7iSI65V19zxC7d0w">2022 TheF2E 攻略資源</a></li>
<li><a href="https://www.notion.so/tilt-js-3D-a8f08b6743b940cba680813d5db33ca4">Vanilla-Tilt</a> [官方文件](<a href="https://micku7zu.github.io/vanill">https://micku7zu.github.io/vanill</a></li>
</ul>
]]></content>
      <categories>
        <category>Plugins</category>
      </categories>
      <tags>
        <tag>vanilla-tilt.js</tag>
        <tag>tilt.js</tag>
      </tags>
  </entry>
  <entry>
    <title>客製 Sass 模組化設計</title>
    <url>/scss/20230327/3866487804/</url>
    <content><![CDATA[<h2 id="❒-前言"><a href="#❒-前言" class="headerlink" title="❒ 前言"></a>❒ 前言</h2><p>自訂 Sass Module ( 像 BS ) 上傳 GitHub 並於要使用的專案中安裝使用，就不需要每次開發都重新架設環境，可加速開發效率。</p>
<p>此文將會提到 ➀ 客製 Sass 模組化 ➁ 升級模組框架並新增版本號 ➂ 於專案引用不同版本號模組。</p>
<h2 id="❒-使用環境"><a href="#❒-使用環境" class="headerlink" title="❒ 使用環境"></a>❒ 使用環境</h2><ul>
<li>VSCode<ul>
<li>Live Sass Compiler 套件</li>
<li>Live Server 套件</li>
</ul>
</li>
<li>npm ( 管理模組 )</li>
<li>Git ( 做版本控制 )</li>
<li>GitHub ( 模組上傳至此，方便更新版本並隨時於新專案安裝使用 )</li>
</ul>
<h2 id="❒-流程"><a href="#❒-流程" class="headerlink" title="❒ 流程"></a>❒ 流程</h2><ol>
<li>建立一個框架，並包含變數、基本樣式、Package.json。</li>
<li>上傳到 GitHub。</li>
<li>建立一個專案，引用該框架內容。</li>
<li>升級框架，並增加版本號。</li>
<li>專案升級，選擇特定版本號。</li>
<li>預設值覆蓋。</li>
</ol>
<h2 id="❒-為何需要預先定義模組"><a href="#❒-為何需要預先定義模組" class="headerlink" title="❒ 為何需要預先定義模組"></a>❒ 為何需要預先定義模組</h2><ul>
<li>Dry ( Don’t repeat your self )，重複的事情別一直做。</li>
<li>確保團隊開發視覺一致</li>
<li>依據公司需求客製的擴展性</li>
<li>視覺設計<ul>
<li>設計具有參考</li>
<li>設計語言部會隨著專案不同而改變</li>
<li>模組受到版本控制</li>
</ul>
</li>
</ul>
<h2 id="❒-客製-Sass-模組並上傳至-GitHub"><a href="#❒-客製-Sass-模組並上傳至-GitHub" class="headerlink" title="❒ 客製 Sass 模組並上傳至 GitHub"></a>❒ 客製 Sass 模組並上傳至 GitHub</h2><h3 id="❶-建立-Sass-模組化的資料夾，使用-npm-操作版控"><a href="#❶-建立-Sass-模組化的資料夾，使用-npm-操作版控" class="headerlink" title="❶ 建立 Sass 模組化的資料夾，使用 npm 操作版控"></a>❶ 建立 Sass 模組化的資料夾，使用 npm 操作版控</h3><ul>
<li><p>本地端新增專案資料夾 SassModuleNote_sample ( 可自行命名 )。</p>
</li>
<li><p>npm 版控，先初始化 <code>npm init</code>。</p>
<ul>
<li>專案內會產生 package.json 檔案。</li>
<li>package.json 內的 <code>&quot;name&quot;</code> 為專案名稱  SassModuleNote_sample，從 GitHub 拉下的資料夾也會是相同名。</li>
</ul>
</li>
<li><p>專案內新增 scss 檔案 :</p>
<ul>
<li><p>可參考 Bootstrap GitHub 中的 scss 資料夾來製作自己的 Sass 模組化資料，製作好後就可以進入下個步驟上傳至 GitHub。</p>
<ul>
<li><a href="https://github.com/twbs/bootstrap/tree/v5.2.3/scss">版本號 v5.2.3</a></li>
</ul>
</li>
<li><p><code>_variables.scss</code> ( 不會被編譯 )</p>
</li>
<li><p><code>SassModuleNote_sample.scss</code> ( 會被編譯 )</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// _variables.scss</span></span><br><span class="line"><span class="variable">$primary-color</span>: <span class="number">#00cc99</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SassModuleNote_sample.scss</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;variables&quot;</span>; </span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>目前未調整編譯後的 css 檔案位置，先不要點擊 VSCode 下方的 Watch Sass。</p>
</li>
</ul>
<h3 id="❷-調整-Sass-檔案輸出的位置"><a href="#❷-調整-Sass-檔案輸出的位置" class="headerlink" title="❷ 調整 Sass 檔案輸出的位置"></a>❷ 調整 Sass 檔案輸出的位置</h3><p>專案路徑 : VSCode 設定 &#x2F; 工作區 ( Workspace ) &#x2F; 開啟 JSON 設定 : settings.json</p>
<p><strong>自訂 Sass 輸出位置 settings.json</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ----- 工作區 settings.json</span></span><br><span class="line"><span class="attr">&quot;liveSassCompile.settings.formats&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"> <span class="comment">// This is Default. 為展開的形式</span></span><br><span class="line"> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;format&quot;</span><span class="punctuation">:</span> <span class="string">&quot;expanded&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;extensionName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.css&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;savePath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/dist/css&quot;</span></span><br><span class="line"> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"> <span class="comment">// You can add more 為壓縮的形式</span></span><br><span class="line"> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;format&quot;</span><span class="punctuation">:</span> <span class="string">&quot;compressed&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;extensionName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.min.css&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;savePath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/dist/css&quot;</span></span><br><span class="line"> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>&quot;savePath&quot;</code> 中編譯後的 css 檔案可自訂要放哪個位置。</li>
<li>調整好後，點擊 VSCode 下方的 Watch Sass 就會編譯出 dist 資料夾內含 css 檔 ( 展開與壓縮格式的 css 檔 )。</li>
</ul>
<p><strong>補充 :</strong></p>
<ul>
<li>format : 編譯後的 CSS 格式。<ul>
<li>expanded : 未壓縮。</li>
<li>compressed : 壓縮。</li>
</ul>
</li>
<li>extensionName : 編譯後產生的副檔名。</li>
<li>savePath : 此檔案儲存的路徑，請自行調整路徑。</li>
</ul>
<h3 id="❸-上傳至-GitHub"><a href="#❸-上傳至-GitHub" class="headerlink" title="❸ 上傳至 GitHub"></a>❸ 上傳至 GitHub</h3><p><strong>➀ 專案執行 git 指令做版控</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commit -m<span class="string">&quot;update 1.0.0&quot;</span> (package.json中的version，請自行更換名稱)</span><br></pre></td></tr></table></figure>

<p><strong>➁ 於 GitHub 新增 Res，把模組化專案上傳至 GitHub</strong></p>
<ul>
<li>把 GitHub 中 <code>…or push an existing repository from the command line</code> 內的指令複製貼入 VSCode 終端機。</li>
</ul>
<h2 id="❒-於新專案中使用剛上傳至-GitHub-的客製-Sass-模組"><a href="#❒-於新專案中使用剛上傳至-GitHub-的客製-Sass-模組" class="headerlink" title="❒ 於新專案中使用剛上傳至 GitHub 的客製 Sass 模組"></a>❒ 於新專案中使用剛上傳至 GitHub 的客製 Sass 模組</h2><h3 id="❹-把剛上傳的-Sass-模組化拉下來新專案使用"><a href="#❹-把剛上傳的-Sass-模組化拉下來新專案使用" class="headerlink" title="❹ 把剛上傳的 Sass 模組化拉下來新專案使用"></a>❹ 把剛上傳的 Sass 模組化拉下來新專案使用</h3><p>完成上方 ❶ ～ ❸ 步驟後，之後有新的專案，就可以使用下面方式把自製的 Sass 模組化資料夾拉下來使用囉！ ( 拉下來後會顯示在 <code>node_module</code> 資料夾內 )</p>
<ol>
<li><p>本地端新增一個名為 project  專案資料夾。</p>
</li>
<li><p>複製剛上傳 GitHub 模組化專案 ( SassModuleNote_sample  ) 的連結。</p>
<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E5%AE%A2%E8%A3%BD%20Sass%20%E6%A8%A1%E7%B5%84%E5%8C%96%E8%A8%AD%E8%A8%88_01.png?alt=media&token=f21c463e-43cb-4115-9650-c064586fc409" alt="// GitHub 模組化專案的 SSH URL"></p>
</li>
<li><p>project 專案拉進 VSCode  → 終端機執行初始化指令 <code>npm init</code> ( 如果沒有做細部設定可直接一直按 Enter ) → 終端機內輸入指令 <code>npm install 步驟2的URL —-save</code>。</p>
<ol>
<li><p>加上 <code>--save</code> 除了會把 GitHub 模組化專案的框架內容直接存於 package.json，也會把 GitHub 模組化專案的框架拉下來。框架拉下來後可於 <code>node_module</code> 資料夾內看見。</p>
<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E5%AE%A2%E8%A3%BD%20Sass%20%E6%A8%A1%E7%B5%84%E5%8C%96%E8%A8%AD%E8%A8%88_02.png?alt=media&token=4f9e3d52-90e4-491c-8b0d-1083a51bbef3" alt="// node_module 資料夾"></p>
</li>
</ol>
</li>
<li><p>專案內新增 index.html 與 scss 資料夾與檔案</p>
<ol>
<li>專案 &#x2F; scss 資料夾 &#x2F; all.scss<ol>
<li><p>all.scss 裏面引入客製模組的 ➀ 所有 scss ② 所需的 scss 檔案，擇一即可。</p>
 <figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入SassModuleNote_sample專案內所有scss檔案</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;../node_modules/SassModuleNote_sample/scss/SassModuleNote_sample&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入SassModuleNote_sample專案所需的scss檔案,以變數為例</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;../node_modules/SassModuleNote_sample/scss/_variables&#x27;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>按下 Watch Sass 前請先參考「 ❷ 調整 Sass 檔案輸出的位置 」調整編譯出來的 css 檔案位置。</p>
</li>
</ol>
</li>
<li>專案 &#x2F; index.html 匯入編譯後的 css 檔案，上方 4.ii 就可以套用自製的模組囉！</li>
</ol>
</li>
<li><p>如果自製的模組有分不同版本號，抓下來沒選要安裝哪個版本號就會抓下最新版的，想要在專案中使用特定版本號可參考下方「❒ 新專案中引用 Sass 某版本號模組化 」做法。</p>
<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E5%AE%A2%E8%A3%BD%20Sass%20%E6%A8%A1%E7%B5%84%E5%8C%96%E8%A8%AD%E8%A8%88_03.png?alt=media&token=64828d03-57ef-4d97-9ea1-9d9fd0e1744d" alt="// 沒顯示版本號"></p>
</li>
</ol>
<h2 id="❒-Sass-模組化於-GitHub-Res-做版本號更新"><a href="#❒-Sass-模組化於-GitHub-Res-做版本號更新" class="headerlink" title="❒ Sass 模組化於 GitHub Res 做版本號更新"></a>❒ Sass 模組化於 GitHub Res 做版本號更新</h2><p>隨著日後維護會有更新我們自己客製 Sass 模組化資料的需求，可參考下面方法來替不同時期的 Sass 模組化資料標記上不同的標籤。</p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E5%AE%A2%E8%A3%BD%20Sass%20%E6%A8%A1%E7%B5%84%E5%8C%96%E8%A8%AD%E8%A8%88_04.png?alt=media&token=cf5fb0a7-b034-4353-965a-bf1fb3f2edc9" alt="// BS GitHub 標籤上的版本號(https://github.com/twbs/bootstrap) "></p>
<p><strong>有兩種方式可於 Sass 模組化加上不同版本號的標籤 ( tags )：</strong></p>
<ol>
<li>使用 Source Tree 。</li>
<li>使用指令方式。</li>
</ol>
<h3 id="❶-Source-Tree-加上標籤-tags"><a href="#❶-Source-Tree-加上標籤-tags" class="headerlink" title="❶ Source Tree 加上標籤 tags"></a>❶ Source Tree 加上標籤 tags</h3><ol>
<li><p>於要加上版本號的 commit 點上，點擊右鍵 Tag 於視窗中的 Tag Name 加入標籤名稱 ( 例，v1.0.0 )。</p>
<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E5%AE%A2%E8%A3%BD%20Sass%20%E6%A8%A1%E7%B5%84%E5%8C%96%E8%A8%AD%E8%A8%88_05.png?alt=media&token=197806ba-4912-4e3b-a694-2fe6e0a6f9be" alt="// SourceTree 示意圖"></p>
</li>
<li><p>VSCode 中使用指令推上去 GitHub → <code>git push origin --tags</code></p>
<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E5%AE%A2%E8%A3%BD%20Sass%20%E6%A8%A1%E7%B5%84%E5%8C%96%E8%A8%AD%E8%A8%88_06.png?alt=media&token=ef06dde9-97ef-4a7d-ba2c-c527270c2604" alt="// GitHub Res 顯示版本號"></p>
</li>
</ol>
<h3 id="❷-使用語法加上標籤-tags"><a href="#❷-使用語法加上標籤-tags" class="headerlink" title="❷ 使用語法加上標籤 tags"></a>❷ 使用語法加上標籤 tags</h3><ul>
<li><p>使用 <code>git log</code> 查詢要加上版本號 commit 點的 SHA-1 值。如果想在某個 commit 加上標籤 → <code>$ git tag 標籤名 commit的SHA-1值前六碼</code> ( <a href="https://gitbook.tw/chapters/tag/using-tag">文章</a> )</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git tag v1.0.0 d550d5</span><br></pre></td></tr></table></figure>
</li>
<li><p>記得要在推上去 GitHub 做更新 → <code>git push origin --tags</code>，GitHub 就可以看到剛剛新增的 v1.0.0 版本號囉 ！( <code>git push 遠端節點名稱 —-tags</code> )</p>
<p>  <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E5%AE%A2%E8%A3%BD%20Sass%20%E6%A8%A1%E7%B5%84%E5%8C%96%E8%A8%AD%E8%A8%88_07.png?alt=media&token=f35f00d6-d2c4-458f-9287-50ff3b55bbfc" alt="// GitHub 示意圖"></p>
</li>
</ul>
<h2 id="❒-新專案中引用-Sass-某版本號模組化"><a href="#❒-新專案中引用-Sass-某版本號模組化" class="headerlink" title="❒ 新專案中引用 Sass 某版本號模組化"></a>❒ 新專案中引用 Sass 某版本號模組化</h2><ol>
<li><p>如果要引用新模組化的專案，但本地端已經有拉下舊的模組化就需要先反安裝 package.json 中的 “dependencies” → <code>npm uninstall GitHub數據庫URL --save</code>。</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 以上方自己客製的 Sass powerful framework 專案為例</span><br><span class="line">$ npm uninstall github:echocarriet/powerful_framework --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>再安裝要的版本號模組 → <code>npm install Github數據庫URL\#版本號 --save</code>，可見 “dependencies”: 路徑後方多了版本號，並重新按一次 VSCode 的 Watch Sass 做編譯，版本號會透過 package.json 做管理。</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install git@github.com:echocarriet/SassModuleNote_sample.git\<span class="comment">#v1.0.0 --save</span></span><br></pre></td></tr></table></figure>

<p> <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E5%AE%A2%E8%A3%BD%20Sass%20%E6%A8%A1%E7%B5%84%E5%8C%96%E8%A8%AD%E8%A8%88_08.png?alt=media&token=b21425d5-a241-44ec-893b-590b0d538a52" alt="// 專案中的 package.json 顯示目前安裝的版本號"></p>
</li>
</ol>
<p><strong>如果想要在專案使用其他版本號，例如 v1.0.1，有兩個方式：</strong></p>
<p>➀ 使用指令</p>
<p>下指令 <code>npm install Github數據庫URL\#版本號 --save</code>，專案的 package.json 內可見 “dependencies” 路徑後方會顯示版本號 v1.0.1。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install git@github.com:echocarriet/SassModuleNote_sample.git\<span class="comment">#v1.0.1 --save</span></span><br></pre></td></tr></table></figure>

<p><img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2F%E5%AE%A2%E8%A3%BD%20Sass%20%E6%A8%A1%E7%B5%84%E5%8C%96%E8%A8%AD%E8%A8%88_09.png?alt=media&token=30273626-379a-487a-84cd-ed096264788a" alt="// package.json 內可見 &quot;dependencies” 版本號為 v1.0.1"></p>
<p>② 於專案的 package.json 修改</p>
<ol>
<li><p>開啟專案 &#x2F; package.json 中的 “dependencies” 直接在路徑後方修改版本號</p>
 <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// package.json </span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"> <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;powerful-framework&quot;</span><span class="punctuation">:</span> <span class="string">&quot;github:echocarriet/powerful_framework#1.0.1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>接著刪除整個 node_module 資料夾 → 執行 <code>npm install</code> 它就會載回 package.json 內的資訊包含剛剛我們修改的新的版本號 v1.0.1 模組。</p>
</li>
</ol>
<h2 id="❒-此文自製-Sass-模組的-GitHub-Res-Demo"><a href="#❒-此文自製-Sass-模組的-GitHub-Res-Demo" class="headerlink" title="❒ 此文自製 Sass 模組的 GitHub Res Demo"></a>❒ 此文自製 Sass 模組的 GitHub Res Demo</h2><p><a href="https://github.com/echocarriet/SassModuleNote_sample">GitHub Res</a></p>
<h2 id="❒-參考資訊"><a href="#❒-參考資訊" class="headerlink" title="❒ 參考資訊"></a>❒ 參考資訊</h2><ul>
<li><a href="https://www.casper.tw/css/2016/12/20/sass-folder/">卡斯伯 - Sass 資料夾結構</a></li>
<li>六角學院<ul>
<li>中大型 CSS 專案 實戰管理術 ( 直播課程 ) - 模組化設計</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Scss</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>使用git新增版本號</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>TDX 註冊流程</title>
    <url>/tdxtransportdata/20230327/1344071855/</url>
    <content><![CDATA[<h2 id="註冊為-TDX-會員"><a href="#註冊為-TDX-會員" class="headerlink" title="註冊為 TDX 會員"></a>註冊為 TDX 會員</h2><p><a href="https://tdx.transportdata.tw/">TDX 運輸資料流通服務</a> → 右方點選註冊</p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2FTDX%E8%A8%BB%E5%86%8A%E6%B5%81%E7%A8%8B_01.png?alt=media&token=6b1b6df7-e4d2-4639-83bf-d59efdfeeb18" alt="// TDX 註冊圖示 ▲"></p>
<h2 id="會員註冊內容"><a href="#會員註冊內容" class="headerlink" title="會員註冊內容"></a>會員註冊內容</h2><h3 id="一般會員的內容適用對象與規範-官方資料"><a href="#一般會員的內容適用對象與規範-官方資料" class="headerlink" title="一般會員的內容適用對象與規範 ( 官方資料 )"></a>一般會員的內容適用對象與規範 ( 官方資料 )</h3><ul>
<li>適用對象<ol>
<li><ol>
<li>個人身份</li>
</ol>
</li>
<li>私人企業</li>
</ol>
</li>
<li>使用規範<ol>
<li>使用合法電子郵件信箱進行註冊</li>
<li>使用 edu、org、gov 域名信箱無法註冊為一般會員</li>
<li>可註冊至多三把API金鑰</li>
<li>可查詢資料服務</li>
<li>可申請下載歷史資料</li>
</ol>
</li>
</ul>
<h3 id="內容填寫步驟"><a href="#內容填寫步驟" class="headerlink" title="內容填寫步驟"></a>內容填寫步驟</h3><ol>
<li>欄位填寫完後按下註冊</li>
<li>到信箱收驗證信進行驗證</li>
<li>驗證成功後，三個工作日內後審核成功，就會發 Email 通知。</li>
</ol>
<h2 id="查看-API-金鑰-Client-Id-APP-ID-與-Client-Secret-APP-KEY"><a href="#查看-API-金鑰-Client-Id-APP-ID-與-Client-Secret-APP-KEY" class="headerlink" title="查看 API 金鑰 | Client Id (APP ID) 與 Client Secret (APP KEY)"></a>查看 <strong><strong>API 金鑰 |</strong></strong> Client Id (APP ID) 與 Client Secret (APP KEY)</h2><p>進入 TDX <a href="https://tdx.transportdata.tw/user/home">會員中心</a> → 左側欄 「資料服務」→ 「API金鑰」，點擊右方內容下面方框中 API KEY 的 「 編輯按鈕」 就可以查看到 Client Id 與 Client Secret 囉 !</p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2FTDX%E8%A8%BB%E5%86%8A%E6%B5%81%E7%A8%8B_02.png?alt=media&token=6a1397c0-f93d-45bf-9df6-8e87aab4339a" alt="// 後台查看 API 金鑰 ▲"></p>
<h2 id="查看當月服務呼叫統計"><a href="#查看當月服務呼叫統計" class="headerlink" title="查看當月服務呼叫統計"></a>查看當月服務呼叫統計</h2><p>TDX <a href="https://tdx.transportdata.tw/user/home">會員中心</a> → 左側欄 「總覽」</p>
<p>因為直接撈取的所有資料庫資料會很龐大，所以如果要避免月呼叫量太大，使用 API 時可搭配 Parameters 參數做過濾、篩選等。</p>
<p><img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2FTDX%E8%A8%BB%E5%86%8A%E6%B5%81%E7%A8%8B_03.png?alt=media&token=de9773ff-6f1c-4874-856b-0f78a7459788" alt="// 後台 - 當月服務呼叫統計 ▲"></p>
<h2 id="參考資訊"><a href="#參考資訊" class="headerlink" title="參考資訊"></a>參考資訊</h2><ul>
<li>六角學院<ul>
<li><a href="https://youtu.be/QR15lr82tt4?t=4874">10 分鐘申請 TDX 帳號流程影片 (1:21:00~1:31:00)</a></li>
<li>筆者於 2022 &#x2F; 6 &#x2F; 17 已無法於 PTX 註冊，改由上方 TDX 註冊，如上述筆記。<br>  <img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/images%2FTDX%E8%A8%BB%E5%86%8A%E6%B5%81%E7%A8%8B_04.png?alt=media&token=dfdae253-ef10-40de-ad9d-11c60707165d" alt="PTX 公告 ▲"></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>TDX運輸資料流通服務</category>
      </categories>
      <tags>
        <tag>TDX</tag>
      </tags>
  </entry>
  <entry>
    <title>Day1 | CSS 選擇器與權重</title>
    <url>/html-css/20230327/2449098139/</url>
    <content><![CDATA[<h2 id="❒-什麼是-CSS-選擇器"><a href="#❒-什麼是-CSS-選擇器" class="headerlink" title="❒ 什麼是 CSS 選擇器"></a>❒ 什麼是 CSS 選擇器</h2><p>CSS 選擇器可調整元素樣式。如下程式碼中，<code>p</code> 為選擇器，括號 <code>&#123;&#125;</code> 內為想要調整成的樣式。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line"> <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="❒-選擇器分類"><a href="#❒-選擇器分類" class="headerlink" title="❒ 選擇器分類"></a>❒ 選擇器分類</h2><ol>
<li>基本選擇器<ol>
<li>類別選擇器</li>
<li>class 選擇器</li>
<li>ID 選擇器</li>
<li>通用選擇器</li>
<li>屬性選擇器</li>
<li>狀態選擇器</li>
</ol>
</li>
<li>複合選擇器<ol>
<li>子選擇器 ( 直屬選擇器 ) <code>X &gt; Y</code></li>
<li>後代選擇器 <code>X Y</code></li>
<li>相鄰兄弟選擇器 ( 鄰接同層選擇器 ) <code>X + Y</code></li>
<li>通用兄弟選擇器 <code>X ~ Y</code></li>
</ol>
</li>
<li>偽元素</li>
<li>虛擬類別</li>
</ol>
<p>下方只針對幾個比較常用的做整理。</p>
<h2 id="❒-複合選擇器"><a href="#❒-複合選擇器" class="headerlink" title="❒ 複合選擇器"></a>❒ 複合選擇器</h2><h3 id="⠿-直屬選擇器-X-gt-Y"><a href="#⠿-直屬選擇器-X-gt-Y" class="headerlink" title="⠿ 直屬選擇器 X &gt; Y"></a>⠿ 直屬選擇器 X &gt; Y</h3><p>只有 X 直屬子層 Y 會有作用。</p>
<p><strong>實作 1. 讓 li.item 直屬子層的 p 段落文字變紅色 <a href="https://codepen.io/echocarriet/pen/vYjNZqX">CodePen 程式碼</a></strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>item<span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="comment">&lt;!--紅色文字--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;inList&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;inItem&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>inItem<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>item<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="comment">&lt;!--紅色文字--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inbox&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>item<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="⠿-後代選擇器-X-Y"><a href="#⠿-後代選擇器-X-Y" class="headerlink" title="⠿ 後代選擇器 X Y"></a>⠿ 後代選擇器 X Y</h3><p>X 不管到第幾代的子層 Y 都會有作用</p>
<p><strong>實作 1. 與直屬選擇器相同範例，使用後代選擇器則子層的文字皆會變紅色 <a href="https://codepen.io/echocarriet/pen/JjvYyGd">CodePen 程式碼</a></strong></p>
<h3 id="⠿-相鄰兄弟選擇器-X-Y"><a href="#⠿-相鄰兄弟選擇器-X-Y" class="headerlink" title="⠿ 相鄰兄弟選擇器 X + Y"></a>⠿ 相鄰兄弟選擇器 X + Y</h3><p>需與 X 相鄰的下一個同層 Y 才會吃到 CSS 樣式。</p>
<p><strong>實作 1. 讓 333 文字變藍色 <a href="https://codepen.io/echocarriet/pen/VwxvWxY">CodePen 程式碼</a></strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text1&quot;</span>&gt;</span>111<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text2&quot;</span>&gt;</span>222<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text3&quot;</span>&gt;</span>333<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="⠿-通用兄弟選擇器-X-Y"><a href="#⠿-通用兄弟選擇器-X-Y" class="headerlink" title="⠿ 通用兄弟選擇器 X ~ Y"></a>⠿ 通用兄弟選擇器 X ~ Y</h3><p>於 X 同層且在後方的 Y 元素皆會執行 CSS 設定。</p>
<p><strong>實作 1. 從文字３至文字６皆為紅色 <a href="https://codepen.io/echocarriet/pen/oNdjwVX">CodePen 程式碼</a></strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text1&quot;</span>&gt;</span>文字１<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text2&quot;</span>&gt;</span>文字２<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text3&quot;</span>&gt;</span>文字３<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text4&quot;</span>&gt;</span>文字４<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text5&quot;</span>&gt;</span>文字５<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text6&quot;</span>&gt;</span>文字６<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="⠿-X-nth-child-n"><a href="#⠿-X-nth-child-n" class="headerlink" title="⠿ X:nth-child(n)"></a>⠿ X:nth-child(n)</h3><ul>
<li><code>X:nth-child(n)</code>  參數 n 從 1 開始，如果要指向第一個元素  <code>nth-child(1)</code> 。</li>
<li><code>X:nth-child(數字n)</code> 參數中數字的倍數皆會執行 css 效果。</li>
</ul>
<p><strong>實作範例 <a href="https://codepen.io/echocarriet/pen/pogwKzd">CodePen 程式碼</a></strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"> <span class="comment">&lt;!--括號中的參數從1開始--&gt;</span></span></span><br><span class="line"><span class="language-xml"> li:nth-child(3)&#123;</span></span><br><span class="line"><span class="language-xml">   color:red;</span></span><br><span class="line"><span class="language-xml"> &#125;</span></span><br><span class="line"><span class="language-xml"> <span class="comment">&lt;!--2n 即2的倍數的li皆會執行效果--&gt;</span></span></span><br><span class="line"><span class="language-xml"> li:nth-child(2n)&#123;</span></span><br><span class="line"><span class="language-xml">   color:green;</span></span><br><span class="line"><span class="language-xml"> &#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>tex 01<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>tex 02<span class="tag">&lt;/<span class="name">li</span>&gt;</span> <span class="comment">&lt;!--green--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>tex 03<span class="tag">&lt;/<span class="name">li</span>&gt;</span> <span class="comment">&lt;!--redn--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>tex 04<span class="tag">&lt;/<span class="name">li</span>&gt;</span> <span class="comment">&lt;!--green--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>tex 05<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>tex 06<span class="tag">&lt;/<span class="name">li</span>&gt;</span> <span class="comment">&lt;!--green--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>tex 07<span class="tag">&lt;/<span class="name">li</span>&gt;</span> <span class="comment">&lt;!--red--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>tex 08<span class="tag">&lt;/<span class="name">li</span>&gt;</span> <span class="comment">&lt;!--green--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="⠿-X-nth-last-child-n"><a href="#⠿-X-nth-last-child-n" class="headerlink" title="⠿ X:nth-last-child(n)"></a>⠿ X:nth-last-child(n)</h3><ul>
<li><code>X:nth-last-child(n)</code> 倒數參數 n 開始執行 CSS 樣式。</li>
</ul>
<h3 id="⠿-X-first-child-與-X-last-child"><a href="#⠿-X-first-child-與-X-last-child" class="headerlink" title="⠿ X:first-child 與 X:last-child"></a>⠿ X:first-child 與 X:last-child</h3><ul>
<li><code>X:first-child</code> 指向 X 第一個元素</li>
<li><code>X:last-child</code> 指向 X 最後一個元素</li>
</ul>
<p><a href="https://codepen.io/echocarriet/pen/OJZyjjv">CodePen 程式碼 01</a></p>
<p><a href="https://codepen.io/echocarriet/pen/qBbjKgO">CodePen 程式碼 02 - 選單下底線範例</a></p>
<h2 id="❒-偽元素"><a href="#❒-偽元素" class="headerlink" title="❒ 偽元素"></a>❒ 偽元素</h2><h3 id="⠿-not"><a href="#⠿-not" class="headerlink" title="⠿ :not"></a>⠿ <code>:not</code></h3><p><code>:not</code> : 為 CSS 偽類，可排除特定的元素被選中。</p>
<h3 id="範例-1-在多個-p-段落中，排除第一個-p-段落文字變紅色"><a href="#範例-1-在多個-p-段落中，排除第一個-p-段落文字變紅色" class="headerlink" title="範例 1. 在多個 p 段落中，排除第一個 p 段落文字變紅色"></a>範例 1. 在多個 p 段落中，排除第一個 p 段落文字變紅色</h3><p><a href="https://www.notion.so/CSS-not-e4e44072fb79496fa2917fafe42f8e16">CodePen 範例程式</a><a href="https://codepen.io/echocarriet/pen/WNMGeWv">碼</a></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:not</span>(<span class="selector-pseudo">:first</span>-child) &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="❒-CSS-權重"><a href="#❒-CSS-權重" class="headerlink" title="❒ CSS 權重"></a>❒ CSS 權重</h2><blockquote>
<p><strong>先看權重，再看先後</strong></p>
</blockquote>
<ul>
<li>任何元素選擇符 <code>*</code> : 0 分 ，沒有權級。</li>
<li><code>HTML</code> 標籤 ( 元素選擇器 )、偽元素選擇器：1 分。<ul>
<li><code>h1</code>、<code>p</code>、<code>ul</code>、<code>li</code> 等。</li>
</ul>
</li>
<li><code>class</code> 選擇器、偽類選擇器：10 分。<ul>
<li><code>.title</code> ，前方以點開頭。</li>
</ul>
</li>
<li><code>ID</code> 選擇器：100 分。<ul>
<li><code>#title</code> ，前方以 # 開頭。</li>
<li>因為 ID 選擇器權重較高為 100 分，在寫文件會有樣式覆蓋上的麻煩，所以不建議於 CSS 使用，除非 js 操作。</li>
</ul>
</li>
<li><code>inline style</code>：1000 分。<ul>
<li><code>&lt;h1 style=&quot; &quot;&gt;title&lt;/h1&gt;</code> ，直接在 HTML 標籤內寫 style。</li>
</ul>
</li>
<li><code>!important</code>：10000 分。<ul>
<li><code>.title2&#123; color:red; &#125; !important</code></li>
</ul>
</li>
</ul>
<h2 id="❒-權重分數運算"><a href="#❒-權重分數運算" class="headerlink" title="❒ 權重分數運算"></a>❒ 權重分數運算</h2><ul>
<li><code>.title h1 &#123;&#125;</code> →  10+1&#x3D;11 ( class 選擇器 + HTML 標籤 )</li>
<li><code>.qa-lost__title-link</code> → 10 ( class 選擇器 )</li>
<li><code>#Stencil .Pos-r</code>→ 100+10&#x3D;110 ( ID 選擇器 + class 選擇器  )</li>
<li><code>#atomic .Py , #atomic .Pt</code> → 100+10&#x3D;110 (  <strong>逗號不會有加分作用</strong>； ID 選擇器 + class 選擇器 )</li>
<li><code>.on_sale li a , .sale_category li a , .sale_news li a</code> → 10+1+1&#x3D;12 ( class 選擇器 + HTML 標籤 + HTML 標籤 )</li>
<li>眾多一分的權重是會壓過一個十分的權重的。<ul>
<li><code>.h2 .h2 .h2 .h2 .h2 .h2 .h2 .h2 .h2 .h2</code> &gt; <code>.h2</code></li>
</ul>
</li>
<li>權重相同時，後方會蓋掉前方設定。</li>
</ul>
<h2 id="❒-CSS-權重相關範例"><a href="#❒-CSS-權重相關範例" class="headerlink" title="❒ CSS 權重相關範例"></a>❒ CSS 權重相關範例</h2><h3 id="Q1-h1-文字顏色為"><a href="#Q1-h1-文字顏色為" class="headerlink" title="Q1. h1 文字顏色為 ?"></a>Q1. h1 文字顏色為 ?</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;title title2&quot;</span>&gt;</span>TITLE<span class="tag">&lt;/<span class="name">h1</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.title2</span>&#123;</span><br><span class="line"> <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.title</span>&#123;</span><br><span class="line"> <span class="attribute">color</span>:blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>答案： 1. 藍色 ( 這邊不管 HTML 的先後順序，以 CSS 先後順序為優先。)</p>
<h3 id="Q2-螢幕解析度在-769px-時，h1-文字顏色為"><a href="#Q2-螢幕解析度在-769px-時，h1-文字顏色為" class="headerlink" title="Q2. 螢幕解析度在 769px 時，h1 文字顏色為 ?"></a>Q2. 螢幕解析度在 769px 時，h1 文字顏色為 ?</h3><h3 id="Q3-螢幕解析度在-568px-時，h1-文字顏色為"><a href="#Q3-螢幕解析度在-568px-時，h1-文字顏色為" class="headerlink" title="Q3. 螢幕解析度在 568px 時，h1 文字顏色為 ?"></a>Q3. 螢幕解析度在 568px 時，h1 文字顏色為 ?</h3><h3 id="Q4-螢幕解析度在-320px-時，幾個-title-會被開啟"><a href="#Q4-螢幕解析度在-320px-時，幾個-title-會被開啟" class="headerlink" title="Q4. 螢幕解析度在 320px 時，幾個 .title 會被開啟 ?"></a>Q4. 螢幕解析度在 320px 時，幾個 .title 會被開啟 ?</h3><p>Q2 ~ Q4 程式碼 ↓</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>TITLE<span class="tag">&lt;/<span class="name">h1</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.title</span>&#123;</span><br><span class="line"> <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span>(max-width:768px&#123;</span><br><span class="line"> <span class="selector-class">.title</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>:blue;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span>(max-width:375px&#123;</span><br><span class="line"> <span class="selector-class">.title</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>:yellow;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>答案：Q2. 紅色<br>答案：Q3. 藍色<br>答案：Q4. 三個 .title 都會被開啟，只是上方第一個與第二個會被 <code>@media(max-width:375px&#123; &#125;</code> 的覆蓋掉。<br><img src="https://ithelp.ithome.com.tw/upload/images/20220915/20119743e3xEfsK9IC.png" alt="// 圖片來源 : 六角學院 ▲"></p>
<h3 id="Q5-根據以下-CSS，在螢幕解析度-600px-時文字的顏色為何"><a href="#Q5-根據以下-CSS，在螢幕解析度-600px-時文字的顏色為何" class="headerlink" title="Q5. 根據以下 CSS，在螢幕解析度 600px 時文字的顏色為何 ?"></a>Q5. 根據以下 CSS，在螢幕解析度 600px 時文字的顏色為何 ?</h3><p>A. 紅色  B. 黑色  C. 黃色  D. 藍色</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">576px</span>)&#123;</span><br><span class="line">    <span class="selector-tag">p</span> &#123; </span><br><span class="line">        <span class="attribute">color</span>: red;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">768px</span>)&#123;</span><br><span class="line">    <span class="selector-tag">p</span> &#123; </span><br><span class="line">        <span class="attribute">color</span>: black; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123; <span class="attribute">color</span>: yellow; &#125;</span><br></pre></td></tr></table></figure>

<p>答案： C 黃色 ( <strong>先看權重再看先後</strong>，上方權重皆為 1 ，所以後方的 <code>p</code> 會覆蓋掉斷點中的 <code>p</code> 設定。)</p>
<h2 id="參考資訊"><a href="#參考資訊" class="headerlink" title="參考資訊"></a>參考資訊</h2><ul>
<li><a href="https://developer.mozilla.org/zh-TW/docs/Glossary/CSS_Selector">MDN - CSS 選擇器</a></li>
<li>偽元素選擇器<ul>
<li><a href="https://www.delftstack.com/zh-tw/howto/css/css-not-first-child/">在 CSS 中選擇非第一個子元素的方法</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:not">MDN - :not()</a></li>
</ul>
</li>
<li>六角學院</li>
</ul>
]]></content>
      <categories>
        <category>HTML&amp;CSS</category>
      </categories>
      <tags>
        <tag>2022年iThome鐵人賽</tag>
        <tag>權重</tag>
      </tags>
  </entry>
  <entry>
    <title>Day2 | img 圖片與背景圖使用方式、視差滾動背景效果</title>
    <url>/html-css/20230327/3211221452/</url>
    <content><![CDATA[<h2 id="❒-圖片使用背景圖方式"><a href="#❒-圖片使用背景圖方式" class="headerlink" title="❒ 圖片使用背景圖方式"></a>❒ 圖片使用背景圖方式</h2><h3 id="▷-屬性-background-repeat"><a href="#▷-屬性-background-repeat" class="headerlink" title="▷ 屬性 background-repeat"></a>▷ 屬性 <code>background-repeat</code></h3><ul>
<li>為了確保背景圖正確顯示，需搭配 <code>background-repeat:no-repeat;</code> 告訴瀏覽器背景圖片不要重覆顯示。</li>
</ul>
<h3 id="▷-屬性-background-position"><a href="#▷-屬性-background-position" class="headerlink" title="▷ 屬性 background-position"></a>▷ 屬性 <code>background-position</code></h3><ul>
<li><code>background-position: 水平方向 垂直方向;</code><ul>
<li>水平方向：方向方式 ( left、center、right )、百分比方式。</li>
<li>垂直方向：方向方式 ( top、center、bottom )、百分比方式。</li>
</ul>
</li>
<li>注意：如果 <code>background-position</code> 使用了簡化寫法，只寫一個屬性值，另一個屬性值將會自動取中間值，為了將來管理方便，建議兩個方向的屬性值都寫上去比較好。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-position</span><span class="selector-pseudo">:right</span> <span class="attribute">bottom</span>;　// 靠右靠下對齊</span><br><span class="line"><span class="attribute">background-position</span>:<span class="number">30px</span> <span class="number">60px</span>;　//靠左 <span class="number">30px</span> 靠上 <span class="number">60</span> px 的位置</span><br><span class="line"><span class="attribute">background-position</span>:<span class="number">10%</span> <span class="number">50%</span>;　// 靠左 <span class="number">10%</span> 靠上 <span class="number">50%</span> 的位置</span><br><span class="line"><span class="attribute">background-position</span>:<span class="number">10%</span>;　// 效果同上一行，靠左 <span class="number">10%</span> 靠上 <span class="number">50%</span> 的位置</span><br></pre></td></tr></table></figure>

<h3 id="▷-屬性-background-size"><a href="#▷-屬性-background-size" class="headerlink" title="▷ 屬性 background-size"></a>▷ 屬性 <code>background-size</code></h3><p><a href="https://codepen.io/echocarriet/pen/JjvXwpg">CodePen 範例</a></p>
<ul>
<li><code>contain</code>：如果背景圖有設定寬高，會自適應在設定的寬高內，但當背景圖尺寸小於設定的寬高時，不會填滿設定的寬高。</li>
<li><code>cover</code>：背景圖會依設定個寬度做縮放並填滿。<ul>
<li>因為使用 <code>backgrounf-size: cover</code> 時，可能會裁切到原圖片，可搭配 <code>background-position</code> 調整圖片位置。</li>
</ul>
</li>
</ul>
<h3 id="▷-屬性-background-attachment"><a href="#▷-屬性-background-attachment" class="headerlink" title="▷ 屬性 background-attachment"></a>▷ 屬性 <code>background-attachment</code></h3><p>屬性主要是設定背景圖片位置在設定的區塊內捲動時會個著捲動或固定，可使用 <code>fixed</code> 做出視差滾動的效果。<br><strong>屬性值</strong></p>
<ul>
<li><code>scroll</code> 預設，在區塊內卷軸捲動時，背景會跟著移動。<a href="https://codepen.io/echocarriet/pen/xxjrRMJ">CodePen 範例</a><ul>
<li>需注意，如果子區塊也使用 <code>scroll</code> ，子區塊的卷軸捲動時背景圖會固定不動，不會跟著被捲走。<a href="https://codepen.io/echocarriet/pen/VwxWmgR">CodePen 範例</a></li>
</ul>
</li>
<li><code>fixed</code> 在區塊內卷軸捲動時，背景會固定不動。 <a href="https://codepen.io/echocarriet/pen/mdLwRyd">CodePen 範例</a><ul>
<li>注意：如果子區塊也使用 <code>fixed</code> ，子區塊的卷軸捲動時背景圖不個著被捲走，會固定。但父區塊捲動卷軸時，子區塊的背景會個著動。 <a href="https://codepen.io/echocarriet/pen/ExLXZVe">CodePen 範例</a></li>
</ul>
</li>
<li><code>local</code> 類似 <code>scroll</code> ，在區塊內滾動卷軸時背景圖會跟著動。<a href="https://codepen.io/echocarriet/pen/PoejWGN">CodePen 範例</a></li>
</ul>
<h2 id="❒-使用-background-attachment-fixed-做出視差滾動"><a href="#❒-使用-background-attachment-fixed-做出視差滾動" class="headerlink" title="❒ 使用 background-attachment:fixed 做出視差滾動"></a>❒ 使用 background-attachment:fixed 做出視差滾動</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 架構 */</span></span><br><span class="line"><span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;圖片路徑&quot;</span>);</span><br><span class="line"><span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line"><span class="attribute">background-attachment</span>: fixed;</span><br></pre></td></tr></table></figure>

<p><img src="https://firebasestorage.googleapis.com/v0/b/heycarrie-b5502.appspot.com/o/gif%2F%E9%90%B5%E4%BA%BA%E8%B3%BD_%E8%A6%96%E5%B7%AE%E6%BB%BE%E5%8B%95%E7%A4%BA%E6%84%8F%E5%9C%96.gif?alt=media&token=8de99e63-63f5-43f9-986a-1708cd8cf610" alt="// 視差滾動示意圖"><br><a href="https://codepen.io/echocarriet/pen/rNvwjwZ">CodePen 範例</a></p>
<h2 id="❒-圖片使用-img-標籤方式"><a href="#❒-圖片使用-img-標籤方式" class="headerlink" title="❒ 圖片使用 img 標籤方式"></a>❒ 圖片使用 img 標籤方式</h2><h3 id="▷-圖片寬度設定中-max-width-與-width-差異"><a href="#▷-圖片寬度設定中-max-width-與-width-差異" class="headerlink" title="▷ 圖片寬度設定中 max-width 與 width 差異"></a>▷ 圖片寬度設定中 <code>max-width</code> 與 <code>width</code> 差異</h3><p><a href="https://codepen.io/echocarriet/pen/LYPOozq">CodePen 範例</a></p>
<p><code>max-width:100%;</code> ( 建議使用此方式 )</p>
<ul>
<li>會跟隨父層做自適應縮放，但會保有圖片原始寬度。如果父層寬度超出圖片寬度，則圖片會停止延伸。</li>
</ul>
<p><code>width:100%;</code></p>
<ul>
<li>隨父層做自適應縮放，父層大於圖片原始尺寸，圖片會跟著變大。</li>
<li>缺點 : 如果圖片解析度不夠會糊掉。</li>
</ul>
<p><img src="https://ithelp.ithome.com.tw/upload/images/20220917/20119743nnEbSgj6tg.png" alt="// 圖片寬度設定中 max-width 與 width 差異"></p>
<h3 id="▷-響應式圖片-Reset"><a href="#▷-響應式圖片-Reset" class="headerlink" title="▷ 響應式圖片 Reset"></a>▷ 響應式圖片 Reset</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* img reset */</span></span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line"> <span class="attribute">max-width</span>:<span class="number">100%</span>;</span><br><span class="line"> <span class="attribute">height</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>理解上方 <code>max-width</code> 與 <code>width</code> 差異後可以把上方 img reset 設定方式加入 CSS Reset 中，就不需要重覆設定也可避免因圖片解析度太高出現 x 軸或破版問題囉！</li>
</ul>
<h3 id="▷-屬性-object-fit"><a href="#▷-屬性-object-fit" class="headerlink" title="▷ 屬性 object-fit"></a>▷ 屬性 <code>object-fit</code></h3><p><a href="https://codepen.io/echocarriet/pen/jOxbpdz">CodePen 範例</a></p>
<ul>
<li><code>fill</code>：預設值，圖片在填滿容器時可能會產生變形。</li>
<li><code>contain</code> : 會保持圖片原本比例，呈現在容器中，但與容器尺寸不依時不會填滿整個容器。</li>
<li><code>cover</code> : 保持圖片比例，填滿容器，但與容器尺寸不依時會裁切到圖片以填滿整個容器。<ul>
<li>因為使用 <code>object-fit: cover</code> 時，可能會裁切到原圖片，如果想要移動可視範圍位置，可搭配 <code>object-position</code>，效果就類似於 <code>background-position</code>。</li>
<li>關於 <code>object-position</code> 用法可參考「 <a href="https://www.runoob.com/cssref/pr-object-position.html">CSS object-position 属性</a> ****」。</li>
</ul>
</li>
<li><code>none</code> : 不調整圖片比例。</li>
<li><code>scale-down</code> : 等比縮小，與 none 或 contain 中的一個相同，取決於它們兩個之間誰得到的對象尺寸更小。</li>
</ul>
<h2 id="參考資訊"><a href="#參考資訊" class="headerlink" title="參考資訊"></a>參考資訊</h2><ul>
<li><a href="https://tzuhui.github.io/2020/03/26/CSS/css-object-fit/">HTML img 也能有 bg-image 的 cover 效果</a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/object-position">MDN - object-position</a></li>
<li><a href="https://www.runoob.com/cssref/pr-object-fit.html">CSS object-fit 属性</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10249759">Background-attchment 金魚都能懂的CSS必學屬性</a></li>
</ul>
]]></content>
      <categories>
        <category>HTML&amp;CSS</category>
      </categories>
      <tags>
        <tag>2022年iThome鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>Day3 | Form 表單</title>
    <url>/html-css/20230327/3395657913/</url>
    <content><![CDATA[<h2 id="❒-Form-表單"><a href="#❒-Form-表單" class="headerlink" title="❒ Form 表單"></a>❒ Form 表單</h2><ul>
<li><code>&lt;form&gt;</code> 標籤是 HTML 中用來裝表單的容器， <code>&lt;form action=&quot;#&quot;&gt;..&lt;/form&gt;</code> 中的 action 用來指定一個位址 ( URL )，這個位址是告訴瀏覽器當使用者按送出表單後，要將表格的內容送去哪邊。所以建議於表單外層使用 <code>&lt;form&gt;</code> 標籤做包覆。</li>
<li>避免將一個 label 標籤與多個控制元件相關聯， label 與 select 要分別設定，一個 <code>label</code> 標籤對應一個 <code>select</code>。<ul>
<li><p>相關討論：<a href="https://stackoverflow.com/a/12166681">stackoverflow 的相關討論</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;year&quot;</span>&gt;</span>年份<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;year&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;year&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2019&quot;</span>&gt;</span>2019<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2020&quot;</span>&gt;</span>2020<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;month&quot;</span>&gt;</span>月份<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;month&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;month&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;4&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span>        </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="❒-常見的-HTML-表單元素"><a href="#❒-常見的-HTML-表單元素" class="headerlink" title="❒ 常見的 HTML 表單元素"></a>❒ 常見的 HTML 表單元素</h2><ul>
<li><code>&lt;label&gt;</code> 標籤<ul>
<li><code>&lt;label&gt;</code> 標籤的 for 屬性會對應 <code>&lt;input&gt;</code> 標籤的 id 屬性。</li>
</ul>
</li>
<li><code>&lt;input&gt;</code> 標籤： 輸入欄位，可搭配 <code>type</code> 屬性顯示不同方法。<ul>
<li>詳細資訊可參考 <a href="https://www.w3schools.com/html/html_form_input_types.asp">w3school - HTML Input Types</a>。</li>
</ul>
</li>
<li><code>&lt;textarea&gt;</code> 標籤：多行段落文字輸入欄位。</li>
<li><code>&lt;select&gt;</code> 標籤搭配 <code>&lt;option&gt;</code> 標籤：下拉式選單。</li>
<li><code>&lt;datalist&gt;</code> 標籤：下拉選項外也附帶文字輸入篩選功能。</li>
</ul>
<h2 id="❒-常見的-HTML-表單元素屬性"><a href="#❒-常見的-HTML-表單元素屬性" class="headerlink" title="❒ 常見的 HTML 表單元素屬性"></a>❒ 常見的 HTML 表單元素屬性</h2><ul>
<li><code>name</code> 屬性：name 中資料會顯示在網址上，提交表單後可從網址上的傳送值得知填的資訊取出對應欄位值。<ul>
<li><code>type</code> 屬性中，同組 <code>radio</code> 與 <code>checkbox</code> 屬性的 <code>name</code> 須設定同名，才能表示是同組。<a href="https://codepen.io/echocarriet/pen/abGNgdy">CodePen 範例</a></li>
</ul>
</li>
<li><code>disabled</code> 屬性：禁止使用該表單元素。</li>
<li><code>value</code> 屬性：表單元素的初始值。</li>
<li><code>placeholder</code> 屬性：用法 <code>&lt;input placeholder=&quot;想顯示的文字&quot;&gt;</code> ，用戶輸入值前 <code>placeholder</code> 屬性中的文字會顯示於欄位上。<ul>
<li><code>placeholder</code> 屬性適用於以下輸入類型：文本、搜索、url、電話、電子郵件和密碼。</li>
</ul>
</li>
<li><code>for</code> 屬性與 <code>id</code> 屬性：<ul>
<li><code>&lt;label&gt;</code> 標籤的 <code>for</code> 屬性會對應 <code>&lt;input&gt;</code> 標籤的 <code>id</code> 屬性。</li>
<li><code>&lt;label&gt;</code> 標籤的 <code>for</code> 屬性會對應 <code>&lt;select&gt;</code> 標籤的 <code>id</code> 屬性。</li>
</ul>
</li>
</ul>
<h2 id="❒-datalist-與-option-標籤差異"><a href="#❒-datalist-與-option-標籤差異" class="headerlink" title="❒ datalist 與 option 標籤差異"></a>❒ datalist 與 option 標籤差異</h2><p><a href="https://codepen.io/echocarriet/pen/qBYZLzO">CodePen 範例</a></p>
<h3 id="▷-使用時機"><a href="#▷-使用時機" class="headerlink" title="▷ 使用時機"></a>▷ 使用時機</h3><p><code>datalist</code> 標籤適用於選項很多的選單，除了下拉選項外也附帶文字輸入篩選功能，輸入關鍵字會跳出對應的選項。<code>select</code> 標籤需要手動選取選單內的選項。</p>
<h3 id="▷-datalist-架構"><a href="#▷-datalist-架構" class="headerlink" title="▷ datalist 架構"></a>▷ datalist 架構</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;ice-cream-choice&quot;</span>&gt;</span>Choose a flavor:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">list</span>=<span class="string">&quot;ice-cream-flavors&quot;</span> <span class="attr">id</span>=<span class="string">&quot;ice-cream-choice&quot;</span> <span class="attr">name</span>=<span class="string">&quot;ice-cream-choice&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">&quot;ice-cream-flavors&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Chocolate&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Coconut&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Mint&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Strawberry&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Vanilla&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>「 <code>label</code> 標籤的 for 屬性 」對應「 <code>input</code> 標籤的 id 屬性 」。</li>
<li>架構為 <code>input</code> 加上 <code>datalist</code> 標籤，「 <code>input</code> 標籤的 list 屬性 」對應 「 <code>datalist</code> 標籤的 id 屬性 」。</li>
<li><code>datalist</code> 內的 <code>&lt;option&gt;</code> 標籤與 <code>select</code> 標籤不同的是，<code>datalist</code> 內的 <code>&lt;option&gt;</code> 標籤不需要 <code>&lt;/option&gt;</code> 結尾。</li>
<li>input 標籤的 name 屬性<ul>
<li>如果網頁內的資料傳遞是使用實際頁面非 API ( SSR )，<code>select</code> 標籤就需要加上 name 屬性，後端工程師可由此知道此資訊名稱。基本上 name 是給後端看的， id 是前端操作用的。一般 name 屬性會與 id 屬性命名相同。</li>
<li><code>name</code> 中資料會顯示在網址上，提交表單後可從網址上的傳送值得知填的資訊。提交表單後，文字欄位會以 <code>name</code> 中的值當欄位名稱 。</li>
</ul>
</li>
</ul>
<h3 id="▷-select-架構"><a href="#▷-select-架構" class="headerlink" title="▷ select 架構"></a>▷ select 架構</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;city-select&quot;</span>&gt;</span>Choose a City:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;CitySelect&quot;</span> <span class="attr">id</span>=<span class="string">&quot;city-select&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">selected</span> <span class="attr">disabled</span>&gt;</span>--請選取區域--<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Kaohsiung&quot;</span>&gt;</span>高雄市<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Tainan&quot;</span>&gt;</span>台南市<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Taichung&quot;</span>&gt;</span>台中市<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>「<code>label</code> 標籤的 for 屬性」對應「 <code>input</code> 標籤的 id 屬性」。</li>
<li><code>select</code> 內的 <code>&lt;option&gt;</code> 標籤與 <code>datalist</code> 標籤不同的是，<code>select</code>  標籤內的 <code>&lt;option&gt;</code> 需要 <code>&lt;/option&gt;</code> 結尾。</li>
</ul>
<h2 id="❒-參考資訊"><a href="#❒-參考資訊" class="headerlink" title="❒ 參考資訊"></a>❒ 參考資訊</h2><ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/datalist">MDN - <code>&lt;datalist&gt;</code>: The HTML Data List element</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/select">MDN - <code>&lt;select&gt;</code></a></li>
<li><a href="https://www.w3schools.com/html/html_form_input_types.asp">w3school - HTML Input Types</a></li>
<li><a href="https://www.w3schools.com/tags/att_input_placeholder.asp">w3school - HTML <code>&lt;input&gt;</code> placeholder Attribute</a></li>
</ul>
]]></content>
      <categories>
        <category>HTML&amp;CSS</category>
      </categories>
      <tags>
        <tag>2022年iThome鐵人賽</tag>
      </tags>
  </entry>
  <entry>
    <title>Day4 | 淺談 Flex 排版外層屬性</title>
    <url>/html-css/20230327/3023895147/</url>
    <content><![CDATA[<h2 id="❒-Flex-的外層與內層屬性"><a href="#❒-Flex-的外層與內層屬性" class="headerlink" title="❒ Flex 的外層與內層屬性"></a>❒ Flex 的外層與內層屬性</h2><p><img src="https://ithelp.ithome.com.tw/upload/images/20220919/20119743tHXBnC7LKU.png" alt="// 左方為外層屬性，右方為內層屬性。  圖片出處 : 六角學院 ▲"></p>
<ul>
<li>外層 ( 外層 )<ul>
<li>外層會用到的屬性：<ul>
<li><code>display</code>、<code>flex-flow</code> ( <code>flex-direction</code> 與 <code>flex-wrap</code> 的組合 )、<code>flex-direction</code>、<code>flex-wrap</code>、<code>justify-content</code>、<code>align-items</code>。</li>
</ul>
</li>
<li>如果想要區塊元素作並排，可於父層使用 <code>display:flex;</code> 。</li>
<li>flex 都是設定在父層上，讓子層元素有 flex 的效果。</li>
</ul>
</li>
<li>內層 ( 子層 )<ul>
<li>內層會用到的屬性：<ul>
<li><code>flex-grow</code>、<code>flex-shrink</code>、<code>flex-basis</code>、<code>order</code>、<code>align-self</code>。</li>
</ul>
</li>
<li>子元素們會依照比例做伸縮調整，不會超出父層寬度。  ( <a href="https://codepen.io/echocarriet/pen/BajgNZw">CodePen 範例</a> )</li>
<li>子元素會自動延伸與同層內最高元素的高度。 ( <a href="https://codepen.io/echocarriet/pen/jOWjbPR">CodePen 範例</a> )<ul>
<li>範例中 <code>.box 2</code> 沒有設定高度，但它會自動延伸與子元素中高度最高的 <code>.box3</code> 同高。</li>
</ul>
</li>
</ul>
</li>
<li>Flex 與 Float 差異在於不用做清除浮動，父層還是抓的到子層的高度。</li>
</ul>
<h2 id="❒-不要談-XY-軸，談資料流向"><a href="#❒-不要談-XY-軸，談資料流向" class="headerlink" title="❒ 不要談 XY 軸，談資料流向"></a>❒ 不要談 XY 軸，談資料流向</h2><blockquote>
<p><strong>先判斷主軸方向再進行主軸與次軸設定</strong></p>
</blockquote>
<p><img src="https://ithelp.ithome.com.tw/upload/images/20220919/2011974308Ic34K7NV.jpg" alt="// flex 資料流向"></p>
<ul>
<li>資料流走直向主軸就是直，資料流走橫向主軸就是橫的</li>
<li>資料流向 &#x3D; 主軸；交叉軸 &#x3D; 次軸</li>
<li>以上方圖示為例，資料流向 ( 主軸 ) 橫向，交叉軸 ( 次軸 ) 就會是直向。如果資料流向 ( 主軸 ) 為直向，交叉軸 ( 次軸 ) 就會變橫向。</li>
<li>資料流向 ( 主軸 ) 橫向預設為橫向 <code>row</code>。</li>
</ul>
<h2 id="❒-外層屬性"><a href="#❒-外層屬性" class="headerlink" title="❒ 外層屬性"></a>❒ 外層屬性</h2><blockquote>
<p><strong>先判斷「 主軸方向 <code>flex-direction</code> 」，再進行「 主軸 <code>flex-wrap</code>、<code>justify-content</code> 」與「 次軸 <code>align-items</code> 」設定。</strong></p>
</blockquote>
<h3 id="▷-flex-direction-方向"><a href="#▷-flex-direction-方向" class="headerlink" title="▷ flex-direction 方向"></a>▷ flex-direction 方向</h3><p><strong>屬性值：</strong></p>
<ul>
<li><code>row</code> ( 預設 ) ，左至右。</li>
<li><code>column</code>，上至下。</li>
<li><code>row-reverse</code>  左至右反向。</li>
<li><code>column-reverse</code>  上至下反向。</li>
</ul>
<h3 id="▷-flex-wrap-換行"><a href="#▷-flex-wrap-換行" class="headerlink" title="▷ flex-wrap 換行"></a>▷ <code>flex-wrap</code> 換行</h3><p><strong>屬性值：</strong></p>
<ul>
<li><code>nowrap</code>  ( 預設 )，不換行。</li>
<li><code>wrap</code>，換行。</li>
<li><code>wrapwrap-reverse</code>，依主軸決定直或橫的反向換行。</li>
</ul>
<h3 id="▷-flex-flow"><a href="#▷-flex-flow" class="headerlink" title="▷ flex-flow"></a>▷ flex-flow</h3><ul>
<li><code>flex-flow</code> 為 <code>flex-direction</code> 與 <code>flex-wrap</code> 縮寫，依序寫入 <code>flex-direction</code> 與 <code>flex-wrap</code>。 例如： <code>flex-flow:row wrap;</code>。</li>
</ul>
<h3 id="▷-justify-content-主軸對齊方式"><a href="#▷-justify-content-主軸對齊方式" class="headerlink" title="▷ justify-content 主軸對齊方式"></a>▷ <code>justify-content</code> 主軸對齊方式</h3><blockquote>
<p><strong>主軸對齊使用 <code>justify-content</code> ，次軸對齊使用 <code>align-items</code> 。</strong><br><img src="https://ithelp.ithome.com.tw/upload/images/20220919/20119743ftCyxP7Cav.png" alt="// 圖片來源 : 六角學院 ▲"></p>
</blockquote>
<p><strong>屬性值：</strong></p>
<ul>
<li><code>flex-start</code> : 對齊主軸起點</li>
<li><code>flex-end</code> : 對齊主軸終點</li>
<li><code>center</code> : 對齊主軸水平線</li>
<li><code>space-between</code> : 平均分配每個元素，首元素與末元素會分別對齊主軸起點與終點。</li>
<li><code>space-around</code>：與 <code>space-around</code> 很像，但中間留白與左右邊線距離不一樣 。</li>
<li><code>space-evenly</code> : 與 <code>space-around</code> 很像，但中間留白與左右邊線距離一樣 。</li>
</ul>
<h3 id="▷-align-items-次軸對齊方式"><a href="#▷-align-items-次軸對齊方式" class="headerlink" title="▷ align-items 次軸對齊方式"></a>▷ align-items 次軸對齊方式</h3><blockquote>
<p><strong>主軸對齊使用 <code>justify-content</code> ，次軸對齊使用 <code>align-items</code> 。</strong></p>
</blockquote>
<p><img src="https://ithelp.ithome.com.tw/upload/images/20220919/20119743xtbsAYFE1x.png" alt="// 圖片來源 : 六角學院 ▲"></p>
<ul>
<li><code>flex-start</code></li>
<li><code>flex-end</code></li>
<li><code>center</code></li>
<li><code>strech</code> : 延伸 100% 交錯軸。( 預設 )</li>
<li><code>baseline</code> : 讓並排元素的文字照<a href="https://zh.wikipedia.org/wiki/%E5%9F%BA%E7%B7%9A">基線</a>做對齊。</li>
</ul>
<h3 id="▷-align-content-次軸對齊方式，但須多行才有效"><a href="#▷-align-content-次軸對齊方式，但須多行才有效" class="headerlink" title="▷ align-content 次軸對齊方式，但須多行才有效"></a>▷ align-content 次軸對齊方式，但須多行才有效</h3><ul>
<li><code>align-content</code> 決定行之間的間隔，而 <code>align-items</code> 決定元素整體在容器的什麼位置。</li>
<li>只有一行時 <code>align-content</code>  是無效的。</li>
</ul>
<h2 id="❒-Flex-模擬器與遊戲"><a href="#❒-Flex-模擬器與遊戲" class="headerlink" title="❒ Flex 模擬器與遊戲"></a>❒ Flex 模擬器與遊戲</h2><p>關於 Flex 屬性運用，可搭配下方模擬器與遊戲：</p>
<ul>
<li><a href="https://codepen.io/peiqun/pen/WYzzYX">Flex 六角線上模擬器</a></li>
<li><a href="https://hexschool.github.io/flexbox-pirate/index.html#/">Flex pirate 新手關卡</a></li>
<li><a href="https://flexboxfroggy.com/#zh-tw">Flex 青蛙</a></li>
</ul>
<h2 id="❒-使用-Flex-遇到的一些問題統整"><a href="#❒-使用-Flex-遇到的一些問題統整" class="headerlink" title="❒ 使用 Flex 遇到的一些問題統整"></a>❒ 使用 Flex 遇到的一些問題統整</h2><h3 id="❶-flex-中圖片變型的原因"><a href="#❶-flex-中圖片變型的原因" class="headerlink" title="❶ flex 中圖片變型的原因"></a>❶ flex 中圖片變型的原因</h3><p><a href="https://codepen.io/echocarriet/pen/GRqQKXd">Codepen 範例</a></p>
<p>區塊設定 <code>flex</code>， 而 <code>align-items</code> 預設會是 <code>stretch</code>，會自動延伸與同層內最高元素<br>的高度 ，如果遇到隔壁排內容比圖片還多，圖片會因此產生變形。<br>可加上 <code>align-items: center</code> 就可讓圖片恢復原比例。</p>
<h3 id="❷-align-items-baseline-是做什麼的"><a href="#❷-align-items-baseline-是做什麼的" class="headerlink" title="❷ align-items:baseline; 是做什麼的 ?"></a>❷ align-items:baseline; 是做什麼的 ?</h3><p>此出處於六角學院課程中問與答。</p>
<ul>
<li><p>Baseline 是英文或其他西方文字會有的文字基線，讓英文字母能夠依照此基準線對齊，可以參考此<a href="https://zh.wikipedia.org/wiki/%E5%9F%BA%E7%B7%9A">連結</a>。<br>  <img src="https://ithelp.ithome.com.tw/upload/images/20220919/20119743UBIcdXYsZY.png" alt="// 示意圖">  </p>
</li>
<li><p><code>align-items: baseline</code> 就是讓並排的元素的交錯軸依照 baseline 對齊，因此可以看到若有元素中有文字內容看起來就會是下圖二這樣。<br> <img src="https://ithelp.ithome.com.tw/upload/images/20220919/201197438zIUS8ESqL.png" alt="// align-items - CSS Reference"></p>
<p>  ▲ 來源：<a href="https://cssreference.io/property/align-items/">align-items - CSS Reference</a> ▲</p>
</li>
</ul>
<h3 id="❸-如何辨別「-align-items-baseline-」與「-align-items-flex-start-」"><a href="#❸-如何辨別「-align-items-baseline-」與「-align-items-flex-start-」" class="headerlink" title="❸ 如何辨別「 align-items:baseline; 」與「 align-items:flex-start; 」 ?"></a>❸ 如何辨別「 align-items:baseline; 」與「 align-items:flex-start; 」 ?</h3><p><strong>父層使用 row &amp; <code>align-items:baseline;</code>   ( <a href="https://codepen.io/echocarriet/pen/oNdLYZY">CodePen 範例</a> ) :</strong></p>
<ul>
<li><code>font-size</code> 相同 :  範例 ❶ 中看起來和 <code>align-items:flex-start;</code> 很像，都是靠上對齊。</li>
<li><code>font-size</code> 不同 :<ul>
<li>使用 <code>baseline</code>：和範例 ❶ 相比，範例 ❷ 中就會比較明顯看到，<code>.box</code> 們依內容文字基準線對齊。 boxC 高度是最高的，其他 <code>.box</code> 會用自己的 baseline 去對齊最高的 boxC 。</li>
<li>使用 <code>flex-start</code>：和範例 ❷ 相比，範例❸ 中可見對齊基準依次軸的起點位置。</li>
</ul>
</li>
</ul>
<p><img src="https://ithelp.ithome.com.tw/upload/images/20220919/20119743cOgZuwLbGN.jpg" alt="// font-size 不同使用 baseline 與 flex-start 差異"></p>
<hr>
<p>下篇繼續關於 Flex 內層屬性，<code>flex-grow</code>、<code>flex-shrink</code>、<code>flex-basis</code>、<code>order</code>、<code>align-self</code>。</p>
<h2 id="❒-參考資訊"><a href="#❒-參考資訊" class="headerlink" title="❒ 參考資訊"></a>❒ 參考資訊</h2><ul>
<li>六角學院 : 使用 HTML、CSS 開發一個網站</li>
<li><a href="https://codepen.io/peiqun/pen/WYzzYX">Flex 六角線上模擬器</a></li>
<li><a href="https://youtu.be/_nCBQ6AIzDU">Css coke - 玩轉 CSS Flex</a></li>
<li>Flex 遊戲<ul>
<li><a href="https://hexschool.github.io/flexbox-pirate/index.html#/">Flex pirate 新手關卡</a></li>
<li><a href="https://flexboxfroggy.com/#zh-tw">Flex 青蛙</a></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>HTML&amp;CSS</category>
      </categories>
      <tags>
        <tag>2022年iThome鐵人賽</tag>
        <tag>flex</tag>
      </tags>
  </entry>
  <entry>
    <title>Day5 | 淺談 Flex 排版內層屬性</title>
    <url>/html-css/20230327/1352471116/</url>
    <content><![CDATA[<p>上篇「 淺談 Flex 排版外層屬性 」說到 flex 的外層屬性們，這篇來說說 flex 的內層屬性。<br><img src="https://ithelp.ithome.com.tw/upload/images/20220920/20119743oYMFcW1bHU.png" alt="// 左方為外層屬性，右方為內層屬性。  圖片出處 : 六角學院 ▲"></p>
<h2 id="❒-Flex-內層屬性"><a href="#❒-Flex-內層屬性" class="headerlink" title="❒ Flex 內層屬性"></a>❒ Flex 內層屬性</h2><h3 id="▷-flex"><a href="#▷-flex" class="headerlink" title="▷ flex"></a>▷ flex</h3><p><code>flex</code> 為 <code>flex-grow</code>、<code>flex-shrink</code>、<code>flex-basis</code> 的縮寫。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">flex</span>: flex-grow flex-shrink flex-basis;</span><br></pre></td></tr></table></figure>

<h3 id="▷-flex-grow-伸展比"><a href="#▷-flex-grow-伸展比" class="headerlink" title="▷ flex-grow 伸展比"></a>▷ flex-grow 伸展比</h3><p>子元素依比例伸展分配剩餘空間，在「 父元素空間充足時會有影響 」，預設為 0。</p>
<ul>
<li><code>flex-grow: 0;</code> 預設，不會將空間分配給子元素。</li>
<li><code>flex-grow: 1;</code> 子元素會依比例進行伸展。</li>
<li><a href="https://codepen.io/echocarriet/pen/dyGBJEB">CodePen 範例</a></li>
</ul>
<h3 id="▷-flex-shrink-收縮比"><a href="#▷-flex-shrink-收縮比" class="headerlink" title="▷ flex-shrink 收縮比"></a>▷ flex-shrink 收縮比</h3><p>子元素的<strong>壓縮</strong>比例分配 ， 在「 父完素空間不足時會有影響 」，預設為 1。</p>
<ul>
<li><code>flex-shrink: 0;</code> 不會被壓縮。</li>
<li><code>flex-shrink: 1;</code> 預設，會被壓縮。</li>
<li><a href="https://codepen.io/echocarriet/pen/VweJrdQ">CodePen 範例</a></li>
</ul>
<h3 id="▷-flex-basis-預設大小"><a href="#▷-flex-basis-預設大小" class="headerlink" title="▷ flex-basis 預設大小"></a>▷ flex-basis 預設大小</h3><p>子元素預設被分配到的空間，預設為 auto。<br><a href="https://codepen.io/echocarriet/pen/VweJrdQ">CodePen 範例</a></p>
<h3 id="▷-order-排序"><a href="#▷-order-排序" class="headerlink" title="▷ order 排序"></a>▷ order 排序</h3><p>可改變子元素的排列順序，整數或負數皆可，數字越小排序越前。<br><a href="https://codepen.io/echocarriet/pen/rNvLZoo">Codepen 範例</a></p>
<h3 id="▷-align-self-單一個物件的次軸對齊"><a href="#▷-align-self-單一個物件的次軸對齊" class="headerlink" title="▷ align-self 單一個物件的次軸對齊"></a>▷ align-self 單一個物件的次軸對齊</h3><p>可調整子元素在次軸的對齊位置 ( 向 <code>align-items</code> )，如果已在父層下 <code>align-items</code>，但要對子層其中一個子元素調整對齊位置，可在那個子元素下 <code>align-self</code> 。<br><a href="https://codepen.io/echocarriet/pen/NWMrOWy">CodePen 範例</a></p>
<p><strong>屬性值：</strong></p>
<ul>
<li><code>auto | flex-start | flex-end | center | baseline | stretch</code></li>
</ul>
<h2 id="❒-Flex-運算"><a href="#❒-Flex-運算" class="headerlink" title="❒ Flex 運算"></a>❒ Flex 運算</h2><h3 id="01-父層寬度為-800px，子元素們寬度各為-300px-600px-100px，寬度依照比例來算會是多少呢"><a href="#01-父層寬度為-800px，子元素們寬度各為-300px-600px-100px，寬度依照比例來算會是多少呢" class="headerlink" title="01. 父層寬度為 800px，子元素們寬度各為 300px,600px,100px，寬度依照比例來算會是多少呢 ?"></a>01. 父層寬度為 800px，子元素們寬度各為 300px,600px,100px，寬度依照比例來算會是多少呢 ?</h3><p><strong>依照比例來算 :</strong></p>
<ul>
<li><code>.box1</code> : 800 px * ( 300 px &#x2F;1000 px ) &#x3D; 240 px</li>
<li><code>.box2</code> : 800 px * ( 600 px &#x2F;1000 px ) &#x3D; 480 px</li>
<li><code>.box3</code> : 800 px * ( 100 px &#x2F;1000 px ) &#x3D; 80 px<br><a href="https://codepen.io/echocarriet/pen/BajgNZw">CodePen 範例</a></li>
</ul>
<h2 id="❒-資料來源"><a href="#❒-資料來源" class="headerlink" title="❒ 資料來源"></a>❒ 資料來源</h2><ul>
<li><a href="https://ithelp.ithome.com.tw/articles/10208741">Flex 空間分配 flex-grow &#x2F; flex-shrink &#x2F; flex-basis</a></li>
<li>六角文章 - <a href="https://w3c.hexschool.com/flexbox/9883b0fb">flex-basis、flex-grow、flex-shrink 屬性介紹</a></li>
<li><a href="https://w3c.hexschool.com/flexbox/c3847835">align-self 屬性介紹</a></li>
<li><a href="https://www.casper.tw/css/2017/07/21/css-flex/#align-self">圖解：CSS Flex 屬性一點也不難 &#x2F; align-self</a></li>
<li>Flex 遊戲<ul>
<li><a href="https://hexschool.github.io/flexbox-pirate/index.html#/">Flex pirate 新手關卡</a></li>
<li><a href="https://flexboxfroggy.com/#zh-tw">Flex 青蛙</a></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>HTML&amp;CSS</category>
      </categories>
      <tags>
        <tag>2022年iThome鐵人賽</tag>
        <tag>flex</tag>
      </tags>
  </entry>
  <entry>
    <title>Day6 | 淺談 Grid 排版</title>
    <url>/html-css/20230327/864635399/</url>
    <content><![CDATA[<p>grid 排版上類似表格，先於外層使用 row 與 column 畫出所需數量的列與欄格線，內層設定好區塊後再放置外層的格子中。</p>
<h2 id="❒-外層屬性"><a href="#❒-外層屬性" class="headerlink" title="❒ 外層屬性"></a>❒ 外層屬性</h2><ul>
<li>「 <code>grid-template-rows|columns</code> 」與「 <code>grid-auto-rows|columns</code> 」擇一使用。</li>
</ul>
<p><strong>屬性：</strong></p>
<ul>
<li><code>display</code><ul>
<li>屬性值為 <code>grid</code>。</li>
</ul>
</li>
<li><code>grid-template-rows</code> 設定格線列<ul>
<li>屬性值可為<code>百分比</code>、<code>px</code>、<code>fr</code>。</li>
</ul>
</li>
<li><code>grid-template-columns</code> 設定格線欄<ul>
<li>屬性值可為<code>百分比</code>、<code>px</code>、<code>fr</code>。</li>
</ul>
</li>
<li><code>grid-auto-rows</code></li>
<li><code>grid-auto-columns</code></li>
<li><code>grid-template-area</code> ：需搭配內層屬性 <code>grid-area</code>。<ul>
<li>屬性值：設定區塊位置，把內層自訂名稱 <code>grid-area</code> 屬性值帶入，像排格子一樣。</li>
<li>屬性值中如果要產生空白也可使用 <code>.</code>。<a href="https://codepen.io/echocarriet/pen/NWMdqZY">CodePen 範例</a></li>
</ul>
</li>
<li><code>grid-auto-flow</code> 可控制主軸為平行或垂直。<ul>
<li>屬性值：<code>row</code>、<code>column</code>。</li>
</ul>
</li>
<li><code>justify-items</code>、<code>justify-content</code>、<code>align-content</code>：與 flex 用法一樣。</li>
<li><code>grid-gap</code>、<code>grid-column-gap</code>、<code>grid-row-gap</code> : 格線水平與垂直間隔。</li>
</ul>
<h3 id="▷-grid-格線單位-fr"><a href="#▷-grid-格線單位-fr" class="headerlink" title="▷ grid 格線單位 fr"></a>▷ grid 格線單位 fr</h3><ul>
<li><code>fr</code> 為 grid 的格線單位，分數的部分需使用 <code>fr</code> 為單位。</li>
<li><code>grid-template-columns: 2fr 2fr 1fr 1fr;</code> 為 2&#x2F;6 2&#x2F;6 1&#x2F;6 1&#x2F;6 ( 分母 6 為 2+2+1+1 )。</li>
</ul>
<h3 id="▷-縮寫"><a href="#▷-縮寫" class="headerlink" title="▷ 縮寫"></a>▷ 縮寫</h3><ul>
<li><code>grid-template-rows|columns</code> 列欄屬性值相同時可使用 repeat，為 <code>repeat(次數, 格線)</code>。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 等同於 25% 25% 25% 25% */</span></span><br><span class="line"><span class="attribute">grid-template-rows</span>: <span class="built_in">repeate</span>(<span class="number">4</span>, <span class="number">25%</span>);</span><br><span class="line"><span class="attribute">grid-template-columns</span>: <span class="built_in">repeate</span>(<span class="number">4</span>, <span class="number">25%</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 同於 25% 25% 25% 100px */</span></span><br><span class="line"><span class="attribute">grid-template-rows</span>: <span class="built_in">repeate</span>(<span class="number">3</span>, <span class="number">25%</span>) <span class="number">100px</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="❒-內層屬性"><a href="#❒-內層屬性" class="headerlink" title="❒ 內層屬性"></a>❒ 內層屬性</h2><ul>
<li>「 <code>grid-area</code> 」與 「 <code>grid-row</code>、<code>grid-column</code> 」擇一使用，遇到多欄位可使用「 <code>grid-row</code>、<code>grid-column</code> 」比較方便，下方會有範例。</li>
</ul>
<p><strong>屬性：</strong></p>
<ul>
<li><code>grid-area</code> ：需搭配外層屬性 <code>grid-template-area</code> 。命名好自訂名稱後，帶入「 外層 <code>grid-template-area</code> 」 的中，也就是看內層的區塊要放到外層的哪些格子內。<ul>
<li>屬性值：自訂名，例 <code>grid-area: A1</code>，A1 為自訂名。</li>
</ul>
</li>
<li><code>grid-row</code><ul>
<li>屬性值：<code>從第幾條線開始/從第幾條線結束;</code>，例 <code>1/3</code> 即從第一條線開始到第三條線結束的區塊。</li>
<li>屬性值也可為負數 ( 倒數的意思 )，在外層沒有設定幾欄幾列時也可使用，例 <code>2/-3</code> 即從第二條線開始至倒數第三條線結束的區塊。</li>
<li>為 <code>grid-row-start</code>、<code>gird-row-end</code> 縮寫</li>
</ul>
</li>
<li><code>grid-column</code><ul>
<li>屬性值與 <code>grid-row</code> 一樣。</li>
<li>為 <code>grid-column-start</code>、<code>gird-column-end</code> 縮寫</li>
</ul>
</li>
<li><code>justify-self</code>、<code>align-self</code>：與 flex 用法一樣。</li>
</ul>
<p><img src="https://ithelp.ithome.com.tw/upload/images/20220921/201197431ZLxggarJG.jpg" alt="// grid-row|column 屬性值，線的概念"></p>
<h2 id="❒-實作"><a href="#❒-實作" class="headerlink" title="❒ 實作"></a>❒ 實作</h2><h3 id="▷-實作-1-grid-template-rows-columns-搭配-grid-area"><a href="#▷-實作-1-grid-template-rows-columns-搭配-grid-area" class="headerlink" title="▷ 實作 1. grid-template-rows|columns 搭配 grid-area"></a>▷ 實作 1. grid-template-rows|columns 搭配 grid-area</h3><p><a href="https://codepen.io/echocarriet/pen/QWrdwXd">CodePen 範例</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;AA&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;BB&quot;</span>&gt;</span>B<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;CC&quot;</span>&gt;</span>C<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">800px</span>;</span><br><span class="line">  <span class="attribute">outline</span>: <span class="number">2px</span> solid gray;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">25%</span> <span class="number">25%</span> <span class="number">25%</span> <span class="number">25%</span>;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">25%</span> <span class="number">25%</span> <span class="number">25%</span> <span class="number">25%</span>;</span><br><span class="line">  <span class="attribute">grid-template-areas</span>: </span><br><span class="line">  <span class="string">&#x27;B3 B3 B3 B1&#x27;</span></span><br><span class="line">  <span class="string">&#x27;B3 B3 B3 B1&#x27;</span></span><br><span class="line">  <span class="string">&#x27;B2 B2 B2 B1&#x27;</span></span><br><span class="line">  <span class="string">&#x27;B2 B2 B2 B1&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.AA</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#9dd3a8</span>;</span><br><span class="line">  <span class="attribute">grid-area</span>: B1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.BB</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ffad60</span>;</span><br><span class="line">  <span class="attribute">grid-area</span>: B2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.CC</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#d9d9f3</span>;</span><br><span class="line">  <span class="attribute">grid-area</span>: B3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://ithelp.ithome.com.tw/upload/images/20220921/20119743uuUzrRE5ai.jpg" alt="// 圖層拆解"></p>
<ul>
<li>外層使用 <code>grid-template-rows|columns</code> 分別設定要幾欄幾列。</li>
<li>內層自行命名要哪些區塊，這邊設定三個區塊 <code>.AA</code> <code>.BB</code> <code>.CC</code> 分別命名為 <code>B1</code> <code>B2</code> <code>B3</code>。</li>
<li>把命名的區塊帶回外層的 <code>grid-template-areas</code> 空間中，如上圖。<ul>
<li><p>注意：外層 <code>grid-template-areas</code> 中「 空間是不能分離的 」不然會無法顯示。如下，把列中第二排第三個 B3 改成 B1，就無法正常顯示囉！</p>
  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&#x27;B3 B3 B3 B1&#x27;</span><br><span class="line">&#x27;B3 B3 B1 B1&#x27;</span><br><span class="line">&#x27;B2 B2 B2 B1&#x27;</span><br><span class="line">&#x27;B2 B2 B2 B1&#x27;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="▷-實作-2-grid-auto-rows-columns-搭配-grid-row-column"><a href="#▷-實作-2-grid-auto-rows-columns-搭配-grid-row-column" class="headerlink" title="▷ 實作 2. grid-auto-rows|columns 搭配 grid-row|column"></a>▷ 實作 2. grid-auto-rows|columns 搭配 grid-row|column</h3><p><a href="https://codepen.io/echocarriet/pen/WNJGdqZ">Codepen 範例</a></p>
<ul>
<li>內層使用 <code>grid-row|column</code>，外層就可以不使用 <code>grid-template-areas</code>。</li>
<li>內層使用 <code>grid-row|column</code> 是可以讓內層區塊重疊的，如範例中 C 與 D 。</li>
<li>如果不想要使用 <code>grid-auto-rows|columns</code> 也可以使用 <code>grid-template-rows|columns</code> 自己先設定好要幾欄幾列。</li>
</ul>
<p><img src="https://ithelp.ithome.com.tw/upload/images/20220921/20119743jDEUPEpQJb.jpg" alt="// 示意圖"></p>
<h3 id="▷-實作-2-2-遇到很多欄列的組合"><a href="#▷-實作-2-2-遇到很多欄列的組合" class="headerlink" title="▷ 實作 2-2. 遇到很多欄列的組合"></a>▷ 實作 2-2. 遇到很多欄列的組合</h3><p><img src="https://ithelp.ithome.com.tw/upload/images/20220921/20119743r9k8M6DHbd.png" alt="示意圖"><br>&#x2F;&#x2F; 圖片出處：<a href="https://youtu.be/fYcz3FUqv7M">CSS GRID &#x2F; CSS格線好好玩【完整版】 | CSS教學 | CSS格線</a> ↑</p>
<ul>
<li>遇到很多欄列的組合，使用 「 <code>grid-template-rows|columns</code> 、<code>grid-template-area</code> 」搭配 <code>grid-area</code> 就會呈現上圖中密密麻麻的 <code>grid-template-area</code>，這時就可以改用 「 <code>grid-auto-rows|columns</code> 搭配 <code>grid-row|column</code> 」。</li>
</ul>
<h2 id="❒-使用-grid-auto-rows-columns-沒有指定欄列數，怎麼會產生格線？"><a href="#❒-使用-grid-auto-rows-columns-沒有指定欄列數，怎麼會產生格線？" class="headerlink" title="❒ 使用 grid-auto-rows|columns 沒有指定欄列數，怎麼會產生格線？"></a>❒ 使用 grid-auto-rows|columns 沒有指定欄列數，怎麼會產生格線？</h2><p>父層欄列都使用 <code>grid-auto-rows|columns</code> 屬性值為 1fr，沒有指定欄數，怎麼會產出格線？</p>
<ul>
<li>這是個<strong>隱形格線的概念：</strong>設定的格位<strong>超過</strong>既定格位，他就會自動產生新的格子。也就是父層欄列都設定了 auto，子層開始到結束的欄列如果超過父層的欄列，就會自動生成新的格子。</li>
</ul>
<h2 id="❒-參考資訊"><a href="#❒-參考資訊" class="headerlink" title="❒ 參考資訊"></a>❒ 參考資訊</h2><ul>
<li><a href="https://youtu.be/fYcz3FUqv7M">CSS GRID &#x2F; CSS格線好好玩【完整版】 | CSS教學 | CSS格線</a></li>
<li><a href="https://www.casper.tw/css/2017/03/22/css-grid-layout/#grid-gap-grid-column-gap-grid-row-gap">卡斯伯 - CSS Grid 屬性介紹</a></li>
<li>Grid 遊戲<ul>
<li><a href="https://codepip.com/games/grid-garden/">Grid 花園遊戲</a></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>HTML&amp;CSS</category>
      </categories>
      <tags>
        <tag>2022年iThome鐵人賽</tag>
        <tag>grid</tag>
      </tags>
  </entry>
</search>
